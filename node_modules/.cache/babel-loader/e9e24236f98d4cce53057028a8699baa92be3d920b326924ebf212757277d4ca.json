{"ast":null,"code":"// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst nodbUtil = require(\"./util.js\");\nconst vector = require('./impl/datahandlers/vector.js');\nclass Settings {\n  constructor() {\n    this.autoCommit = false;\n    this.connectionClass = '';\n    this.dbObjectAsPojo = false;\n    this.edition = '';\n    this.errorOnConcurrentExecute = false;\n    this.events = false;\n    this.externalAuth = false;\n    this.fetchArraySize = 100;\n    this.fetchAsBuffer = [];\n    this.fetchAsString = [];\n    this.lobPrefetchSize = 16384;\n    this.maxRows = 0;\n    this.outFormat = constants.OUT_FORMAT_ARRAY;\n    this.poolIncrement = 1;\n    this.poolMax = 4;\n    this.poolMaxPerShard = 0;\n    this.poolMin = 0;\n    this.poolPingInterval = 60;\n    this.poolPingTimeout = 5000;\n    this.poolTimeout = 60;\n    this.prefetchRows = 2;\n    this.queueTimeout = 60000;\n    this.queueMax = 500;\n    this.stmtCacheSize = 30;\n    this.thin = true;\n    this.thinDriverInitialized = false;\n    this.createFetchTypeMap(this.fetchAsString, this.fetchAsBuffer);\n    this.fetchTypeHandler = undefined;\n    this._JsonId = types.JsonId;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDateComponents()\n  //\n  // Returns the components of a date. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information). This is used only in Thick mode (from node-oracledb 6.0.0).\n  //---------------------------------------------------------------------------\n  _getDateComponents(useLocal, date) {\n    if (useLocal) {\n      return [date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds() * 1000 * 1000];\n    } else {\n      return [date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds() * 1000 * 1000];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeDate()\n  //\n  // Returns a date from the given components. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information).\n  //---------------------------------------------------------------------------\n  _makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset) {\n    return nodbUtil.makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset);\n  }\n\n  //---------------------------------------------------------------------------\n  // _decodeVector()\n  //\n  // Returns a typed array by decoding buffer.\n  //\n  //---------------------------------------------------------------------------\n  _decodeVector(buffer) {\n    const decoder = new vector.VectorDecoder(buffer);\n    return decoder.decode();\n  }\n\n  //---------------------------------------------------------------------------\n  // _encodeVector()\n  //\n  // Create a Vector image from typedarray\n  //\n  //---------------------------------------------------------------------------\n  _encodeVector(value) {\n    const encoder = new vector.VectorEncoder();\n    return encoder.encode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // addToOptions()\n  //\n  // Adds the named settingsto the options, if no option has already been\n  // specified.\n  //---------------------------------------------------------------------------\n  addToOptions(options) {\n    for (let i = 1; i < arguments.length; i++) {\n      const key = arguments[i];\n      if (options[key] === undefined) options[key] = this[key];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // createFetchTypeMap()\n  //\n  // Creates the fetch type map. This overrides the default fetch type mapping\n  // used by the driver with the contents of the fetchAsString and\n  // fetchAsBuffer arrays. The error checking is performed here as well in\n  // order to eliminate repeated code.\n  // ---------------------------------------------------------------------------\n  createFetchTypeMap(fetchAsString, fetchAsBuffer) {\n    // create a copy of the default fetch type map\n    const map = new Map(types.DB_TYPE_FETCH_TYPE_MAP);\n\n    // adjust map for fetchAsString settings\n    for (const element of fetchAsString) {\n      switch (element) {\n        case types.DB_TYPE_NUMBER:\n          map.set(types.DB_TYPE_BINARY_DOUBLE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_FLOAT, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_INTEGER, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_NUMBER, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_TIMESTAMP:\n          map.set(types.DB_TYPE_DATE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_TZ, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_LTZ, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_CLOB:\n        case types.DB_TYPE_NCLOB:\n          map.set(types.DB_TYPE_CLOB, types.DB_TYPE_LONG);\n          map.set(types.DB_TYPE_NCLOB, types.DB_TYPE_LONG_NVARCHAR);\n          break;\n        case types.DB_TYPE_VECTOR:\n          map.set(types.DB_TYPE_VECTOR, types.DB_TYPE_LONG);\n          break;\n        case types.DB_TYPE_RAW:\n          map.set(types.DB_TYPE_RAW, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_JSON:\n          map.set(types.DB_TYPE_JSON, types.DB_TYPE_VARCHAR);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // adjust map for fetchAsBuffer settings\n    for (const element of fetchAsBuffer) {\n      switch (element) {\n        case types.DB_TYPE_BLOB:\n          map.set(types.DB_TYPE_BLOB, types.DB_TYPE_LONG_RAW);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // assign calculated fetchTypeMap for later use\n    this.fetchTypeMap = map;\n  }\n}\nmodule.exports = new Settings();","map":{"version":3,"names":["constants","require","errors","types","nodbUtil","vector","Settings","constructor","autoCommit","connectionClass","dbObjectAsPojo","edition","errorOnConcurrentExecute","events","externalAuth","fetchArraySize","fetchAsBuffer","fetchAsString","lobPrefetchSize","maxRows","outFormat","OUT_FORMAT_ARRAY","poolIncrement","poolMax","poolMaxPerShard","poolMin","poolPingInterval","poolPingTimeout","poolTimeout","prefetchRows","queueTimeout","queueMax","stmtCacheSize","thin","thinDriverInitialized","createFetchTypeMap","fetchTypeHandler","undefined","_JsonId","JsonId","_getDateComponents","useLocal","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","_makeDate","year","month","day","hour","minute","second","fseconds","offset","makeDate","_decodeVector","buffer","decoder","VectorDecoder","decode","_encodeVector","value","encoder","VectorEncoder","encode","addToOptions","options","i","arguments","length","key","map","Map","DB_TYPE_FETCH_TYPE_MAP","element","DB_TYPE_NUMBER","set","DB_TYPE_BINARY_DOUBLE","DB_TYPE_VARCHAR","DB_TYPE_BINARY_FLOAT","DB_TYPE_BINARY_INTEGER","DB_TYPE_TIMESTAMP","DB_TYPE_DATE","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_CLOB","DB_TYPE_NCLOB","DB_TYPE_LONG","DB_TYPE_LONG_NVARCHAR","DB_TYPE_VECTOR","DB_TYPE_RAW","DB_TYPE_JSON","throwErr","ERR_INVALID_TYPE_FOR_CONVERSION","DB_TYPE_BLOB","DB_TYPE_LONG_RAW","fetchTypeMap","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/settings.js"],"sourcesContent":["// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst nodbUtil = require(\"./util.js\");\nconst vector = require('./impl/datahandlers/vector.js');\n\nclass Settings {\n\n  constructor() {\n    this.autoCommit = false;\n    this.connectionClass = '';\n    this.dbObjectAsPojo = false;\n    this.edition = '';\n    this.errorOnConcurrentExecute = false;\n    this.events = false;\n    this.externalAuth = false;\n    this.fetchArraySize = 100;\n    this.fetchAsBuffer = [];\n    this.fetchAsString = [];\n    this.lobPrefetchSize = 16384;\n    this.maxRows = 0;\n    this.outFormat = constants.OUT_FORMAT_ARRAY;\n    this.poolIncrement = 1;\n    this.poolMax = 4;\n    this.poolMaxPerShard = 0;\n    this.poolMin = 0;\n    this.poolPingInterval = 60;\n    this.poolPingTimeout = 5000;\n    this.poolTimeout = 60;\n    this.prefetchRows = 2;\n    this.queueTimeout = 60000;\n    this.queueMax = 500;\n    this.stmtCacheSize = 30;\n    this.thin = true;\n    this.thinDriverInitialized = false;\n    this.createFetchTypeMap(this.fetchAsString, this.fetchAsBuffer);\n    this.fetchTypeHandler = undefined;\n    this._JsonId = types.JsonId;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDateComponents()\n  //\n  // Returns the components of a date. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information). This is used only in Thick mode (from node-oracledb 6.0.0).\n  //---------------------------------------------------------------------------\n  _getDateComponents(useLocal, date) {\n    if (useLocal) {\n      return [\n        date.getFullYear(),\n        date.getMonth() + 1,\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds() * 1000 * 1000\n      ];\n    } else {\n      return [\n        date.getUTCFullYear(),\n        date.getUTCMonth() + 1,\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds(),\n        date.getUTCMilliseconds() * 1000 * 1000\n      ];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeDate()\n  //\n  // Returns a date from the given components. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information).\n  //---------------------------------------------------------------------------\n  _makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset) {\n    return nodbUtil.makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset);\n  }\n\n  //---------------------------------------------------------------------------\n  // _decodeVector()\n  //\n  // Returns a typed array by decoding buffer.\n  //\n  //---------------------------------------------------------------------------\n  _decodeVector(buffer) {\n    const decoder = new vector.VectorDecoder(buffer);\n    return decoder.decode();\n  }\n\n  //---------------------------------------------------------------------------\n  // _encodeVector()\n  //\n  // Create a Vector image from typedarray\n  //\n  //---------------------------------------------------------------------------\n  _encodeVector(value) {\n    const encoder = new vector.VectorEncoder();\n    return encoder.encode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // addToOptions()\n  //\n  // Adds the named settingsto the options, if no option has already been\n  // specified.\n  //---------------------------------------------------------------------------\n  addToOptions(options) {\n    for (let i = 1; i < arguments.length; i++) {\n      const key = arguments[i];\n      if (options[key] === undefined)\n        options[key] = this[key];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // createFetchTypeMap()\n  //\n  // Creates the fetch type map. This overrides the default fetch type mapping\n  // used by the driver with the contents of the fetchAsString and\n  // fetchAsBuffer arrays. The error checking is performed here as well in\n  // order to eliminate repeated code.\n  // ---------------------------------------------------------------------------\n  createFetchTypeMap(fetchAsString, fetchAsBuffer) {\n\n    // create a copy of the default fetch type map\n    const map = new Map(types.DB_TYPE_FETCH_TYPE_MAP);\n\n    // adjust map for fetchAsString settings\n    for (const element of fetchAsString) {\n      switch (element) {\n        case types.DB_TYPE_NUMBER:\n          map.set(types.DB_TYPE_BINARY_DOUBLE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_FLOAT, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_INTEGER, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_NUMBER, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_TIMESTAMP:\n          map.set(types.DB_TYPE_DATE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_TZ, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_LTZ, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_CLOB:\n        case types.DB_TYPE_NCLOB:\n          map.set(types.DB_TYPE_CLOB, types.DB_TYPE_LONG);\n          map.set(types.DB_TYPE_NCLOB, types.DB_TYPE_LONG_NVARCHAR);\n          break;\n        case types.DB_TYPE_VECTOR:\n          map.set(types.DB_TYPE_VECTOR, types.DB_TYPE_LONG);\n          break;\n        case types.DB_TYPE_RAW:\n          map.set(types.DB_TYPE_RAW, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_JSON:\n          map.set(types.DB_TYPE_JSON, types.DB_TYPE_VARCHAR);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // adjust map for fetchAsBuffer settings\n    for (const element of fetchAsBuffer) {\n      switch (element) {\n        case types.DB_TYPE_BLOB:\n          map.set(types.DB_TYPE_BLOB, types.DB_TYPE_LONG_RAW);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // assign calculated fetchTypeMap for later use\n    this.fetchTypeMap = map;\n\n  }\n\n}\n\nmodule.exports = new Settings();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}