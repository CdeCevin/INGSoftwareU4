{"ast":null,"code":"// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst LobImpl = require('../impl/lob.js');\nconst constants = require('./protocol/constants.js');\nconst LobOpMessage = require('./protocol/messages/lobOp.js');\nconst errors = require('../errors.js');\nconst types = require('../types.js');\nclass ThinLobImpl extends LobImpl {\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this.conn;\n  }\n\n  //---------------------------------------------------------------------------\n  // _sendMessage()\n  //\n  // Sends a LOB operation message to the server and processes the response.\n  //---------------------------------------------------------------------------\n  async _sendMessage(options) {\n    const message = new LobOpMessage(this.conn, options);\n    await this.conn._protocol._processMessage(message);\n    if (options.operation === constants.TNS_LOB_OP_READ) {\n      return message.data ? message.data : null;\n    } else if (options.operation === constants.TNS_LOB_OP_FILE_EXISTS || options.operation === constants.TNS_LOB_OP_FILE_ISOPEN) {\n      return message.boolFlag;\n    } else {\n      return message.amount;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getChunkSize()\n  //\n  // Internal method for returning the chunk size of the LOB.\n  //---------------------------------------------------------------------------\n  getChunkSize() {\n    return this._chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getChunkSizeAsync()\n  //\n  // Internal method for returning the chunk size of the LOB fetched from\n  // the database.\n  //---------------------------------------------------------------------------\n  async _getChunkSizeAsync() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_GET_CHUNK_SIZE,\n      sourceLobImpl: this,\n      sendAmount: true\n    };\n    this._chunkSize = this._pieceSize = await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // getLength()\n  //\n  // Internal method for returning the length of a LOB.\n  //---------------------------------------------------------------------------\n  getLength() {\n    return this._length;\n  }\n\n  //---------------------------------------------------------------------------\n  // getPieceSize()\n  //\n  // Internal method returning the size to use for each piece that is\n  // transferred when reading from the LOB.\n  //---------------------------------------------------------------------------\n  getPieceSize() {\n    return this._pieceSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // setPieceSize()\n  //\n  // Internal method to set the pieceSize for LOBs.\n  //---------------------------------------------------------------------------\n  setPieceSize(value) {\n    this._pieceSize = value;\n  }\n\n  //---------------------------------------------------------------------------\n  // getType()\n  //\n  // Internal method returning the datatype of LOBs.\n  //---------------------------------------------------------------------------\n  getType() {\n    return this.dbType;\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Internal method returning the data obtained from the database.\n  //---------------------------------------------------------------------------\n  async getData(offset = 1, len = this._length) {\n    let shouldClose = false;\n    if (!len) {\n      len = this._length;\n    }\n    if (this.dbType === types.DB_TYPE_BFILE) {\n      if (!(await this.isFileOpen())) {\n        shouldClose = true;\n        await this.openFile();\n      }\n    }\n    let data;\n    // if read fails and BFILE was opened by application, we close it.\n    try {\n      data = await this.read(offset, len);\n    } finally {\n      if (shouldClose) {\n        await this.closeFile();\n      }\n    }\n    return data;\n  }\n\n  //---------------------------------------------------------------------------\n  // read()\n  //\n  // Internal method for reading a portion (or all) of the data in the LOB.\n  //---------------------------------------------------------------------------\n  async read(offset, length) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_READ,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      sendAmount: true,\n      amount: length || this._pieceSize\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // write()\n  //\n  // Internal method for writing data to the LOB object.\n  //---------------------------------------------------------------------------\n  async write(offset, data) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_WRITE,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      data: data\n    };\n    await this._sendMessage(options);\n    this._length += data.length;\n  }\n\n  //---------------------------------------------------------------------------\n  // getCsfrm()\n  //\n  // Return the character set encoding used by the LOB.\n  //---------------------------------------------------------------------------\n  getCsfrm() {\n    if (this.dbType._csfrm !== constants.CSFRM_NCHAR) {\n      if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_3] & constants.TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET) {\n        return constants.CSFRM_NCHAR;\n      }\n    }\n    return this.dbType._csfrm;\n  }\n\n  /**\n   * Creates a temporary LOB.\n   *\n   * @param {object} conn Connection Impl object\n   * @param {number} dbType indicates BLOB/CLOB DB type\n   */\n  async create(conn, dbType) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this.dbType = dbType;\n    this._locator = Buffer.alloc(40);\n    this._isTempLob = true;\n    this._length = 0;\n    const options = {\n      operation: constants.TNS_LOB_OP_CREATE_TEMP,\n      sourceLobImpl: this,\n      amount: constants.TNS_DURATION_SESSION,\n      destOffset: dbType._oraTypeNum,\n      sourceOffset: dbType._csfrm,\n      sendAmount: true\n    };\n    await this._sendMessage(options);\n    await this._getChunkSizeAsync();\n  }\n\n  //---------------------------------------------------------------------------\n  // fileExists()\n  //\n  // Internal method for returning whether the file referenced by a BFILE\n  // exists.\n  //---------------------------------------------------------------------------\n  async fileExists() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_EXISTS,\n      sourceLobImpl: this\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // getDirFileName()\n  //\n  // Internal method for returning the directory alias and name of the file\n  // referenced by a BFILE\n  //---------------------------------------------------------------------------\n  getDirFileName() {\n    const dirNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + 2;\n    const dirNameLen = this._locator.readUInt16BE(constants.TNS_LOB_LOC_FIXED_OFFSET);\n    const fileNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + dirNameLen + 4;\n    const fileNameLen = this._locator.readUInt16BE(dirNameOffset + dirNameLen);\n    const dirName = this._locator.slice(dirNameOffset, dirNameOffset + dirNameLen).toString();\n    const fileName = this._locator.slice(fileNameOffset, fileNameOffset + fileNameLen).toString();\n    return {\n      dirName: dirName,\n      fileName: fileName\n    };\n  }\n\n  //---------------------------------------------------------------------------\n  // checkConn()\n  //\n  // Internal method to check the connection.\n  //---------------------------------------------------------------------------\n  checkConn() {\n    if (!this.conn.nscon.connected) errors.throwErr(errors.ERR_INVALID_CONNECTION);\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Internal method to close the LOBs using piggyback mechanism.\n  //---------------------------------------------------------------------------\n  close() {\n    this.checkConn();\n    if (this._isTempLob) {\n      // Add to freelist which will be sent in piggyback fashion\n      this.conn._tempLobsToClose.push(this._locator);\n      this.conn._tempLobsTotalSize += this._locator.length;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // closeFile()\n  //\n  // Internal method to close the opened file for BFILE LOBs.\n  //---------------------------------------------------------------------------\n  async closeFile() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_CLOSE,\n      sourceLobImpl: this\n    };\n    await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Internal method to initialize LOBs.\n  //---------------------------------------------------------------------------\n  init(conn, locator, dbType, len, chunkSize) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this._locator = locator;\n    this._isTempLob = false;\n    if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_4] & constants.TNS_LOB_LOC_FLAGS_TEMP === constants.TNS_LOB_LOC_FLAGS_TEMP || this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_1] & constants.TNS_LOB_LOC_FLAGS_ABSTRACT === constants.TNS_LOB_LOC_FLAGS_ABSTRACT) {\n      this._isTempLob = true;\n    }\n    this.dbType = dbType;\n    this._length = len;\n    this._chunkSize = chunkSize;\n    this._pieceSize = chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // isFileOpen()\n  //\n  // Internal method to check if the file is already open.\n  //---------------------------------------------------------------------------\n  async isFileOpen() {\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_ISOPEN,\n      sourceLobImpl: this\n    };\n    await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // openFile()\n  //\n  // Internal method for opening file (BFILE).\n  //---------------------------------------------------------------------------\n  async openFile() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_OPEN,\n      sourceLobImpl: this,\n      amount: constants.TNS_LOB_OPEN_READ_ONLY,\n      sendAmount: true\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // setDirFileName()\n  //\n  // Internal method for setting the directory alias and name of the file\n  // referenced by a BFILE\n  //---------------------------------------------------------------------------\n  setDirFileName(dirObject) {\n    const dirNameLen = Buffer.byteLength(dirObject.dirName);\n    const dirNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + 2;\n    const fileNameOffset = dirNameOffset + dirNameLen + 2;\n    const fileNameLen = Buffer.byteLength(dirObject.fileName);\n    const newLocLen = fileNameOffset + fileNameLen;\n    const newLocator = Buffer.allocUnsafe(newLocLen);\n    this._locator.copy(newLocator, 0, 0, constants.TNS_LOB_LOC_FIXED_OFFSET + 1);\n    newLocator.writeUInt16BE(dirNameLen, constants.TNS_LOB_LOC_FIXED_OFFSET);\n    newLocator.write(dirObject.dirName, dirNameOffset);\n    newLocator.writeInt16BE(fileNameLen, dirNameOffset + dirNameLen);\n    newLocator.write(dirObject.fileName, fileNameOffset);\n    this._locator = newLocator;\n  }\n}\nmodule.exports = ThinLobImpl;","map":{"version":3,"names":["Buffer","require","LobImpl","constants","LobOpMessage","errors","types","ThinLobImpl","_getConnImpl","conn","_sendMessage","options","message","_protocol","_processMessage","operation","TNS_LOB_OP_READ","data","TNS_LOB_OP_FILE_EXISTS","TNS_LOB_OP_FILE_ISOPEN","boolFlag","amount","getChunkSize","_chunkSize","_getChunkSizeAsync","checkConn","TNS_LOB_OP_GET_CHUNK_SIZE","sourceLobImpl","sendAmount","_pieceSize","getLength","_length","getPieceSize","setPieceSize","value","getType","dbType","getData","offset","len","shouldClose","DB_TYPE_BFILE","isFileOpen","openFile","read","closeFile","length","sourceOffset","write","TNS_LOB_OP_WRITE","getCsfrm","_csfrm","CSFRM_NCHAR","_locator","TNS_LOB_LOC_OFFSET_FLAG_3","TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET","create","dirtyLength","alloc","_isTempLob","TNS_LOB_OP_CREATE_TEMP","TNS_DURATION_SESSION","destOffset","_oraTypeNum","fileExists","getDirFileName","dirNameOffset","TNS_LOB_LOC_FIXED_OFFSET","dirNameLen","readUInt16BE","fileNameOffset","fileNameLen","dirName","slice","toString","fileName","nscon","connected","throwErr","ERR_INVALID_CONNECTION","close","_tempLobsToClose","push","_tempLobsTotalSize","TNS_LOB_OP_FILE_CLOSE","init","locator","chunkSize","TNS_LOB_LOC_OFFSET_FLAG_4","TNS_LOB_LOC_FLAGS_TEMP","TNS_LOB_LOC_OFFSET_FLAG_1","TNS_LOB_LOC_FLAGS_ABSTRACT","TNS_LOB_OP_FILE_OPEN","TNS_LOB_OPEN_READ_ONLY","setDirFileName","dirObject","byteLength","newLocLen","newLocator","allocUnsafe","copy","writeUInt16BE","writeInt16BE","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/thin/lob.js"],"sourcesContent":["// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst LobImpl = require('../impl/lob.js');\nconst constants = require('./protocol/constants.js');\nconst LobOpMessage = require('./protocol/messages/lobOp.js');\nconst errors = require('../errors.js');\nconst types = require('../types.js');\n\nclass ThinLobImpl extends LobImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this.conn;\n  }\n\n  //---------------------------------------------------------------------------\n  // _sendMessage()\n  //\n  // Sends a LOB operation message to the server and processes the response.\n  //---------------------------------------------------------------------------\n  async _sendMessage(options) {\n    const message = new LobOpMessage(this.conn, options);\n    await this.conn._protocol._processMessage(message);\n    if (options.operation === constants.TNS_LOB_OP_READ) {\n      return (message.data) ? message.data : null;\n    } else if (\n      options.operation === constants.TNS_LOB_OP_FILE_EXISTS ||\n      options.operation === constants.TNS_LOB_OP_FILE_ISOPEN\n    ) {\n      return message.boolFlag;\n    } else {\n      return message.amount;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getChunkSize()\n  //\n  // Internal method for returning the chunk size of the LOB.\n  //---------------------------------------------------------------------------\n  getChunkSize() {\n    return this._chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getChunkSizeAsync()\n  //\n  // Internal method for returning the chunk size of the LOB fetched from\n  // the database.\n  //---------------------------------------------------------------------------\n  async _getChunkSizeAsync() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_GET_CHUNK_SIZE,\n      sourceLobImpl: this,\n      sendAmount: true\n    };\n    this._chunkSize = this._pieceSize = await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // getLength()\n  //\n  // Internal method for returning the length of a LOB.\n  //---------------------------------------------------------------------------\n  getLength() {\n    return this._length;\n  }\n\n  //---------------------------------------------------------------------------\n  // getPieceSize()\n  //\n  // Internal method returning the size to use for each piece that is\n  // transferred when reading from the LOB.\n  //---------------------------------------------------------------------------\n  getPieceSize() {\n    return this._pieceSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // setPieceSize()\n  //\n  // Internal method to set the pieceSize for LOBs.\n  //---------------------------------------------------------------------------\n  setPieceSize(value) {\n    this._pieceSize = value;\n  }\n\n  //---------------------------------------------------------------------------\n  // getType()\n  //\n  // Internal method returning the datatype of LOBs.\n  //---------------------------------------------------------------------------\n  getType() {\n    return this.dbType;\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Internal method returning the data obtained from the database.\n  //---------------------------------------------------------------------------\n  async getData(offset = 1, len = this._length) {\n    let shouldClose = false;\n    if (!len) {\n      len = this._length;\n    }\n    if (this.dbType === types.DB_TYPE_BFILE) {\n      if (!await this.isFileOpen()) {\n        shouldClose = true;\n        await this.openFile();\n      }\n    }\n    let data;\n    // if read fails and BFILE was opened by application, we close it.\n    try {\n      data = await this.read(offset, len);\n    } finally {\n      if (shouldClose) {\n        await this.closeFile();\n      }\n    }\n    return data;\n  }\n\n  //---------------------------------------------------------------------------\n  // read()\n  //\n  // Internal method for reading a portion (or all) of the data in the LOB.\n  //---------------------------------------------------------------------------\n  async read(offset, length) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_READ,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      sendAmount: true,\n      amount: length || this._pieceSize\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // write()\n  //\n  // Internal method for writing data to the LOB object.\n  //---------------------------------------------------------------------------\n  async write(offset, data) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_WRITE,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      data: data\n    };\n    await this._sendMessage(options);\n    this._length += data.length;\n  }\n\n  //---------------------------------------------------------------------------\n  // getCsfrm()\n  //\n  // Return the character set encoding used by the LOB.\n  //---------------------------------------------------------------------------\n  getCsfrm() {\n    if (this.dbType._csfrm !== constants.CSFRM_NCHAR) {\n      if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_3] &\n          constants.TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET) {\n        return constants.CSFRM_NCHAR;\n      }\n    }\n    return this.dbType._csfrm;\n  }\n\n  /**\n   * Creates a temporary LOB.\n   *\n   * @param {object} conn Connection Impl object\n   * @param {number} dbType indicates BLOB/CLOB DB type\n   */\n  async create(conn, dbType) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this.dbType = dbType;\n    this._locator = Buffer.alloc(40);\n    this._isTempLob = true;\n    this._length = 0;\n    const options = {\n      operation: constants.TNS_LOB_OP_CREATE_TEMP,\n      sourceLobImpl: this,\n      amount: constants.TNS_DURATION_SESSION,\n      destOffset: dbType._oraTypeNum,\n      sourceOffset: dbType._csfrm,\n      sendAmount: true\n    };\n    await this._sendMessage(options);\n    await this._getChunkSizeAsync();\n  }\n\n  //---------------------------------------------------------------------------\n  // fileExists()\n  //\n  // Internal method for returning whether the file referenced by a BFILE\n  // exists.\n  //---------------------------------------------------------------------------\n  async fileExists() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_EXISTS,\n      sourceLobImpl: this,\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // getDirFileName()\n  //\n  // Internal method for returning the directory alias and name of the file\n  // referenced by a BFILE\n  //---------------------------------------------------------------------------\n  getDirFileName() {\n    const dirNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + 2;\n    const dirNameLen = this._locator.readUInt16BE(\n      constants.TNS_LOB_LOC_FIXED_OFFSET\n    );\n    const fileNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + dirNameLen + 4;\n    const fileNameLen = this._locator.readUInt16BE(\n      dirNameOffset + dirNameLen\n    );\n    const dirName = this._locator.slice(\n      dirNameOffset, dirNameOffset + dirNameLen\n    ).toString();\n    const fileName = this._locator.slice(\n      fileNameOffset, fileNameOffset + fileNameLen\n    ).toString();\n    return { dirName: dirName, fileName: fileName };\n  }\n\n  //---------------------------------------------------------------------------\n  // checkConn()\n  //\n  // Internal method to check the connection.\n  //---------------------------------------------------------------------------\n  checkConn() {\n    if (!this.conn.nscon.connected)\n      errors.throwErr(errors.ERR_INVALID_CONNECTION);\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Internal method to close the LOBs using piggyback mechanism.\n  //---------------------------------------------------------------------------\n  close() {\n    this.checkConn();\n    if (this._isTempLob) {\n      // Add to freelist which will be sent in piggyback fashion\n      this.conn._tempLobsToClose.push(this._locator);\n      this.conn._tempLobsTotalSize += this._locator.length;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // closeFile()\n  //\n  // Internal method to close the opened file for BFILE LOBs.\n  //---------------------------------------------------------------------------\n  async closeFile() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_CLOSE,\n      sourceLobImpl: this,\n    };\n    await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Internal method to initialize LOBs.\n  //---------------------------------------------------------------------------\n  init(conn, locator, dbType, len, chunkSize) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this._locator = locator;\n    this._isTempLob = false;\n    if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_4] & constants.TNS_LOB_LOC_FLAGS_TEMP === constants.TNS_LOB_LOC_FLAGS_TEMP\n      || this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_1] & constants.TNS_LOB_LOC_FLAGS_ABSTRACT === constants.TNS_LOB_LOC_FLAGS_ABSTRACT) {\n      this._isTempLob = true;\n    }\n    this.dbType = dbType;\n    this._length = len;\n    this._chunkSize = chunkSize;\n    this._pieceSize = chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // isFileOpen()\n  //\n  // Internal method to check if the file is already open.\n  //---------------------------------------------------------------------------\n  async isFileOpen() {\n    const options = {\n      operation: constants.TNS_LOB_OP_FILE_ISOPEN,\n      sourceLobImpl: this\n    };\n    await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // openFile()\n  //\n  // Internal method for opening file (BFILE).\n  //---------------------------------------------------------------------------\n  async openFile() {\n    this.checkConn();\n    const options =  {\n      operation: constants.TNS_LOB_OP_FILE_OPEN,\n      sourceLobImpl: this,\n      amount: constants.TNS_LOB_OPEN_READ_ONLY,\n      sendAmount: true\n    };\n    return await this._sendMessage(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // setDirFileName()\n  //\n  // Internal method for setting the directory alias and name of the file\n  // referenced by a BFILE\n  //---------------------------------------------------------------------------\n  setDirFileName(dirObject) {\n    const dirNameLen = Buffer.byteLength(dirObject.dirName);\n    const dirNameOffset = constants.TNS_LOB_LOC_FIXED_OFFSET + 2;\n    const fileNameOffset = dirNameOffset + dirNameLen + 2;\n    const fileNameLen = Buffer.byteLength(dirObject.fileName);\n    const newLocLen = fileNameOffset + fileNameLen;\n    const newLocator = Buffer.allocUnsafe(newLocLen);\n    this._locator.copy(newLocator, 0, 0, constants.TNS_LOB_LOC_FIXED_OFFSET + 1);\n    newLocator.writeUInt16BE(dirNameLen, constants.TNS_LOB_LOC_FIXED_OFFSET);\n    newLocator.write(dirObject.dirName, dirNameOffset);\n    newLocator.writeInt16BE(fileNameLen, dirNameOffset + dirNameLen);\n    newLocator.write(dirObject.fileName, fileNameOffset);\n    this._locator = newLocator;\n  }\n\n}\n\nmodule.exports = ThinLobImpl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}