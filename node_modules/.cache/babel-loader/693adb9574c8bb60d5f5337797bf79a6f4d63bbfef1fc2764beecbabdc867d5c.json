{"ast":null,"code":"// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require(\"../errors.js\");\nconst {\n  base\n} = require(\"./base.js\");\nconst fs = require('fs');\nconst cloud_net_naming_pattern_oci = new RegExp(\"(?<objservername>[A-Za-z0-9._-]+)/n/\" + \"(?<namespace>[A-Za-z0-9._-]+)/b/\" + \"(?<bucketname>[A-Za-z0-9._-]+)/o/\" + \"(?<filename>[A-Za-z0-9._-]+)\" + \"(/c/(?<alias>.+))?$\");\n// object to store module references that will be populated by init()\nconst oci = {};\nclass OCIProvider extends base {\n  constructor(provider_arg, urlExtendedPart) {\n    super(urlExtendedPart);\n    const match = provider_arg.match(cloud_net_naming_pattern_oci);\n    if (match) {\n      this._addParam(\"objservername\", match.groups.objservername);\n      this._addParam(\"namespace\", match.groups.namespace);\n      this._addParam(\"bucketname\", match.groups.bucketname);\n      this._addParam(\"filename\", match.groups.filename);\n      if (match.groups.alias) this._addParam(\"alias\", match.groups.alias);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Require/import modules from ociobject\n  //---------------------------------------------------------------------------\n  init() {\n    oci.common = require('oci-common');\n    oci.objectstorage = require('oci-objectstorage');\n  }\n\n  //---------------------------------------------------------------------------\n  // _streamToString()\n  //\n  // Converts data stored in a Readable stream to string\n  //---------------------------------------------------------------------------\n  async _streamToString(stream) {\n    const chunks = [];\n    for await (const chunk of stream) {\n      chunks.push(Buffer.from(chunk));\n    }\n    return Buffer.concat(chunks).toString(\"utf-8\");\n  }\n\n  //---------------------------------------------------------------------------\n  // _returnCredential()\n  //\n  // Returns credential to access OCI Object Store on the basis of\n  // authentication parameters given by the user.\n  //---------------------------------------------------------------------------\n  async _returnCredential() {\n    let provider = null;\n    let auth = null;\n    if (this.paramMap.get('authentication')) {\n      auth = this.paramMap.get('authentication').toUpperCase();\n    }\n    // authentication parameter given and its not OCI_DEFAULT\n    if (auth && !(auth == 'OCI_DEFAULT')) {\n      if (auth == 'OCI_INSTANCE_PRINCIPAL') {\n        provider = await new oci.common.InstancePrincipalsAuthenticationDetailsProviderBuilder().build();\n      } else if (auth == 'OCI_RESOURCE_PRINCIPAL') {\n        provider = await new oci.common.ResourcePrincipalAuthenticationDetailsProvider.builder();\n      } else errors.throwErr(errors.ERR_OCIOBJECT_CONFIG_PROVIDER_AUTH_FAILED, auth);\n    } else {\n      // default authentication\n      try {\n        //authentication parameters exist in the configurationFile\n        provider = new oci.common.ConfigFileAuthenticationDetailsProvider(this.paramMap.get(\"oci_profile_path\"),\n        //default path ~/.oci/config\n        this.paramMap.get(\"oci_profile\"));\n      } catch (err) {\n        //throw error for wrong profile or wrong path\n        if (!this.paramMap.get(\"oci_tenancy\") || !this.paramMap.get(\"oci_user\")) {\n          throw err;\n        }\n        // authentication parameters are directly given in the connectString\n        const publicKey = fs.readFileSync(this.paramMap.get('oci_key_file'), {\n          encoding: \"utf8\"\n        });\n        const region = this.retrieveRegion(this.paramMap.get('objservername'));\n        provider = new oci.common.SimpleAuthenticationDetailsProvider(this.paramMap.get(\"oci_tenancy\"), this.paramMap.get(\"oci_user\"), this.paramMap.get(\"oci_fingerprint\"), publicKey, undefined, oci.common.Region[region]);\n      }\n    }\n    return provider;\n  }\n\n  //---------------------------------------------------------------------------\n  // returnConfig()\n  //\n  // Returns config stored in the OCI Object Store and\n  // parses and gets password field stored in OCI/Azure Vault\n  //---------------------------------------------------------------------------\n  async returnConfig() {\n    const configObject = {};\n    const credential = await this._returnCredential();\n    // oci object store\n    const client_oci = new oci.objectstorage.ObjectStorageClient({\n      authenticationDetailsProvider: credential\n    });\n    const getObjectRequest = {\n      objectName: this.paramMap.get('filename'),\n      bucketName: this.paramMap.get('bucketname'),\n      namespaceName: this.paramMap.get('namespace')\n    };\n    let credential1;\n    const getObjectResponse = await client_oci.getObject(getObjectRequest);\n    const resp = await this._streamToString(getObjectResponse.value);\n    // Entire object we get from OCI Object Storage\n    let obj = JSON.parse(resp);\n    const userAlias = this.paramMap.get('alias');\n    if (userAlias) {\n      obj = obj[userAlias];\n    }\n    const pmSection = 'node-oracledb';\n    const params = obj[pmSection];\n    for (const key in params) {\n      var val = params[key];\n      configObject[key] = val;\n    }\n    configObject.connectString = obj.connect_descriptor;\n    configObject.user = obj.user;\n    if (obj.password) {\n      if (obj.password.type == \"vault-azure\") {\n        if (obj.password.authentication) {\n          const {\n            SecretClient\n          } = require(\"@azure/keyvault-secrets\");\n          const {\n            ClientSecretCredential,\n            ClientCertificateCredential\n          } = require(\"@azure/identity\");\n          if (obj.password.authentication.azure_client_secret) credential1 = new ClientSecretCredential(obj.password.authentication.azure_tenant_id, obj.password.authentication.azure_client_id, obj.password.authentication.azure_client_secret);else if (obj.password.authentication.azure_client_certificate_path) credential1 = new ClientCertificateCredential(obj.password.authentication.azure_tenant_id, obj.password.authentication.azure_client_id, obj.password.authentication.azure_client_certificate_path);else errors.throwErr(errors.ERR_AZURE_VAULT_AUTH_FAILED);\n          const vault_detail = await this._parsePwd(obj.password.value);\n          const client1 = new SecretClient(vault_detail[0], credential1);\n          configObject.password = (await client1.getSecret(vault_detail[1])).value;\n        } else {\n          errors.throwErr(errors.ERR_AZURE_VAULT_AUTH_FAILED);\n        }\n      } else if (obj.password.type == \"vault-oci\") {\n        const secrets = require('oci-secrets');\n        const secretClientOci = new secrets.SecretsClient({\n          authenticationDetailsProvider: credential\n        });\n        const getSecretBundleRequest = {\n          secretId: obj.password.value\n        };\n        const getSecretBundleResponse = await secretClientOci.getSecretBundle(getSecretBundleRequest);\n        configObject.password = getSecretBundleResponse.secretBundle.secretBundleContent.content;\n      } else if (obj.password) {\n        configObject.password = obj.password;\n      }\n    } else {\n      configObject.password = null;\n    }\n    return configObject;\n  }\n\n  //---------------------------------------------------------------------------\n  // retrieveRegion(objservername)\n  //\n  // returns region from the given objservername.\n  //---------------------------------------------------------------------------\n  retrieveRegion(objservername) {\n    const arr = objservername.split(\".\");\n    return arr[1].toUpperCase().replaceAll('-', '_');\n  }\n}\nmodule.exports = OCIProvider;","map":{"version":3,"names":["errors","require","base","fs","cloud_net_naming_pattern_oci","RegExp","oci","OCIProvider","constructor","provider_arg","urlExtendedPart","match","_addParam","groups","objservername","namespace","bucketname","filename","alias","init","common","objectstorage","_streamToString","stream","chunks","chunk","push","Buffer","from","concat","toString","_returnCredential","provider","auth","paramMap","get","toUpperCase","InstancePrincipalsAuthenticationDetailsProviderBuilder","build","ResourcePrincipalAuthenticationDetailsProvider","builder","throwErr","ERR_OCIOBJECT_CONFIG_PROVIDER_AUTH_FAILED","ConfigFileAuthenticationDetailsProvider","err","publicKey","readFileSync","encoding","region","retrieveRegion","SimpleAuthenticationDetailsProvider","undefined","Region","returnConfig","configObject","credential","client_oci","ObjectStorageClient","authenticationDetailsProvider","getObjectRequest","objectName","bucketName","namespaceName","credential1","getObjectResponse","getObject","resp","value","obj","JSON","parse","userAlias","pmSection","params","key","val","connectString","connect_descriptor","user","password","type","authentication","SecretClient","ClientSecretCredential","ClientCertificateCredential","azure_client_secret","azure_tenant_id","azure_client_id","azure_client_certificate_path","ERR_AZURE_VAULT_AUTH_FAILED","vault_detail","_parsePwd","client1","getSecret","secrets","secretClientOci","SecretsClient","getSecretBundleRequest","secretId","getSecretBundleResponse","getSecretBundle","secretBundle","secretBundleContent","content","arr","split","replaceAll","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/configProviders/ociobject.js"],"sourcesContent":["// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\nconst errors = require(\"../errors.js\");\nconst { base } = require(\"./base.js\");\nconst fs = require('fs');\n\nconst cloud_net_naming_pattern_oci = new RegExp(\"(?<objservername>[A-Za-z0-9._-]+)/n/\" + \"(?<namespace>[A-Za-z0-9._-]+)/b/\" + \"(?<bucketname>[A-Za-z0-9._-]+)/o/\" + \"(?<filename>[A-Za-z0-9._-]+)\" + \"(/c/(?<alias>.+))?$\");\n// object to store module references that will be populated by init()\nconst oci = {};\n\nclass OCIProvider extends base {\n  constructor(provider_arg, urlExtendedPart) {\n    super(urlExtendedPart);\n    const match = provider_arg.match(cloud_net_naming_pattern_oci);\n    if (match) {\n      this._addParam(\"objservername\", match.groups.objservername);\n      this._addParam(\"namespace\", match.groups.namespace);\n      this._addParam(\"bucketname\", match.groups.bucketname);\n      this._addParam(\"filename\", match.groups.filename);\n      if (match.groups.alias)\n        this._addParam(\"alias\", match.groups.alias);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Require/import modules from ociobject\n  //---------------------------------------------------------------------------\n  init() {\n    oci.common = require('oci-common');\n    oci.objectstorage = require('oci-objectstorage');\n  }\n\n  //---------------------------------------------------------------------------\n  // _streamToString()\n  //\n  // Converts data stored in a Readable stream to string\n  //---------------------------------------------------------------------------\n  async _streamToString(stream) {\n    const chunks = [];\n    for await (const chunk of stream) {\n      chunks.push(Buffer.from(chunk));\n    }\n    return Buffer.concat(chunks).toString(\"utf-8\");\n  }\n\n  //---------------------------------------------------------------------------\n  // _returnCredential()\n  //\n  // Returns credential to access OCI Object Store on the basis of\n  // authentication parameters given by the user.\n  //---------------------------------------------------------------------------\n  async _returnCredential() {\n    let provider = null;\n    let auth = null;\n    if (this.paramMap.get('authentication')) {\n      auth = this.paramMap.get('authentication').toUpperCase();\n    }\n    // authentication parameter given and its not OCI_DEFAULT\n    if (auth && !(auth == 'OCI_DEFAULT')) {\n      if (auth == 'OCI_INSTANCE_PRINCIPAL') {\n        provider = await new oci.common.InstancePrincipalsAuthenticationDetailsProviderBuilder().build();\n      } else if (auth == 'OCI_RESOURCE_PRINCIPAL') {\n        provider = await new oci.common.ResourcePrincipalAuthenticationDetailsProvider.builder();\n      } else\n        errors.throwErr(errors.ERR_OCIOBJECT_CONFIG_PROVIDER_AUTH_FAILED, auth);\n    } else {\n      // default authentication\n      try {\n        //authentication parameters exist in the configurationFile\n        provider = new oci.common.ConfigFileAuthenticationDetailsProvider(\n          this.paramMap.get(\"oci_profile_path\"), //default path ~/.oci/config\n          this.paramMap.get(\"oci_profile\")\n        );\n      } catch (err) {\n        //throw error for wrong profile or wrong path\n        if (!this.paramMap.get(\"oci_tenancy\") || !this.paramMap.get(\"oci_user\")) {\n          throw (err);\n        }\n        // authentication parameters are directly given in the connectString\n        const publicKey = fs.readFileSync(this.paramMap.get('oci_key_file'), { encoding: \"utf8\" });\n        const region = this.retrieveRegion(this.paramMap.get('objservername'));\n        provider = new oci.common.SimpleAuthenticationDetailsProvider(\n          this.paramMap.get(\"oci_tenancy\"),\n          this.paramMap.get(\"oci_user\"),\n          this.paramMap.get(\"oci_fingerprint\"),\n          publicKey,\n          undefined,\n          oci.common.Region[region]\n        );\n      }\n    }\n    return provider;\n  }\n\n  //---------------------------------------------------------------------------\n  // returnConfig()\n  //\n  // Returns config stored in the OCI Object Store and\n  // parses and gets password field stored in OCI/Azure Vault\n  //---------------------------------------------------------------------------\n  async returnConfig() {\n    const configObject = {};\n    const credential = await this._returnCredential();\n    // oci object store\n    const client_oci = new (oci.objectstorage).ObjectStorageClient({\n      authenticationDetailsProvider: credential\n    });\n    const getObjectRequest = {\n      objectName: this.paramMap.get('filename'),\n      bucketName: this.paramMap.get('bucketname'),\n      namespaceName: this.paramMap.get('namespace')\n    };\n    let credential1;\n    const getObjectResponse = await client_oci.getObject(getObjectRequest);\n    const resp = await this._streamToString(getObjectResponse.value);\n    // Entire object we get from OCI Object Storage\n    let obj = JSON.parse(resp);\n    const userAlias = this.paramMap.get('alias');\n    if (userAlias) {\n      obj = obj[userAlias];\n    }\n    const pmSection = 'node-oracledb';\n    const params = obj[pmSection];\n    for (const key in params) {\n      var val = params[key];\n      configObject[key] = val;\n    }\n    configObject.connectString = obj.connect_descriptor;\n    configObject.user = obj.user;\n    if (obj.password) {\n      if (obj.password.type == \"vault-azure\") {\n        if (obj.password.authentication) {\n          const { SecretClient } = require(\"@azure/keyvault-secrets\");\n          const {ClientSecretCredential, ClientCertificateCredential} = require(\"@azure/identity\");\n          if (obj.password.authentication.azure_client_secret)\n            credential1 = new ClientSecretCredential(obj.password.authentication.azure_tenant_id, obj.password.authentication.azure_client_id, obj.password.authentication.azure_client_secret);\n          else if (obj.password.authentication.azure_client_certificate_path)\n            credential1 = new ClientCertificateCredential(obj.password.authentication.azure_tenant_id, obj.password.authentication.azure_client_id, obj.password.authentication.azure_client_certificate_path);\n          else\n            errors.throwErr(errors.ERR_AZURE_VAULT_AUTH_FAILED);\n          const vault_detail = await this._parsePwd(obj.password.value);\n          const client1 = new SecretClient(vault_detail[0], credential1);\n          configObject.password = (await client1.getSecret(vault_detail[1])).value;\n        } else {\n          errors.throwErr(errors.ERR_AZURE_VAULT_AUTH_FAILED);\n        }\n      } else if (obj.password.type == \"vault-oci\") {\n        const secrets = require('oci-secrets');\n        const secretClientOci =  new secrets.SecretsClient({\n          authenticationDetailsProvider: credential\n        });\n        const getSecretBundleRequest = {\n          secretId: obj.password.value\n        };\n        const getSecretBundleResponse = await secretClientOci.getSecretBundle(getSecretBundleRequest);\n        configObject.password = getSecretBundleResponse.secretBundle.secretBundleContent.content;\n      } else if (obj.password) {\n        configObject.password = obj.password;\n      }\n    } else {\n      configObject.password = null;\n    }\n    return configObject;\n  }\n\n  //---------------------------------------------------------------------------\n  // retrieveRegion(objservername)\n  //\n  // returns region from the given objservername.\n  //---------------------------------------------------------------------------\n  retrieveRegion(objservername) {\n    const arr = objservername.split(\".\");\n    return arr[1].toUpperCase().replaceAll('-', '_');\n  }\n}\nmodule.exports = OCIProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}