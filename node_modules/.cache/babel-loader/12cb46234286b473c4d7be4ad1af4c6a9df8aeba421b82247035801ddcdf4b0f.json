{"ast":null,"code":"// Copyright (c) 2015, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst nodbUtil = require('./util.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst impl = require('./impl');\nconst process = require('process');\nconst util = require('util');\n\n// This version of node-oracledb works with Node.js 14.6 or later.\n// Note: the checked version is the minimum required for Node-API\n// compatibility.  When new Node.js versions are released, older Node.js\n// versions are dropped from the node-oracledb test plan.\n//\n// Keep this code in sync with package/install.js\nconst vs = process.version.substring(1).split(\".\").map(Number);\nerrors.assert(vs[0] > 14 || vs[0] === 14 && vs[1] >= 6, errors.ERR_NODE_TOO_OLD, nodbUtil.PACKAGE_JSON_VERSION, \"14.6\");\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst AqQueue = require('./aqQueue.js');\nconst future = require('./future.js');\nconst BaseDbObject = require('./dbObject.js');\nconst Connection = require('./connection.js');\nconst Lob = require('./lob.js');\nconst Pool = require('./pool.js');\nconst PoolStatistics = require('./poolStatistics.js');\nconst ResultSet = require('./resultset.js');\nconst settings = require('./settings.js');\nconst SodaDatabase = require('./sodaDatabase.js');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocCursor = require('./sodaDocCursor.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst SodaOperation = require('./sodaOperation.js');\nconst poolCache = {};\nconst tempUsedPoolAliases = {};\nconst defaultPoolAlias = 'default';\n\n// save arguments for call to initOracleClient()\nlet _initOracleClientArgs;\n\n// Load the Oracledb binary\nfunction _initCLib(options) {\n  /*global __non_webpack_require__*/ // quieten eslint\n  const requireBinary = typeof __non_webpack_require__ === 'function' ? __non_webpack_require__ : require; // See Issue 1156\n  const binaryLocations = ['../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE,\n  // pre-built binary\n  '../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE,\n  // binary built from source\n  '../build/Debug/' + nodbUtil.BUILD_FILE,\n  // debug binary\n  // Paths for Webpack.\n  // Note: to use node-oracledb Thick mode, you will need a Webpack copy plugin to\n  // copy 'node_modules/oracledb/build/' to the output directory,\n  // see https://github.com/oracle/node-oracledb/issues/1156\n  // If you want to use only node-oracledb Thin mode, a copy plugin is not needed.\n  './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE, './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE];\n  if (options.binaryDir !== undefined) {\n    binaryLocations.splice(0, 0, options.binaryDir + '/' + nodbUtil.BINARY_FILE, options.binaryDir + '/' + nodbUtil.BUILD_FILE);\n  }\n  let oracledbCLib;\n  for (let i = 0; i < binaryLocations.length; i++) {\n    try {\n      oracledbCLib = requireBinary(binaryLocations[i]);\n      break;\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND' || i == binaryLocations.length - 1) {\n        let nodeInfo;\n        if (err.code === 'MODULE_NOT_FOUND') {\n          // A binary was not found in any of the search directories.\n          // Note this message may not be accurate for Webpack users since Webpack changes __dirname\n          nodeInfo = `\\n  Looked for ${binaryLocations.map(x => require('path').resolve(__dirname, x)).join(', ')}\\n  ${nodbUtil.getInstallURL()}\\n`;\n        } else {\n          nodeInfo = `\\n  Node.js require('oracledb') error was:\\n  ${err.message}\\n  ${nodbUtil.getInstallHelp()}\\n`;\n        }\n        errors.throwErr(errors.ERR_CANNOT_LOAD_BINARY, nodeInfo);\n      }\n    }\n  }\n  return oracledbCLib;\n}\n\n// top-level functions\n\nfunction _initializeThinDriver() {\n  require('./thin');\n}\n\n//-----------------------------------------------------------------------------\n// _verifyOptions()\n//\n// Verify that the values passed by the user for connection and pool creation\n// options are acceptable. Performs any transformations that are necessary.\n//-----------------------------------------------------------------------------\nasync function _verifyOptions(options, inCreatePool) {\n  // define normalized options (value returned to caller)\n  const outOptions = {};\n  options = await _checkConfigProvider(options);\n  // only one of \"user\" and \"username\" may be specified (and must be strings)\n  if (options.user !== undefined) {\n    errors.assertParamPropValue(typeof options.user === 'string', 1, \"user\");\n    outOptions.user = options.user;\n  }\n  if (options.username !== undefined) {\n    errors.assert(outOptions.user === undefined, errors.ERR_DBL_USER);\n    errors.assertParamPropValue(typeof options.username === 'string', 1, \"username\");\n    outOptions.user = options.username;\n  }\n\n  // password must be a string\n  if (options.password !== undefined) {\n    errors.assertParamPropValue(typeof options.password === 'string', 1, \"password\");\n    outOptions.password = options.password;\n  }\n\n  // only one of \"connectString\" and \"connectionString\" may be specified (and\n  // must be strings)\n  if (options.connectString !== undefined) {\n    errors.assertParamPropValue(typeof options.connectString === 'string', 1, \"connectString\");\n    outOptions.connectString = options.connectString;\n  }\n  if (options.connectionString !== undefined) {\n    errors.assert(outOptions.connectString === undefined, errors.ERR_DBL_CONNECT_STRING);\n    errors.assertParamPropValue(typeof options.connectionString === 'string', 1, \"connectionString\");\n    outOptions.connectString = options.connectionString;\n  }\n\n  // wallet password must be string\n  if (options.walletPassword !== undefined) {\n    errors.assertParamPropValue(typeof options.walletPassword === 'string', 1, \"walletPassword\");\n    outOptions.walletPassword = options.walletPassword;\n  }\n\n  //wallet location must be a string\n  if (options.walletLocation !== undefined) {\n    errors.assertParamPropValue(typeof options.walletLocation === 'string', 1, \"walletLocation\");\n    outOptions.walletLocation = options.walletLocation;\n  }\n\n  //wallet content must be a string\n  if (options.walletContent !== undefined) {\n    errors.assertParamPropValue(typeof options.walletContent === 'string', 1, \"walletContent\");\n    outOptions.walletContent = options.walletContent;\n  }\n\n  // edition must be a string\n  if (options.edition !== undefined) {\n    errors.assertParamPropValue(typeof options.edition === 'string', 1, \"edition\");\n    outOptions.edition = options.edition;\n  }\n\n  // stmtCacheSize must be an integer (>= 0)\n  if (options.stmtCacheSize !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.stmtCacheSize) && options.stmtCacheSize >= 0, 1, \"stmtCacheSize\");\n    outOptions.stmtCacheSize = options.stmtCacheSize;\n  }\n\n  // externalAuth must be a boolean\n  outOptions.externalAuth = settings.externalAuth;\n  if (options.externalAuth !== undefined) {\n    errors.assertParamPropValue(typeof options.externalAuth === 'boolean', 1, \"externalAuth\");\n    outOptions.externalAuth = options.externalAuth;\n  }\n\n  // events must be a boolean\n  if (options.events !== undefined) {\n    errors.assertParamPropValue(typeof options.events === 'boolean', 1, \"events\");\n    outOptions.events = options.events;\n  }\n\n  // poolAlias must be a string\n  if (options.poolAlias !== undefined) {\n    errors.assertParamPropValue(typeof options.poolAlias === 'string' && options.poolAlias.length > 0, 1, \"poolAlias\");\n    outOptions.poolAlias = options.poolAlias;\n  }\n\n  // configDir must be a string\n  if (options.configDir !== undefined) {\n    errors.assertParamPropValue(typeof options.configDir === 'string', 1, \"configDir\");\n    outOptions.configDir = options.configDir;\n  }\n\n  // sslServerServerCertDN must be a string\n  if (options.sslServerCertDN !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerCertDN === 'string', 1, \"sslServerCertDN\");\n    outOptions.sslServerCertDN = options.sslServerCertDN;\n  }\n\n  // sslServerServerDNMatch must be a boolean\n  if (options.sslServerDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerDNMatch === 'boolean', 1, \"sslServerDNMatch\");\n    outOptions.sslServerDNMatch = options.sslServerDNMatch;\n  }\n\n  // sslAllowWeakDNMatch must be a boolean\n  if (options.sslAllowWeakDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslAllowWeakDNMatch === 'boolean', 1, \"sslAllowWeakDNMatch\");\n    outOptions.sslAllowWeakDNMatch = options.sslAllowWeakDNMatch;\n  }\n  // httpsProxy must be a string\n  if (options.httpsProxy !== undefined) {\n    errors.assertParamPropValue(typeof options.httpsProxy === 'string', 1, \"httpsProxy\");\n    outOptions.httpsProxy = options.httpsProxy;\n  }\n\n  // httpsProxyPort must be an integer (>= 0)\n  if (options.httpsProxyPort !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.httpsProxyPort) && options.httpsProxyPort >= 0, 1, \"httpsProxyPort\");\n    outOptions.httpsProxyPort = options.httpsProxyPort;\n  }\n\n  //retryCount must be an integer (>=0)\n  if (options.retryCount !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryCount) && options.retryCount >= 0, 1, \"retryCount\");\n    outOptions.retryCount = options.retryCount;\n  }\n\n  //retryDelay must be an integer (>=0)\n  if (options.retryDelay !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryDelay) && options.retryDelay >= 0, 1, \"retryDelay\");\n    outOptions.retryDelay = options.retryDelay;\n  }\n\n  // connectTimeout must be an integer (>= 0)\n  if (options.connectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.connectTimeout) && options.connectTimeout >= 0, 1, \"connectTimeout\");\n    outOptions.connectTimeout = options.connectTimeout;\n  }\n\n  // transportConnectTimeout must be an integer (>= 0)\n  if (options.transportConnectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.transportConnectTimeout) && options.transportConnectTimeout >= 0, 1, \"transportConnectTimeout\");\n    outOptions.transportConnectTimeout = options.transportConnectTimeout;\n  }\n\n  // expireTime must be an integer (>= 0)\n  if (options.expireTime !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.expireTime) && options.expireTime >= 0, 1, \"expireTime\");\n    outOptions.expireTime = options.expireTime;\n  }\n\n  // sdu must be an integer (> 0)\n  if (options.sdu !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.sdu) && options.sdu > 0, 1, \"sdu\");\n    outOptions.sdu = options.sdu;\n  }\n\n  // connectionIdPrefix must be a string\n  if (options.connectionIdPrefix !== undefined) {\n    errors.assertParamPropValue(typeof options.connectionIdPrefix === 'string', 1, \"connectionIdPrefix\");\n    outOptions.connectionIdPrefix = options.connectionIdPrefix;\n  }\n\n  // privilege must be one of a set of named constants\n  if (options.privilege !== undefined) {\n    errors.assertParamPropValue(nodbUtil.isPrivilege(options.privilege), 1, \"privilege\");\n    outOptions.privilege = options.privilege;\n  }\n\n  // check pool specific options\n  if (inCreatePool) {\n    // poolMax must be an integer > 0\n    if (options.poolMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMax) && options.poolMax > 0, 1, \"poolMax\");\n      outOptions.poolMax = options.poolMax;\n    }\n\n    // poolMaxPerShard must be an integer >= 0\n    if (options.poolMaxPerShard !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMaxPerShard) && options.poolMaxPerShard >= 0, 1, \"poolMaxPerShard\");\n      outOptions.poolMaxPerShard = options.poolMaxPerShard;\n    }\n\n    // poolMin must be an integer >= 0\n    if (options.poolMin !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMin) && options.poolMin >= 0, 1, \"poolMin\");\n      outOptions.poolMin = options.poolMin;\n    }\n\n    // poolIncrement must be an integer >= 0\n    if (options.poolIncrement !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolIncrement) && options.poolIncrement >= 0, 1, \"poolIncrement\");\n      outOptions.poolIncrement = options.poolIncrement;\n    }\n\n    // poolTimeout must be an integer >= 0\n    if (options.poolTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolTimeout) && options.poolTimeout >= 0, 1, \"poolTimeout\");\n      outOptions.poolTimeout = options.poolTimeout;\n    }\n\n    // poolPingInterval must be an integer\n    if (options.poolPingInterval !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingInterval) && options.poolPingInterval >= -2147483648 && options.poolPingInterval <= 2147483647, 1, \"poolPingInterval\");\n      outOptions.poolPingInterval = options.poolPingInterval;\n    }\n\n    // poolPingTimeout must be an integer (>= 0)\n    if (options.poolPingTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingTimeout) && options.poolPingTimeout >= 0, 1, \"poolPingTimeout\");\n      outOptions.poolPingTimeout = options.poolPingTimeout;\n    }\n\n    // homogeneous must be a boolean (and defaults to True)\n    outOptions.homogeneous = true;\n    if (options.homogeneous !== undefined) {\n      errors.assertParamPropValue(typeof options.homogeneous === 'boolean', 1, \"homogeneous\");\n      outOptions.homogeneous = options.homogeneous;\n    }\n\n    // queueTimeout must be an integer >= 0\n    if (options.queueTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueTimeout) && options.queueTimeout >= 0, 1, \"queueTimeout\");\n      outOptions.queueTimeout = options.queueTimeout;\n    }\n\n    // queueMax must be an integer\n    if (options.queueMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueMax), 1, \"queueMax\");\n      outOptions.queueMax = options.queueMax;\n    }\n\n    // sodaMetaDataCache must be a boolean (and defaults to True)\n    outOptions.sodaMetaDataCache = false;\n    if (options.sodaMetaDataCache !== undefined) {\n      errors.assertParamPropValue(typeof options.sodaMetaDataCache === 'boolean', 1, \"sodaMetaDataCache\");\n      outOptions.sodaMetaDataCache = options.sodaMetaDataCache;\n    }\n\n    // sessionCallback must be a function or a string\n    if (options.sessionCallback !== undefined) {\n      errors.assertParamPropValue(typeof options.sessionCallback === 'string' || typeof options.sessionCallback === 'function', 1, \"sessionCallback\");\n      outOptions.sessionCallback = options.sessionCallback;\n    }\n\n    // enableStatistics must be a boolean (_enableStats is DEPRECATED)\n    outOptions.enableStatistics = false;\n    if (options.enableStatistics !== undefined) {\n      errors.assertParamPropValue(typeof options.enableStatistics === 'boolean', 1, \"enableStatistics\");\n      outOptions.enableStatistics = options.enableStatistics;\n    }\n    if (!outOptions.enableStatistics && options._enableStats !== undefined) {\n      errors.assertParamPropValue(typeof options._enableStats === 'boolean', 1, \"_enableStats\");\n      outOptions.enableStatistics = options._enableStats;\n    }\n\n    // check connection creation specific options\n  } else {\n    // newPassword must be a string\n    if (options.newPassword !== undefined) {\n      errors.assertParamPropValue(typeof options.newPassword === 'string', 1, \"newPassword\");\n      outOptions.newPassword = options.newPassword;\n    }\n\n    // shardingKey must be an array of values\n    if (options.shardingKey !== undefined) {\n      const value = options.shardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1, \"shardingKey\");\n      outOptions.shardingKey = options.shardingKey;\n    }\n\n    // superShardingKey must be an array of values\n    if (options.superShardingKey !== undefined) {\n      const value = options.superShardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1, \"superShardingKey\");\n      outOptions.superShardingKey = options.superShardingKey;\n    }\n  }\n\n  // check access token\n  if (options.accessToken !== undefined) {\n    // cannot set username or password for token based authentication\n    errors.assert(outOptions.user === undefined && outOptions.password === undefined, errors.ERR_TOKEN_BASED_AUTH);\n\n    // homogenous (for pool) and externalAuth (both) must be set\n    if (inCreatePool) {\n      errors.assert(outOptions.homogeneous && outOptions.externalAuth, errors.ERR_POOL_TOKEN_BASED_AUTH);\n    } else {\n      errors.assert(outOptions.externalAuth, errors.ERR_CONN_TOKEN_BASED_AUTH);\n    }\n\n    // check the token is valid\n    let accessToken;\n    if (typeof options.accessToken === 'function') {\n      outOptions.accessTokenFn = options.accessToken;\n      outOptions.accessTokenConfig = options.accessTokenConfig;\n      accessToken = await options.accessToken(false, options.accessTokenConfig);\n      if (!nodbUtil.isTokenValid(accessToken)) {\n        accessToken = await options.accessToken(true, options.accessTokenConfig);\n      }\n    } else {\n      accessToken = options.accessToken;\n    }\n    errors.assert(nodbUtil.isTokenValid(accessToken), errors.ERR_TOKEN_HAS_EXPIRED);\n    if (accessToken.privateKey !== undefined) {\n      errors.assert(typeof accessToken.privateKey === 'string', errors.ERR_TOKEN_BASED_AUTH);\n      accessToken.privateKey = nodbUtil.denormalizePrivateKey(accessToken.privateKey);\n    }\n\n    // store token and privatekey\n    if (typeof accessToken === 'string') {\n      outOptions.token = accessToken;\n    } else {\n      outOptions.token = accessToken.token;\n      outOptions.privateKey = accessToken.privateKey;\n    }\n  }\n\n  // Check external Auth config.\n  // Allow Session User enclosed in [] for proxy authentication.\n  if (outOptions.token === undefined && outOptions.externalAuth) {\n    if (outOptions.password) {\n      errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n    }\n    if (outOptions.user) {\n      if (inCreatePool) {\n        errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n      } else if (outOptions.user[0] !== '[' || outOptions.user.slice(-1) !== ']') {\n        // username is not enclosed in [].\n        errors.throwErr(errors.ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY);\n      }\n    }\n  }\n  return outOptions;\n}\n\n//-----------------------------------------------------------------------------\n// createPool()\n//\n// Create a pool with the specified options and return it to the caller.\n//-----------------------------------------------------------------------------\nasync function createPool(options) {\n  let poolAlias;\n\n  // check arguments\n  errors.assertArgCount(arguments, 1, 1);\n  errors.assertParamValue(nodbUtil.isObject(options), 1);\n  options = await _verifyOptions(options, true);\n  const sessionCallback = options.sessionCallback;\n  if (typeof sessionCallback === 'function') delete options.sessionCallback;\n\n  // determine pool alias\n  if (options.poolAlias !== undefined) {\n    poolAlias = options.poolAlias;\n  } else if (options.poolAlias === undefined && !poolCache[defaultPoolAlias] && !tempUsedPoolAliases[defaultPoolAlias]) {\n    poolAlias = defaultPoolAlias;\n  }\n  if (poolCache[poolAlias] || tempUsedPoolAliases[poolAlias]) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_ALREADY_EXISTS, poolAlias);\n  }\n\n  // add defaults to options, if needed\n  settings.addToOptions(options, \"connectionClass\", \"edition\", \"events\", \"externalAuth\", \"stmtCacheSize\", \"poolMax\", \"poolMaxPerShard\", \"poolMin\", \"poolIncrement\", \"poolTimeout\", \"poolPingInterval\", \"poolPingTimeout\", \"queueMax\", \"queueTimeout\");\n\n  // poolMax must be greater than or equal to poolMin\n  if (options.poolMin > options.poolMax) {\n    errors.throwErr(errors.ERR_INVALID_NUMBER_OF_CONNECTIONS, options.poolMax, options.poolMin);\n  }\n\n  // initialize the Oracle client, if necessary\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n\n  // Need to prevent another call in the same stack from succeeding, otherwise\n  // two pools could be created with the same poolAlias and the second one that\n  // comes back would overwrite the first in the cache.\n  if (poolAlias) {\n    tempUsedPoolAliases[poolAlias] = true;\n  }\n\n  // create the pool, ensuring that the temporary pool alias cache is removed\n  // once this has completed (either successfully or unsuccessfully)\n  const pool = new Pool();\n  try {\n    await pool._impl.create(options);\n  } finally {\n    if (poolAlias) {\n      delete tempUsedPoolAliases[poolAlias];\n    }\n  }\n  if (poolAlias) {\n    poolCache[poolAlias] = pool;\n  }\n  pool._setup(options, poolAlias);\n  pool._sessionCallback = sessionCallback;\n  pool.on('_afterPoolClose', () => {\n    if (pool.poolAlias) {\n      delete poolCache[pool.poolAlias];\n    }\n  });\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n  return pool;\n}\n\n//-----------------------------------------------------------------------------\n// getConnection()\n//\n// Gets either a standalone connection, or a connection from a pool (stored in\n// the pool cache).\n//-----------------------------------------------------------------------------\nasync function getConnection(a1) {\n  let options = {};\n  let poolAlias;\n\n  // determine if the connection should be acquired from a pool\n  errors.assertArgCount(arguments, 0, 1);\n  if (arguments.length == 0) {\n    poolAlias = defaultPoolAlias;\n  } else if (typeof a1 === 'string') {\n    poolAlias = a1;\n  } else {\n    options = a1;\n    errors.assertParamValue(nodbUtil.isObject(options), 1);\n    poolAlias = options.poolAlias;\n  }\n  if (poolAlias) {\n    const pool = poolCache[poolAlias];\n    errors.assert(pool, errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n    return await pool.getConnection(options);\n  }\n\n  // create a standalone connection\n  options = await _verifyOptions(options, false);\n  settings.addToOptions(options, \"connectionClass\", \"edition\", \"events\", \"externalAuth\", \"stmtCacheSize\");\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n  const conn = new Connection();\n  conn._impl = new impl.ConnectionImpl();\n  await conn._impl.connect(options);\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n  return conn;\n}\n\n//-----------------------------------------------------------------------------\n// getPool()\n//\n// Returns a pool for the given alias.\n//-----------------------------------------------------------------------------\nfunction getPool(poolAlias) {\n  errors.assertArgCount(arguments, 0, 1);\n  if (poolAlias) {\n    errors.assertParamValue(typeof poolAlias === 'string' || typeof poolAlias === 'number', 1);\n  }\n  poolAlias = poolAlias || defaultPoolAlias;\n  const pool = poolCache[poolAlias];\n  if (!pool) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n  }\n  return pool;\n}\n\n//-----------------------------------------------------------------------------\n// initOracleClient()\n//\n// Initializes the Oracle Client.\n//-----------------------------------------------------------------------------\nfunction initOracleClient(arg1) {\n  let options = {};\n  errors.assertArgCount(arguments, 0, 1);\n  if (arg1 !== undefined) {\n    errors.assertParamValue(nodbUtil.isObject(arg1), 1);\n    options = {\n      ...arg1\n    };\n    errors.assertParamPropString(options, 1, \"libDir\");\n    errors.assertParamPropString(options, 1, \"configDir\");\n    errors.assertParamPropString(options, 1, \"errorUrl\");\n    errors.assertParamPropString(options, 1, \"driverName\");\n    errors.assertParamPropString(options, 1, \"binaryDir\");\n  }\n  if (settings.thinDriverInitialized) {\n    errors.throwErr(errors.ERR_THIN_CONNECTION_ALREADY_CREATED);\n  }\n  if (_initOracleClientArgs === undefined) {\n    const oracledbCLib = _initCLib(options);\n    if (options.driverName === undefined) options.driverName = constants.DEFAULT_DRIVER_NAME + \" thk\";\n    if (options.errorUrl === undefined) options.errorUrl = constants.DEFAULT_ERROR_URL;\n    try {\n      oracledbCLib.initOracleClient(options, impl, settings);\n    } catch (err) {\n      const newErr = errors.transformErr(err);\n      if (newErr.code === \"DPI-1047\") {\n        newErr.message += \"\\n\" + nodbUtil.getInstallHelp();\n      }\n      throw newErr;\n    }\n    _initOracleClientArgs = arg1 || {};\n  } else if (!util.isDeepStrictEqual(_initOracleClientArgs, options)) {\n    errors.throwErr(errors.ERR_INIT_ORACLE_CLIENT_ARGS);\n  }\n\n  // driver mode initialization\n  // _initOracleClientArgs is populated and thin connection not created\n  settings.thin = false;\n}\n\n//-----------------------------------------------------------------------------\n// shutdown()\n//\n// Shuts down the database.\n//-----------------------------------------------------------------------------\nasync function shutdown(a1, a2) {\n  let connAttr = {};\n  let shutdownMode = constants.SHUTDOWN_MODE_DEFAULT;\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'number', 2);\n    connAttr = a1;\n    shutdownMode = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for shutting down the database\n  // use SYSOPER privilege\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: constants.SYSOPER\n  };\n  const conn = await this.getConnection(dbConfig);\n  await conn.shutdown(shutdownMode);\n  if (shutdownMode != this.SHUTDOWN_MODE_ABORT) {\n    await conn.execute(\"ALTER DATABASE CLOSE\");\n    await conn.execute(\"ALTER DATABASE DISMOUNT\");\n    await conn.shutdown(this.SHUTDOWN_MODE_FINAL);\n  }\n  await conn.close();\n}\n\n//-----------------------------------------------------------------------------\n// _checkConfigProvider()\n//\n// Look for the config provider in the connection string and retreives\n// object stored in the config Provider.\n// Returns object based on precedence between input object and the one retrieved\n// from Config Provider.\n//-----------------------------------------------------------------------------\nasync function _checkConfigProvider(options) {\n  const url = options.connectString || options.connectionString;\n  if (!url) return options;\n  let parsedUrl = url;\n  let urlExtendedPart;\n  const baseRegex = new RegExp(\"^config-(?<provider>[A-Za-z0-9]+)(://)(?<provider_arg>[^?]+)\");\n  if (url.indexOf('?') != -1) {\n    parsedUrl = url.substring(0, url.indexOf('?'));\n    urlExtendedPart = url.substring(url.indexOf('?'), url.length); //extended part\n  }\n  const match = parsedUrl.match(baseRegex);\n  if (match) {\n    const provider = match.groups.provider;\n    const provider_arg = match.groups.provider_arg;\n    let configPckg;\n    try {\n      configPckg = require('./configProviders/' + provider);\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_NOT_SUPPORTED, provider);\n    }\n    const configProvider = new configPckg(provider_arg, urlExtendedPart);\n    try {\n      configProvider.init();\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_LOAD_FAILED, err.message);\n    }\n    let secondOpts;\n    try {\n      secondOpts = await configProvider.returnConfig();\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_FAILED_TO_RETRIEVE_CONFIG, err.message);\n    }\n    options = configProvider.modifyOptionsPrecedence(secondOpts, options);\n  }\n  return options;\n}\n\n//-----------------------------------------------------------------------------\n// startup()\n//\n// Starts up the database.\n//-----------------------------------------------------------------------------\nasync function startup(a1, a2) {\n  let connAttr = {};\n  let startupAttr = {};\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'object', 2);\n    connAttr = a1;\n    startupAttr = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for starting up the database\n  // use SYSOPER and SYSPRELIM privileges\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: this.SYSOPER | this.SYSPRELIM\n  };\n  let conn = await this.getConnection(dbConfig);\n  await conn.startup(startupAttr);\n  await conn.close();\n  dbConfig.privilege = this.SYSOPER;\n  conn = await this.getConnection(dbConfig);\n  await conn.execute(\"ALTER DATABASE MOUNT\");\n  await conn.execute(\"ALTER DATABASE OPEN\");\n  await conn.close();\n}\n\n// module exports\nmodule.exports = {\n  // classes\n  AqDeqOptions,\n  AqEnqOptions,\n  AqMessage,\n  AqQueue,\n  BaseDbObject,\n  Connection,\n  JsonId: types.JsonId,\n  Lob,\n  Pool,\n  PoolStatistics,\n  ResultSet,\n  SodaDatabase,\n  SodaCollection,\n  SodaDocCursor,\n  SodaDocument,\n  SodaOperation,\n  // top-level functions\n  getConnection: nodbUtil.callbackify(getConnection),\n  createPool: nodbUtil.callbackify(createPool),\n  getPool,\n  initOracleClient,\n  shutdown: nodbUtil.callbackify(shutdown),\n  startup: nodbUtil.callbackify(startup),\n  // CQN operation codes\n  CQN_OPCODE_ALL_OPS: constants.CQN_OPCODE_ALL_OPS,\n  CQN_OPCODE_ALL_ROWS: constants.CQN_OPCODE_ALL_ROWS,\n  CQN_OPCODE_ALTER: constants.CQN_OPCODE_ALTER,\n  CQN_OPCODE_DELETE: constants.CQN_OPCODE_DELETE,\n  CQN_OPCODE_DROP: constants.CQN_OPCODE_DROP,\n  CQN_OPCODE_INSERT: constants.CQN_OPCODE_INSERT,\n  CQN_OPCODE_UPDATE: constants.CQN_OPCODE_UPDATE,\n  // database types\n  DB_TYPE_BFILE: types.DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE: types.DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT: types.DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER: types.DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB: types.DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN: types.DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR: types.DB_TYPE_CHAR,\n  DB_TYPE_CLOB: types.DB_TYPE_CLOB,\n  DB_TYPE_CURSOR: types.DB_TYPE_CURSOR,\n  DB_TYPE_DATE: types.DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS: types.DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM: types.DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON: types.DB_TYPE_JSON,\n  DB_TYPE_LONG: types.DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR: types.DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW: types.DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR: types.DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB: types.DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER: types.DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR: types.DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT: types.DB_TYPE_OBJECT,\n  DB_TYPE_RAW: types.DB_TYPE_RAW,\n  DB_TYPE_ROWID: types.DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP: types.DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ: types.DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ: types.DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_VARCHAR: types.DB_TYPE_VARCHAR,\n  DB_TYPE_XMLTYPE: types.DB_TYPE_XMLTYPE,\n  DB_TYPE_VECTOR: types.DB_TYPE_VECTOR,\n  // fetchInfo type defaulting\n  DEFAULT: constants.DEFAULT,\n  // statement types\n  STMT_TYPE_UNKNOWN: constants.STMT_TYPE_UNKNOWN,\n  STMT_TYPE_SELECT: constants.STMT_TYPE_SELECT,\n  STMT_TYPE_UPDATE: constants.STMT_TYPE_UPDATE,\n  STMT_TYPE_DELETE: constants.STMT_TYPE_DELETE,\n  STMT_TYPE_INSERT: constants.STMT_TYPE_INSERT,\n  STMT_TYPE_CREATE: constants.STMT_TYPE_CREATE,\n  STMT_TYPE_DROP: constants.STMT_TYPE_DROP,\n  STMT_TYPE_ALTER: constants.STMT_TYPE_ALTER,\n  STMT_TYPE_BEGIN: constants.STMT_TYPE_BEGIN,\n  STMT_TYPE_DECLARE: constants.STMT_TYPE_DECLARE,\n  STMT_TYPE_CALL: constants.STMT_TYPE_CALL,\n  STMT_TYPE_EXPLAIN_PLAN: constants.STMT_TYPE_EXPLAIN_PLAN,\n  STMT_TYPE_MERGE: constants.STMT_TYPE_MERGE,\n  STMT_TYPE_ROLLBACK: constants.STMT_TYPE_ROLLBACK,\n  STMT_TYPE_COMMIT: constants.STMT_TYPE_COMMIT,\n  // shutdown modes\n  SHUTDOWN_MODE_DEFAULT: constants.SHUTDOWN_MODE_DEFAULT,\n  SHUTDOWN_MODE_TRANSACTIONAL: constants.SHUTDOWN_MODE_TRANSACTIONAL,\n  SHUTDOWN_MODE_TRANSACTIONAL_LOCAL: constants.SHUTDOWN_MODE_TRANSACTIONAL_LOCAL,\n  SHUTDOWN_MODE_IMMEDIATE: constants.SHUTDOWN_MODE_IMMEDIATE,\n  SHUTDOWN_MODE_ABORT: constants.SHUTDOWN_MODE_ABORT,\n  SHUTDOWN_MODE_FINAL: constants.SHUTDOWN_MODE_FINAL,\n  // startup modes\n  STARTUP_MODE_DEFAULT: constants.STARTUP_MODE_DEFAULT,\n  STARTUP_MODE_FORCE: constants.STARTUP_MODE_FORCE,\n  STARTUP_MODE_RESTRICT: constants.STARTUP_MODE_RESTRICT,\n  // subscription event types\n  SUBSCR_EVENT_TYPE_SHUTDOWN: constants.SUBSCR_EVENT_TYPE_SHUTDOWN,\n  SUBSCR_EVENT_TYPE_SHUTDOWN_ANY: constants.SUBSCR_EVENT_TYPE_SHUTDOWN_ANY,\n  SUBSCR_EVENT_TYPE_STARTUP: constants.SUBSCR_EVENT_TYPE_STARTUP,\n  SUBSCR_EVENT_TYPE_DEREG: constants.SUBSCR_EVENT_TYPE_DEREG,\n  SUBSCR_EVENT_TYPE_OBJ_CHANGE: constants.SUBSCR_EVENT_TYPE_OBJ_CHANGE,\n  SUBSCR_EVENT_TYPE_QUERY_CHANGE: constants.SUBSCR_EVENT_TYPE_QUERY_CHANGE,\n  SUBSCR_EVENT_TYPE_AQ: constants.SUBSCR_EVENT_TYPE_AQ,\n  // subscription grouping classes\n  SUBSCR_GROUPING_CLASS_TIME: constants.SUBSCR_GROUPING_CLASS_TIME,\n  // subscription grouping types\n  SUBSCR_GROUPING_TYPE_SUMMARY: constants.SUBSCR_GROUPING_TYPE_SUMMARY,\n  SUBSCR_GROUPING_TYPE_LAST: constants.SUBSCR_GROUPING_TYPE_LAST,\n  // subscription namespaces\n  SUBSCR_NAMESPACE_AQ: constants.SUBSCR_NAMESPACE_AQ,\n  SUBSCR_NAMESPACE_DBCHANGE: constants.SUBSCR_NAMESPACE_DBCHANGE,\n  // subscription quality of service flags\n  SUBSCR_QOS_BEST_EFFORT: constants.SUBSCR_QOS_BEST_EFFORT,\n  SUBSCR_QOS_DEREG_NFY: constants.SUBSCR_QOS_DEREG_NFY,\n  SUBSCR_QOS_QUERY: constants.SUBSCR_QOS_QUERY,\n  SUBSCR_QOS_RELIABLE: constants.SUBSCR_QOS_RELIABLE,\n  SUBSCR_QOS_ROWIDS: constants.SUBSCR_QOS_ROWIDS,\n  // privileges\n  SYSASM: constants.SYSASM,\n  SYSBACKUP: constants.SYSBACKUP,\n  SYSDBA: constants.SYSDBA,\n  SYSDG: constants.SYSDG,\n  SYSKM: constants.SYSKM,\n  SYSOPER: constants.SYSOPER,\n  SYSPRELIM: constants.SYSPRELIM,\n  SYSRAC: constants.SYSRAC,\n  // bind directions\n  BIND_IN: constants.BIND_IN,\n  BIND_INOUT: constants.BIND_INOUT,\n  BIND_OUT: constants.BIND_OUT,\n  // outFormat values\n  OUT_FORMAT_ARRAY: constants.OUT_FORMAT_ARRAY,\n  OUT_FORMAT_OBJECT: constants.OUT_FORMAT_OBJECT,\n  // SODA collection creation modes\n  SODA_COLL_MAP_MODE: constants.SODA_COLL_MAP_MODE,\n  // pool statuses\n  POOL_STATUS_OPEN: constants.POOL_STATUS_OPEN,\n  POOL_STATUS_DRAINING: constants.POOL_STATUS_DRAINING,\n  POOL_STATUS_CLOSED: constants.POOL_STATUS_CLOSED,\n  POOL_STATUS_RECONFIGURING: constants.POOL_STATUS_RECONFIGURING,\n  // AQ dequeue wait options\n  AQ_DEQ_NO_WAIT: constants.AQ_DEQ_NO_WAIT,\n  AQ_DEQ_WAIT_FOREVER: constants.AQ_DEQ_WAIT_FOREVER,\n  // AQ dequeue modes\n  AQ_DEQ_MODE_BROWSE: constants.AQ_DEQ_MODE_BROWSE,\n  AQ_DEQ_MODE_LOCKED: constants.AQ_DEQ_MODE_LOCKED,\n  AQ_DEQ_MODE_REMOVE: constants.AQ_DEQ_MODE_REMOVE,\n  AQ_DEQ_MODE_REMOVE_NO_DATA: constants.AQ_DEQ_MODE_REMOVE_NO_DATA,\n  // AQ dequeue navigation flags\n  AQ_DEQ_NAV_FIRST_MSG: constants.AQ_DEQ_NAV_FIRST_MSG,\n  AQ_DEQ_NAV_NEXT_TRANSACTION: constants.AQ_DEQ_NAV_NEXT_TRANSACTION,\n  AQ_DEQ_NAV_NEXT_MSG: constants.AQ_DEQ_NAV_NEXT_MSG,\n  // AQ message delivery modes\n  AQ_MSG_DELIV_MODE_PERSISTENT: constants.AQ_MSG_DELIV_MODE_PERSISTENT,\n  AQ_MSG_DELIV_MODE_BUFFERED: constants.AQ_MSG_DELIV_MODE_BUFFERED,\n  AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED: constants.AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED,\n  // AQ message states\n  AQ_MSG_STATE_READY: constants.AQ_MSG_STATE_READY,\n  AQ_MSG_STATE_WAITING: constants.AQ_MSG_STATE_WAITING,\n  AQ_MSG_STATE_PROCESSED: constants.AQ_MSG_STATE_PROCESSED,\n  AQ_MSG_STATE_EXPIRED: constants.AQ_MSG_STATE_EXPIRED,\n  // AQ visibility flags\n  AQ_VISIBILITY_IMMEDIATE: constants.AQ_VISIBILITY_IMMEDIATE,\n  AQ_VISIBILITY_ON_COMMIT: constants.AQ_VISIBILITY_ON_COMMIT,\n  // TPC/XA begin flags Constants\n  TPC_BEGIN_JOIN: constants.TPC_BEGIN_JOIN,\n  TPC_BEGIN_NEW: constants.TPC_BEGIN_NEW,\n  TPC_BEGIN_PROMOTE: constants.TPC_BEGIN_PROMOTE,\n  TPC_BEGIN_RESUME: constants.TPC_BEGIN_RESUME,\n  // TPC/XA two-phase commit flags\n  TPC_END_NORMAL: constants.TPC_END_NORMAL,\n  TPC_END_SUSPEND: constants.TPC_END_SUSPEND,\n  // vector types\n  VECTOR_FORMAT_FLOAT32: constants.VECTOR_FORMAT_FLOAT32,\n  VECTOR_FORMAT_FLOAT64: constants.VECTOR_FORMAT_FLOAT64,\n  VECTOR_FORMAT_INT8: constants.VECTOR_FORMAT_INT8,\n  VECTOR_FORMAT_BINARY: constants.VECTOR_FORMAT_BINARY,\n  // database type aliases\n  BLOB: types.DB_TYPE_BLOB,\n  BUFFER: types.DB_TYPE_RAW,\n  CLOB: types.DB_TYPE_CLOB,\n  CURSOR: types.DB_TYPE_CURSOR,\n  DATE: types.DB_TYPE_TIMESTAMP,\n  NCLOB: types.DB_TYPE_NCLOB,\n  NUMBER: types.DB_TYPE_NUMBER,\n  STRING: types.DB_TYPE_VARCHAR,\n  // outFormat aliases\n  ARRAY: constants.OUT_FORMAT_ARRAY,\n  OBJECT: constants.OUT_FORMAT_OBJECT,\n  // Instances\n  future,\n  // property getters\n  get autoCommit() {\n    return settings.autoCommit;\n  },\n  get connectionClass() {\n    return settings.connectionClass;\n  },\n  get dbObjectAsPojo() {\n    return settings.dbObjectAsPojo;\n  },\n  get edition() {\n    return settings.edition;\n  },\n  get errorOnConcurrentExecute() {\n    return settings.errorOnConcurrentExecute;\n  },\n  get events() {\n    return settings.events;\n  },\n  get externalAuth() {\n    return settings.externalAuth;\n  },\n  get fetchArraySize() {\n    return settings.fetchArraySize;\n  },\n  get fetchAsBuffer() {\n    return settings.fetchAsBuffer;\n  },\n  get fetchAsString() {\n    return settings.fetchAsString;\n  },\n  get fetchTypeHandler() {\n    return settings.fetchTypeHandler;\n  },\n  get lobPrefetchSize() {\n    return settings.lobPrefetchSize;\n  },\n  get maxRows() {\n    return settings.maxRows;\n  },\n  get oracleClientVersion() {\n    return settings.oracleClientVersion;\n  },\n  get oracleClientVersionString() {\n    return settings.oracleClientVersionString;\n  },\n  get outFormat() {\n    return settings.outFormat;\n  },\n  get poolIncrement() {\n    return settings.poolIncrement;\n  },\n  get poolMax() {\n    return settings.poolMax;\n  },\n  get poolMaxPerShard() {\n    return settings.poolMaxPerShard;\n  },\n  get poolMin() {\n    return settings.poolMin;\n  },\n  get poolPingInterval() {\n    return settings.poolPingInterval;\n  },\n  get poolPingTimeout() {\n    return settings.poolPingTimeout;\n  },\n  get poolTimeout() {\n    return settings.poolTimeout;\n  },\n  get prefetchRows() {\n    return settings.prefetchRows;\n  },\n  get stmtCacheSize() {\n    return settings.stmtCacheSize;\n  },\n  get thin() {\n    return settings.thin;\n  },\n  get version() {\n    return constants.VERSION_MAJOR * 10000 + constants.VERSION_MINOR * 100 + constants.VERSION_PATCH;\n  },\n  get versionString() {\n    return constants.VERSION_STRING;\n  },\n  get versionSuffix() {\n    return constants.VERSION_SUFFIX;\n  },\n  // property setters\n  set autoCommit(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"autoCommit\");\n    settings.autoCommit = value;\n  },\n  set connectionClass(value) {\n    errors.assertPropValue(typeof value === 'string', \"connectionClass\");\n    settings.connectionClass = value;\n  },\n  set dbObjectAsPojo(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"dbObjectAsPojo\");\n    settings.dbObjectAsPojo = value;\n  },\n  set edition(value) {\n    errors.assertPropValue(typeof value === 'string', \"edition\");\n    settings.edition = value;\n  },\n  set errorOnConcurrentExecute(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"errorOnConcurrentExecute\");\n    settings.errorOnConcurrentExecute = value;\n  },\n  set events(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"events\");\n    settings.events = value;\n  },\n  set externalAuth(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"externalAuth\");\n    settings.externalAuth = value;\n  },\n  set fetchArraySize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value > 0, \"fetchArraySize\");\n    settings.fetchArraySize = value;\n  },\n  set fetchAsBuffer(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsBuffer\");\n    settings.createFetchTypeMap(settings.fetchAsString, value);\n    settings.fetchAsBuffer = value;\n  },\n  set fetchAsString(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsString\");\n    settings.createFetchTypeMap(value, settings.fetchAsBuffer);\n    settings.fetchAsString = value;\n  },\n  set fetchTypeHandler(value) {\n    if (value !== undefined) {\n      errors.assertPropValue(typeof value === 'function', \"fetchTypeHandler\");\n    }\n    settings.fetchTypeHandler = value;\n  },\n  set lobPrefetchSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"lobPrefetchSize\");\n    settings.lobPrefetchSize = value;\n  },\n  set maxRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"maxRows\");\n    settings.maxRows = value;\n  },\n  set outFormat(value) {\n    if (value !== constants.OUT_FORMAT_ARRAY && value !== constants.OUT_FORMAT_OBJECT) {\n      errors.throwErr(errors.ERR_INVALID_PROPERTY_VALUE, \"outFormat\");\n    }\n    settings.outFormat = value;\n  },\n  set poolIncrement(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolIncrement\");\n    settings.poolIncrement = value;\n  },\n  set poolMax(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMax\");\n    settings.poolMax = value;\n  },\n  set poolMaxPerShard(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMaxPerShard\");\n    settings.poolMaxPerShard = value;\n  },\n  set poolMin(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMin\");\n    settings.poolMin = value;\n  },\n  set poolPingInterval(value) {\n    errors.assertPropValue(Number.isInteger(value) && value < 2 ** 31 && value >= (-2) ** 31, \"poolPingInterval\");\n    settings.poolPingInterval = value;\n  },\n  set poolPingTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolPingTimeout\");\n    settings.poolPingTimeout = value;\n  },\n  set poolTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolTimeout\");\n    settings.poolTimeout = value;\n  },\n  set prefetchRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"prefetchRows\");\n    settings.prefetchRows = value;\n  },\n  set stmtCacheSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"stmtCacheSize\");\n    settings.stmtCacheSize = value;\n  }\n};","map":{"version":3,"names":["constants","require","nodbUtil","errors","types","impl","process","util","vs","version","substring","split","map","Number","assert","ERR_NODE_TOO_OLD","PACKAGE_JSON_VERSION","AqDeqOptions","AqEnqOptions","AqMessage","AqQueue","future","BaseDbObject","Connection","Lob","Pool","PoolStatistics","ResultSet","settings","SodaDatabase","SodaCollection","SodaDocCursor","SodaDocument","SodaOperation","poolCache","tempUsedPoolAliases","defaultPoolAlias","_initOracleClientArgs","_initCLib","options","requireBinary","__non_webpack_require__","binaryLocations","RELEASE_DIR","BINARY_FILE","BUILD_FILE","binaryDir","undefined","splice","oracledbCLib","i","length","err","code","nodeInfo","x","resolve","__dirname","join","getInstallURL","message","getInstallHelp","throwErr","ERR_CANNOT_LOAD_BINARY","_initializeThinDriver","_verifyOptions","inCreatePool","outOptions","_checkConfigProvider","user","assertParamPropValue","username","ERR_DBL_USER","password","connectString","connectionString","ERR_DBL_CONNECT_STRING","walletPassword","walletLocation","walletContent","edition","stmtCacheSize","isInteger","externalAuth","events","poolAlias","configDir","sslServerCertDN","sslServerDNMatch","sslAllowWeakDNMatch","httpsProxy","httpsProxyPort","retryCount","retryDelay","connectTimeout","transportConnectTimeout","expireTime","sdu","connectionIdPrefix","privilege","isPrivilege","poolMax","poolMaxPerShard","poolMin","poolIncrement","poolTimeout","poolPingInterval","poolPingTimeout","homogeneous","queueTimeout","queueMax","sodaMetaDataCache","sessionCallback","enableStatistics","_enableStats","newPassword","shardingKey","value","isShardingKey","superShardingKey","accessToken","ERR_TOKEN_BASED_AUTH","ERR_POOL_TOKEN_BASED_AUTH","ERR_CONN_TOKEN_BASED_AUTH","accessTokenFn","accessTokenConfig","isTokenValid","ERR_TOKEN_HAS_EXPIRED","privateKey","denormalizePrivateKey","token","ERR_WRONG_CRED_FOR_EXTAUTH","slice","ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY","createPool","assertArgCount","arguments","assertParamValue","isObject","ERR_POOL_WITH_ALIAS_ALREADY_EXISTS","addToOptions","ERR_INVALID_NUMBER_OF_CONNECTIONS","thinDriverInitialized","pool","_impl","create","_setup","_sessionCallback","on","getConnection","a1","ERR_POOL_WITH_ALIAS_NOT_FOUND","conn","ConnectionImpl","connect","getPool","initOracleClient","arg1","assertParamPropString","ERR_THIN_CONNECTION_ALREADY_CREATED","driverName","DEFAULT_DRIVER_NAME","errorUrl","DEFAULT_ERROR_URL","newErr","transformErr","isDeepStrictEqual","ERR_INIT_ORACLE_CLIENT_ARGS","thin","shutdown","a2","connAttr","shutdownMode","SHUTDOWN_MODE_DEFAULT","dbConfig","SYSOPER","SHUTDOWN_MODE_ABORT","execute","SHUTDOWN_MODE_FINAL","close","url","parsedUrl","urlExtendedPart","baseRegex","RegExp","indexOf","match","provider","groups","provider_arg","configPckg","ERR_CONFIG_PROVIDER_NOT_SUPPORTED","configProvider","init","ERR_CONFIG_PROVIDER_LOAD_FAILED","secondOpts","returnConfig","ERR_CONFIG_PROVIDER_FAILED_TO_RETRIEVE_CONFIG","modifyOptionsPrecedence","startup","startupAttr","SYSPRELIM","module","exports","JsonId","callbackify","CQN_OPCODE_ALL_OPS","CQN_OPCODE_ALL_ROWS","CQN_OPCODE_ALTER","CQN_OPCODE_DELETE","CQN_OPCODE_DROP","CQN_OPCODE_INSERT","CQN_OPCODE_UPDATE","DB_TYPE_BFILE","DB_TYPE_BINARY_DOUBLE","DB_TYPE_BINARY_FLOAT","DB_TYPE_BINARY_INTEGER","DB_TYPE_BLOB","DB_TYPE_BOOLEAN","DB_TYPE_CHAR","DB_TYPE_CLOB","DB_TYPE_CURSOR","DB_TYPE_DATE","DB_TYPE_INTERVAL_DS","DB_TYPE_INTERVAL_YM","DB_TYPE_JSON","DB_TYPE_LONG","DB_TYPE_LONG_NVARCHAR","DB_TYPE_LONG_RAW","DB_TYPE_NCHAR","DB_TYPE_NCLOB","DB_TYPE_NUMBER","DB_TYPE_NVARCHAR","DB_TYPE_OBJECT","DB_TYPE_RAW","DB_TYPE_ROWID","DB_TYPE_TIMESTAMP","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_VARCHAR","DB_TYPE_XMLTYPE","DB_TYPE_VECTOR","DEFAULT","STMT_TYPE_UNKNOWN","STMT_TYPE_SELECT","STMT_TYPE_UPDATE","STMT_TYPE_DELETE","STMT_TYPE_INSERT","STMT_TYPE_CREATE","STMT_TYPE_DROP","STMT_TYPE_ALTER","STMT_TYPE_BEGIN","STMT_TYPE_DECLARE","STMT_TYPE_CALL","STMT_TYPE_EXPLAIN_PLAN","STMT_TYPE_MERGE","STMT_TYPE_ROLLBACK","STMT_TYPE_COMMIT","SHUTDOWN_MODE_TRANSACTIONAL","SHUTDOWN_MODE_TRANSACTIONAL_LOCAL","SHUTDOWN_MODE_IMMEDIATE","STARTUP_MODE_DEFAULT","STARTUP_MODE_FORCE","STARTUP_MODE_RESTRICT","SUBSCR_EVENT_TYPE_SHUTDOWN","SUBSCR_EVENT_TYPE_SHUTDOWN_ANY","SUBSCR_EVENT_TYPE_STARTUP","SUBSCR_EVENT_TYPE_DEREG","SUBSCR_EVENT_TYPE_OBJ_CHANGE","SUBSCR_EVENT_TYPE_QUERY_CHANGE","SUBSCR_EVENT_TYPE_AQ","SUBSCR_GROUPING_CLASS_TIME","SUBSCR_GROUPING_TYPE_SUMMARY","SUBSCR_GROUPING_TYPE_LAST","SUBSCR_NAMESPACE_AQ","SUBSCR_NAMESPACE_DBCHANGE","SUBSCR_QOS_BEST_EFFORT","SUBSCR_QOS_DEREG_NFY","SUBSCR_QOS_QUERY","SUBSCR_QOS_RELIABLE","SUBSCR_QOS_ROWIDS","SYSASM","SYSBACKUP","SYSDBA","SYSDG","SYSKM","SYSRAC","BIND_IN","BIND_INOUT","BIND_OUT","OUT_FORMAT_ARRAY","OUT_FORMAT_OBJECT","SODA_COLL_MAP_MODE","POOL_STATUS_OPEN","POOL_STATUS_DRAINING","POOL_STATUS_CLOSED","POOL_STATUS_RECONFIGURING","AQ_DEQ_NO_WAIT","AQ_DEQ_WAIT_FOREVER","AQ_DEQ_MODE_BROWSE","AQ_DEQ_MODE_LOCKED","AQ_DEQ_MODE_REMOVE","AQ_DEQ_MODE_REMOVE_NO_DATA","AQ_DEQ_NAV_FIRST_MSG","AQ_DEQ_NAV_NEXT_TRANSACTION","AQ_DEQ_NAV_NEXT_MSG","AQ_MSG_DELIV_MODE_PERSISTENT","AQ_MSG_DELIV_MODE_BUFFERED","AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED","AQ_MSG_STATE_READY","AQ_MSG_STATE_WAITING","AQ_MSG_STATE_PROCESSED","AQ_MSG_STATE_EXPIRED","AQ_VISIBILITY_IMMEDIATE","AQ_VISIBILITY_ON_COMMIT","TPC_BEGIN_JOIN","TPC_BEGIN_NEW","TPC_BEGIN_PROMOTE","TPC_BEGIN_RESUME","TPC_END_NORMAL","TPC_END_SUSPEND","VECTOR_FORMAT_FLOAT32","VECTOR_FORMAT_FLOAT64","VECTOR_FORMAT_INT8","VECTOR_FORMAT_BINARY","BLOB","BUFFER","CLOB","CURSOR","DATE","NCLOB","NUMBER","STRING","ARRAY","OBJECT","autoCommit","connectionClass","dbObjectAsPojo","errorOnConcurrentExecute","fetchArraySize","fetchAsBuffer","fetchAsString","fetchTypeHandler","lobPrefetchSize","maxRows","oracleClientVersion","oracleClientVersionString","outFormat","prefetchRows","VERSION_MAJOR","VERSION_MINOR","VERSION_PATCH","versionString","VERSION_STRING","versionSuffix","VERSION_SUFFIX","assertPropValue","Array","isArray","createFetchTypeMap","ERR_INVALID_PROPERTY_VALUE"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/oracledb.js"],"sourcesContent":["// Copyright (c) 2015, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst nodbUtil = require('./util.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst impl = require('./impl');\nconst process = require('process');\nconst util = require('util');\n\n// This version of node-oracledb works with Node.js 14.6 or later.\n// Note: the checked version is the minimum required for Node-API\n// compatibility.  When new Node.js versions are released, older Node.js\n// versions are dropped from the node-oracledb test plan.\n//\n// Keep this code in sync with package/install.js\nconst vs = process.version.substring(1).split(\".\").map(Number);\nerrors.assert(vs[0] > 14 || (vs[0] === 14 && vs[1] >= 6),\n  errors.ERR_NODE_TOO_OLD, nodbUtil.PACKAGE_JSON_VERSION, \"14.6\");\n\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst AqQueue = require('./aqQueue.js');\nconst future = require('./future.js');\nconst BaseDbObject = require('./dbObject.js');\nconst Connection = require('./connection.js');\nconst Lob = require('./lob.js');\nconst Pool = require('./pool.js');\nconst PoolStatistics = require('./poolStatistics.js');\nconst ResultSet = require('./resultset.js');\nconst settings = require('./settings.js');\nconst SodaDatabase = require('./sodaDatabase.js');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocCursor = require('./sodaDocCursor.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst SodaOperation = require('./sodaOperation.js');\n\nconst poolCache = {};\nconst tempUsedPoolAliases = {};\nconst defaultPoolAlias = 'default';\n\n// save arguments for call to initOracleClient()\nlet _initOracleClientArgs;\n\n// Load the Oracledb binary\nfunction _initCLib(options) {\n  /*global __non_webpack_require__*/  // quieten eslint\n  const requireBinary = (typeof __non_webpack_require__ === 'function') ? __non_webpack_require__ : require; // See Issue 1156\n  const binaryLocations = [\n    '../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE,  // pre-built binary\n    '../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE,   // binary built from source\n    '../build/Debug/' + nodbUtil.BUILD_FILE,                    // debug binary\n    // Paths for Webpack.\n    // Note: to use node-oracledb Thick mode, you will need a Webpack copy plugin to\n    // copy 'node_modules/oracledb/build/' to the output directory,\n    // see https://github.com/oracle/node-oracledb/issues/1156\n    // If you want to use only node-oracledb Thin mode, a copy plugin is not needed.\n    './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE,\n    './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE\n  ];\n\n  if (options.binaryDir !== undefined) {\n    binaryLocations.splice(0, 0, options.binaryDir + '/' + nodbUtil.BINARY_FILE,\n      options.binaryDir + '/' + nodbUtil.BUILD_FILE);\n  }\n  let oracledbCLib;\n  for (let i = 0; i < binaryLocations.length; i++) {\n    try {\n      oracledbCLib = requireBinary(binaryLocations[i]);\n      break;\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND' || i == binaryLocations.length - 1) {\n        let nodeInfo;\n        if (err.code === 'MODULE_NOT_FOUND') {\n          // A binary was not found in any of the search directories.\n          // Note this message may not be accurate for Webpack users since Webpack changes __dirname\n          nodeInfo = `\\n  Looked for ${binaryLocations.map(x => require('path').resolve(__dirname, x)).join(', ')}\\n  ${nodbUtil.getInstallURL()}\\n`;\n        } else {\n          nodeInfo = `\\n  Node.js require('oracledb') error was:\\n  ${err.message}\\n  ${nodbUtil.getInstallHelp()}\\n`;\n        }\n        errors.throwErr(errors.ERR_CANNOT_LOAD_BINARY, nodeInfo);\n      }\n    }\n  }\n  return oracledbCLib;\n}\n\n// top-level functions\n\nfunction _initializeThinDriver() {\n  require('./thin');\n}\n\n//-----------------------------------------------------------------------------\n// _verifyOptions()\n//\n// Verify that the values passed by the user for connection and pool creation\n// options are acceptable. Performs any transformations that are necessary.\n//-----------------------------------------------------------------------------\nasync function _verifyOptions(options, inCreatePool) {\n\n  // define normalized options (value returned to caller)\n  const outOptions = {};\n\n  options = await _checkConfigProvider(options);\n  // only one of \"user\" and \"username\" may be specified (and must be strings)\n  if (options.user !== undefined) {\n    errors.assertParamPropValue(typeof options.user === 'string', 1, \"user\");\n    outOptions.user = options.user;\n  }\n  if (options.username !== undefined) {\n    errors.assert(outOptions.user === undefined, errors.ERR_DBL_USER);\n    errors.assertParamPropValue(typeof options.username === 'string', 1,\n      \"username\");\n    outOptions.user = options.username;\n  }\n\n  // password must be a string\n  if (options.password !== undefined) {\n    errors.assertParamPropValue(typeof options.password === 'string', 1,\n      \"password\");\n    outOptions.password = options.password;\n  }\n\n  // only one of \"connectString\" and \"connectionString\" may be specified (and\n  // must be strings)\n  if (options.connectString !== undefined) {\n    errors.assertParamPropValue(typeof options.connectString === 'string', 1,\n      \"connectString\");\n    outOptions.connectString = options.connectString;\n  }\n  if (options.connectionString !== undefined) {\n    errors.assert(outOptions.connectString === undefined,\n      errors.ERR_DBL_CONNECT_STRING);\n    errors.assertParamPropValue(typeof options.connectionString === 'string',\n      1, \"connectionString\");\n    outOptions.connectString = options.connectionString;\n  }\n\n  // wallet password must be string\n  if (options.walletPassword !== undefined) {\n    errors.assertParamPropValue(typeof options.walletPassword === 'string', 1,\n      \"walletPassword\");\n    outOptions.walletPassword = options.walletPassword;\n  }\n\n  //wallet location must be a string\n  if (options.walletLocation !== undefined) {\n    errors.assertParamPropValue(typeof options.walletLocation === 'string', 1,\n      \"walletLocation\");\n    outOptions.walletLocation = options.walletLocation;\n  }\n\n  //wallet content must be a string\n  if (options.walletContent !== undefined) {\n    errors.assertParamPropValue(typeof options.walletContent === 'string', 1,\n      \"walletContent\");\n    outOptions.walletContent = options.walletContent;\n  }\n\n  // edition must be a string\n  if (options.edition !== undefined) {\n    errors.assertParamPropValue(typeof options.edition === 'string', 1,\n      \"edition\");\n    outOptions.edition = options.edition;\n  }\n\n  // stmtCacheSize must be an integer (>= 0)\n  if (options.stmtCacheSize !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.stmtCacheSize) &&\n      options.stmtCacheSize >= 0, 1, \"stmtCacheSize\");\n    outOptions.stmtCacheSize = options.stmtCacheSize;\n  }\n\n  // externalAuth must be a boolean\n  outOptions.externalAuth = settings.externalAuth;\n  if (options.externalAuth !== undefined) {\n    errors.assertParamPropValue(typeof options.externalAuth === 'boolean', 1,\n      \"externalAuth\");\n    outOptions.externalAuth = options.externalAuth;\n  }\n\n  // events must be a boolean\n  if (options.events !== undefined) {\n    errors.assertParamPropValue(typeof options.events === 'boolean', 1,\n      \"events\");\n    outOptions.events = options.events;\n  }\n\n  // poolAlias must be a string\n  if (options.poolAlias !== undefined) {\n    errors.assertParamPropValue(typeof options.poolAlias === 'string' &&\n      options.poolAlias.length > 0, 1, \"poolAlias\");\n    outOptions.poolAlias = options.poolAlias;\n  }\n\n  // configDir must be a string\n  if (options.configDir !== undefined) {\n    errors.assertParamPropValue(typeof options.configDir === 'string',\n      1, \"configDir\");\n    outOptions.configDir = options.configDir;\n  }\n\n  // sslServerServerCertDN must be a string\n  if (options.sslServerCertDN !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerCertDN === 'string',\n      1, \"sslServerCertDN\");\n    outOptions.sslServerCertDN = options.sslServerCertDN;\n  }\n\n  // sslServerServerDNMatch must be a boolean\n  if (options.sslServerDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerDNMatch === 'boolean',\n      1, \"sslServerDNMatch\");\n    outOptions.sslServerDNMatch = options.sslServerDNMatch;\n  }\n\n  // sslAllowWeakDNMatch must be a boolean\n  if (options.sslAllowWeakDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslAllowWeakDNMatch === 'boolean',\n      1, \"sslAllowWeakDNMatch\");\n    outOptions.sslAllowWeakDNMatch = options.sslAllowWeakDNMatch;\n  }\n  // httpsProxy must be a string\n  if (options.httpsProxy !== undefined) {\n    errors.assertParamPropValue(typeof options.httpsProxy === 'string',\n      1, \"httpsProxy\");\n    outOptions.httpsProxy = options.httpsProxy;\n  }\n\n  // httpsProxyPort must be an integer (>= 0)\n  if (options.httpsProxyPort !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.httpsProxyPort) &&\n      options.httpsProxyPort >= 0, 1, \"httpsProxyPort\");\n    outOptions.httpsProxyPort = options.httpsProxyPort;\n  }\n\n  //retryCount must be an integer (>=0)\n  if (options.retryCount !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryCount) &&\n    options.retryCount >= 0, 1, \"retryCount\");\n    outOptions.retryCount = options.retryCount;\n  }\n\n  //retryDelay must be an integer (>=0)\n  if (options.retryDelay !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryDelay) &&\n      options.retryDelay >= 0, 1, \"retryDelay\");\n    outOptions.retryDelay = options.retryDelay;\n  }\n\n  // connectTimeout must be an integer (>= 0)\n  if (options.connectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.connectTimeout) &&\n    options.connectTimeout >= 0, 1, \"connectTimeout\");\n    outOptions.connectTimeout = options.connectTimeout;\n  }\n\n  // transportConnectTimeout must be an integer (>= 0)\n  if (options.transportConnectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.transportConnectTimeout) &&\n    options.transportConnectTimeout >= 0, 1, \"transportConnectTimeout\");\n    outOptions.transportConnectTimeout = options.transportConnectTimeout;\n  }\n\n  // expireTime must be an integer (>= 0)\n  if (options.expireTime !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.expireTime) &&\n    options.expireTime >= 0, 1, \"expireTime\");\n    outOptions.expireTime = options.expireTime;\n\n  }\n\n  // sdu must be an integer (> 0)\n  if (options.sdu !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.sdu) &&\n    options.sdu > 0, 1, \"sdu\");\n    outOptions.sdu = options.sdu;\n  }\n\n  // connectionIdPrefix must be a string\n  if (options.connectionIdPrefix !== undefined) {\n    errors.assertParamPropValue(typeof options.connectionIdPrefix === 'string',\n      1, \"connectionIdPrefix\");\n    outOptions.connectionIdPrefix = options.connectionIdPrefix;\n  }\n\n  // privilege must be one of a set of named constants\n  if (options.privilege !== undefined) {\n    errors.assertParamPropValue(nodbUtil.isPrivilege(options.privilege), 1,\n      \"privilege\");\n    outOptions.privilege = options.privilege;\n  }\n\n  // check pool specific options\n  if (inCreatePool) {\n\n    // poolMax must be an integer > 0\n    if (options.poolMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMax) &&\n        options.poolMax > 0, 1, \"poolMax\");\n      outOptions.poolMax = options.poolMax;\n    }\n\n    // poolMaxPerShard must be an integer >= 0\n    if (options.poolMaxPerShard !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMaxPerShard) &&\n        options.poolMaxPerShard >= 0, 1, \"poolMaxPerShard\");\n      outOptions.poolMaxPerShard = options.poolMaxPerShard;\n    }\n\n    // poolMin must be an integer >= 0\n    if (options.poolMin !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMin) &&\n        options.poolMin >= 0, 1, \"poolMin\");\n      outOptions.poolMin = options.poolMin;\n    }\n\n    // poolIncrement must be an integer >= 0\n    if (options.poolIncrement !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolIncrement) &&\n        options.poolIncrement >= 0, 1, \"poolIncrement\");\n      outOptions.poolIncrement = options.poolIncrement;\n    }\n\n    // poolTimeout must be an integer >= 0\n    if (options.poolTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolTimeout) &&\n        options.poolTimeout >= 0, 1, \"poolTimeout\");\n      outOptions.poolTimeout = options.poolTimeout;\n    }\n\n    // poolPingInterval must be an integer\n    if (options.poolPingInterval !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingInterval) &&\n        options.poolPingInterval >= -2147483648 &&\n        options.poolPingInterval <= 2147483647, 1, \"poolPingInterval\");\n      outOptions.poolPingInterval = options.poolPingInterval;\n    }\n\n    // poolPingTimeout must be an integer (>= 0)\n    if (options.poolPingTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingTimeout) &&\n    options.poolPingTimeout >= 0, 1, \"poolPingTimeout\");\n      outOptions.poolPingTimeout = options.poolPingTimeout;\n    }\n\n    // homogeneous must be a boolean (and defaults to True)\n    outOptions.homogeneous = true;\n    if (options.homogeneous !== undefined) {\n      errors.assertParamPropValue(typeof options.homogeneous === 'boolean', 1,\n        \"homogeneous\");\n      outOptions.homogeneous = options.homogeneous;\n    }\n\n    // queueTimeout must be an integer >= 0\n    if (options.queueTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueTimeout) &&\n        options.queueTimeout >= 0, 1, \"queueTimeout\");\n      outOptions.queueTimeout = options.queueTimeout;\n    }\n\n    // queueMax must be an integer\n    if (options.queueMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueMax), 1,\n        \"queueMax\");\n      outOptions.queueMax = options.queueMax;\n    }\n\n    // sodaMetaDataCache must be a boolean (and defaults to True)\n    outOptions.sodaMetaDataCache = false;\n    if (options.sodaMetaDataCache !== undefined) {\n      errors.assertParamPropValue(typeof options.sodaMetaDataCache ===\n        'boolean', 1, \"sodaMetaDataCache\");\n      outOptions.sodaMetaDataCache = options.sodaMetaDataCache;\n    }\n\n    // sessionCallback must be a function or a string\n    if (options.sessionCallback !== undefined) {\n      errors.assertParamPropValue(typeof options.sessionCallback === 'string' ||\n        typeof options.sessionCallback === 'function', 1, \"sessionCallback\");\n      outOptions.sessionCallback = options.sessionCallback;\n    }\n\n    // enableStatistics must be a boolean (_enableStats is DEPRECATED)\n    outOptions.enableStatistics = false;\n    if (options.enableStatistics !== undefined) {\n      errors.assertParamPropValue(typeof options.enableStatistics ===\n        'boolean', 1, \"enableStatistics\");\n      outOptions.enableStatistics = options.enableStatistics;\n    }\n    if (!outOptions.enableStatistics && options._enableStats !== undefined) {\n      errors.assertParamPropValue(typeof options._enableStats === 'boolean', 1,\n        \"_enableStats\");\n      outOptions.enableStatistics = options._enableStats;\n    }\n\n  // check connection creation specific options\n  } else {\n\n    // newPassword must be a string\n    if (options.newPassword !== undefined) {\n      errors.assertParamPropValue(typeof options.newPassword === 'string', 1,\n        \"newPassword\");\n      outOptions.newPassword = options.newPassword;\n    }\n\n    // shardingKey must be an array of values\n    if (options.shardingKey !== undefined) {\n      const value = options.shardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"shardingKey\");\n      outOptions.shardingKey = options.shardingKey;\n    }\n\n    // superShardingKey must be an array of values\n    if (options.superShardingKey !== undefined) {\n      const value = options.superShardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"superShardingKey\");\n      outOptions.superShardingKey = options.superShardingKey;\n    }\n\n  }\n\n  // check access token\n  if (options.accessToken !== undefined) {\n\n    // cannot set username or password for token based authentication\n    errors.assert(outOptions.user === undefined &&\n      outOptions.password === undefined, errors.ERR_TOKEN_BASED_AUTH);\n\n    // homogenous (for pool) and externalAuth (both) must be set\n    if (inCreatePool) {\n      errors.assert(outOptions.homogeneous && outOptions.externalAuth,\n        errors.ERR_POOL_TOKEN_BASED_AUTH);\n    } else {\n      errors.assert(outOptions.externalAuth, errors.ERR_CONN_TOKEN_BASED_AUTH);\n    }\n\n    // check the token is valid\n    let accessToken;\n    if (typeof options.accessToken === 'function') {\n      outOptions.accessTokenFn = options.accessToken;\n      outOptions.accessTokenConfig = options.accessTokenConfig;\n      accessToken = await options.accessToken(false, options.accessTokenConfig);\n      if (!nodbUtil.isTokenValid(accessToken)) {\n        accessToken = await options.accessToken(true, options.accessTokenConfig);\n      }\n    } else {\n      accessToken = options.accessToken;\n    }\n    errors.assert(nodbUtil.isTokenValid(accessToken),\n      errors.ERR_TOKEN_HAS_EXPIRED);\n    if (accessToken.privateKey !== undefined) {\n      errors.assert(typeof accessToken.privateKey === 'string', errors.ERR_TOKEN_BASED_AUTH);\n      accessToken.privateKey = nodbUtil.denormalizePrivateKey(accessToken.privateKey);\n    }\n\n    // store token and privatekey\n    if (typeof accessToken === 'string') {\n      outOptions.token = accessToken;\n    } else {\n      outOptions.token = accessToken.token;\n      outOptions.privateKey = accessToken.privateKey;\n    }\n\n  }\n\n  // Check external Auth config.\n  // Allow Session User enclosed in [] for proxy authentication.\n  if (outOptions.token === undefined && outOptions.externalAuth) {\n    if (outOptions.password) {\n      errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n    }\n    if (outOptions.user) {\n      if (inCreatePool) {\n        errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n      } else if (outOptions.user[0] !== '[' || outOptions.user.slice(-1) !== ']') {\n        // username is not enclosed in [].\n        errors.throwErr(errors.ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY);\n      }\n    }\n  }\n\n  return outOptions;\n}\n\n\n//-----------------------------------------------------------------------------\n// createPool()\n//\n// Create a pool with the specified options and return it to the caller.\n//-----------------------------------------------------------------------------\nasync function createPool(options) {\n  let poolAlias;\n\n  // check arguments\n  errors.assertArgCount(arguments, 1, 1);\n  errors.assertParamValue(nodbUtil.isObject(options), 1);\n  options = await _verifyOptions(options, true);\n  const sessionCallback = options.sessionCallback;\n  if (typeof sessionCallback === 'function')\n    delete options.sessionCallback;\n\n  // determine pool alias\n  if (options.poolAlias !== undefined) {\n    poolAlias = options.poolAlias;\n  } else if (options.poolAlias === undefined\n      && !poolCache[defaultPoolAlias]\n      && !tempUsedPoolAliases[defaultPoolAlias]) {\n    poolAlias = defaultPoolAlias;\n  }\n  if (poolCache[poolAlias] || tempUsedPoolAliases[poolAlias]) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_ALREADY_EXISTS, poolAlias);\n  }\n\n  // add defaults to options, if needed\n  settings.addToOptions(options,\n    \"connectionClass\",\n    \"edition\",\n    \"events\",\n    \"externalAuth\",\n    \"stmtCacheSize\",\n    \"poolMax\",\n    \"poolMaxPerShard\",\n    \"poolMin\",\n    \"poolIncrement\",\n    \"poolTimeout\",\n    \"poolPingInterval\",\n    \"poolPingTimeout\",\n    \"queueMax\",\n    \"queueTimeout\");\n\n  // poolMax must be greater than or equal to poolMin\n  if (options.poolMin > options.poolMax) {\n    errors.throwErr(errors.ERR_INVALID_NUMBER_OF_CONNECTIONS, options.poolMax,\n      options.poolMin);\n  }\n\n  // initialize the Oracle client, if necessary\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n\n  // Need to prevent another call in the same stack from succeeding, otherwise\n  // two pools could be created with the same poolAlias and the second one that\n  // comes back would overwrite the first in the cache.\n  if (poolAlias) {\n    tempUsedPoolAliases[poolAlias] = true;\n  }\n\n  // create the pool, ensuring that the temporary pool alias cache is removed\n  // once this has completed (either successfully or unsuccessfully)\n  const pool = new Pool();\n  try {\n    await pool._impl.create(options);\n  } finally {\n    if (poolAlias) {\n      delete tempUsedPoolAliases[poolAlias];\n    }\n  }\n\n  if (poolAlias) {\n    poolCache[poolAlias] = pool;\n  }\n\n  pool._setup(options, poolAlias);\n  pool._sessionCallback = sessionCallback;\n  pool.on('_afterPoolClose', () => {\n    if (pool.poolAlias) {\n      delete poolCache[pool.poolAlias];\n    }\n  });\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n\n  return pool;\n}\n\n\n//-----------------------------------------------------------------------------\n// getConnection()\n//\n// Gets either a standalone connection, or a connection from a pool (stored in\n// the pool cache).\n//-----------------------------------------------------------------------------\nasync function getConnection(a1) {\n  let options = {};\n  let poolAlias;\n\n  // determine if the connection should be acquired from a pool\n  errors.assertArgCount(arguments, 0, 1);\n  if (arguments.length == 0) {\n    poolAlias = defaultPoolAlias;\n  } else if (typeof a1 === 'string') {\n    poolAlias = a1;\n  } else {\n    options = a1;\n    errors.assertParamValue(nodbUtil.isObject(options), 1);\n    poolAlias = options.poolAlias;\n  }\n  if (poolAlias) {\n    const pool = poolCache[poolAlias];\n    errors.assert(pool, errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n    return await pool.getConnection(options);\n  }\n\n  // create a standalone connection\n  options = await _verifyOptions(options, false);\n  settings.addToOptions(options,\n    \"connectionClass\",\n    \"edition\",\n    \"events\",\n    \"externalAuth\",\n    \"stmtCacheSize\");\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n\n  const conn = new Connection();\n  conn._impl = new impl.ConnectionImpl();\n  await conn._impl.connect(options);\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n  return conn;\n}\n\n//-----------------------------------------------------------------------------\n// getPool()\n//\n// Returns a pool for the given alias.\n//-----------------------------------------------------------------------------\nfunction getPool(poolAlias) {\n\n  errors.assertArgCount(arguments, 0, 1);\n\n  if (poolAlias) {\n    errors.assertParamValue(typeof poolAlias === 'string' ||\n        typeof poolAlias === 'number', 1);\n  }\n\n  poolAlias = poolAlias || defaultPoolAlias;\n\n  const pool = poolCache[poolAlias];\n\n  if (!pool) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n  }\n\n  return pool;\n}\n\n//-----------------------------------------------------------------------------\n// initOracleClient()\n//\n// Initializes the Oracle Client.\n//-----------------------------------------------------------------------------\nfunction initOracleClient(arg1) {\n  let options = {};\n  errors.assertArgCount(arguments, 0, 1);\n  if (arg1 !== undefined) {\n    errors.assertParamValue(nodbUtil.isObject(arg1), 1);\n    options = {...arg1};\n    errors.assertParamPropString(options, 1, \"libDir\");\n    errors.assertParamPropString(options, 1, \"configDir\");\n    errors.assertParamPropString(options, 1, \"errorUrl\");\n    errors.assertParamPropString(options, 1, \"driverName\");\n    errors.assertParamPropString(options, 1, \"binaryDir\");\n  }\n  if (settings.thinDriverInitialized) {\n    errors.throwErr(errors.ERR_THIN_CONNECTION_ALREADY_CREATED);\n  }\n  if (_initOracleClientArgs === undefined) {\n    const oracledbCLib = _initCLib(options);\n    if (options.driverName === undefined)\n      options.driverName = constants.DEFAULT_DRIVER_NAME + \" thk\";\n    if (options.errorUrl === undefined)\n      options.errorUrl = constants.DEFAULT_ERROR_URL;\n    try {\n      oracledbCLib.initOracleClient(options, impl, settings);\n    } catch (err) {\n      const newErr = errors.transformErr(err);\n      if (newErr.code === \"DPI-1047\") {\n        newErr.message += \"\\n\" + nodbUtil.getInstallHelp();\n      }\n      throw newErr;\n    }\n    _initOracleClientArgs = arg1 || {};\n  } else if (!util.isDeepStrictEqual(_initOracleClientArgs, options)) {\n    errors.throwErr(errors.ERR_INIT_ORACLE_CLIENT_ARGS);\n  }\n\n  // driver mode initialization\n  // _initOracleClientArgs is populated and thin connection not created\n  settings.thin = false;\n}\n\n\n//-----------------------------------------------------------------------------\n// shutdown()\n//\n// Shuts down the database.\n//-----------------------------------------------------------------------------\nasync function shutdown(a1, a2) {\n  let connAttr = {};\n  let shutdownMode = constants.SHUTDOWN_MODE_DEFAULT;\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'number', 2);\n    connAttr = a1;\n    shutdownMode = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for shutting down the database\n  // use SYSOPER privilege\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: constants.SYSOPER\n  };\n\n  const conn = await this.getConnection(dbConfig);\n  await conn.shutdown(shutdownMode);\n  if (shutdownMode != this.SHUTDOWN_MODE_ABORT) {\n    await conn.execute(\"ALTER DATABASE CLOSE\");\n    await conn.execute(\"ALTER DATABASE DISMOUNT\");\n    await conn.shutdown(this.SHUTDOWN_MODE_FINAL);\n  }\n  await conn.close();\n}\n\n//-----------------------------------------------------------------------------\n// _checkConfigProvider()\n//\n// Look for the config provider in the connection string and retreives\n// object stored in the config Provider.\n// Returns object based on precedence between input object and the one retrieved\n// from Config Provider.\n//-----------------------------------------------------------------------------\nasync function _checkConfigProvider(options) {\n  const url = options.connectString || options.connectionString;\n  if (!url)\n    return options;\n  let parsedUrl = url;\n  let urlExtendedPart;\n  const baseRegex = new RegExp(\"^config-(?<provider>[A-Za-z0-9]+)(://)(?<provider_arg>[^?]+)\");\n  if (url.indexOf('?') != -1) {\n    parsedUrl = url.substring(0, url.indexOf('?'));\n    urlExtendedPart = url.substring(url.indexOf('?'), url.length); //extended part\n  }\n  const match = parsedUrl.match(baseRegex);\n  if (match) {\n    const provider = match.groups.provider;\n    const provider_arg = match.groups.provider_arg;\n    let configPckg;\n    try {\n      configPckg = require('./configProviders/' + provider);\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_NOT_SUPPORTED, provider);\n    }\n    const configProvider = new configPckg(provider_arg, urlExtendedPart);\n    try {\n      configProvider.init();\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_LOAD_FAILED, err.message);\n    }\n    let secondOpts;\n    try {\n      secondOpts = await configProvider.returnConfig();\n    } catch (err) {\n      errors.throwErr(errors.ERR_CONFIG_PROVIDER_FAILED_TO_RETRIEVE_CONFIG, err.message);\n    }\n    options = configProvider.modifyOptionsPrecedence(secondOpts, options);\n  }\n  return options;\n}\n\n//-----------------------------------------------------------------------------\n// startup()\n//\n// Starts up the database.\n//-----------------------------------------------------------------------------\nasync function startup(a1, a2) {\n  let connAttr = {};\n  let startupAttr = {};\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'object', 2);\n    connAttr = a1;\n    startupAttr = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for starting up the database\n  // use SYSOPER and SYSPRELIM privileges\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: this.SYSOPER | this.SYSPRELIM\n  };\n\n  let conn = await this.getConnection(dbConfig);\n  await conn.startup(startupAttr);\n  await conn.close();\n\n  dbConfig.privilege = this.SYSOPER;\n  conn = await this.getConnection(dbConfig);\n  await conn.execute(\"ALTER DATABASE MOUNT\");\n  await conn.execute(\"ALTER DATABASE OPEN\");\n  await conn.close();\n}\n\n// module exports\nmodule.exports = {\n\n  // classes\n  AqDeqOptions,\n  AqEnqOptions,\n  AqMessage,\n  AqQueue,\n  BaseDbObject,\n  Connection,\n  JsonId: types.JsonId,\n  Lob,\n  Pool,\n  PoolStatistics,\n  ResultSet,\n  SodaDatabase,\n  SodaCollection,\n  SodaDocCursor,\n  SodaDocument,\n  SodaOperation,\n\n  // top-level functions\n  getConnection: nodbUtil.callbackify(getConnection),\n  createPool: nodbUtil.callbackify(createPool),\n  getPool,\n  initOracleClient,\n  shutdown: nodbUtil.callbackify(shutdown),\n  startup: nodbUtil.callbackify(startup),\n\n  // CQN operation codes\n  CQN_OPCODE_ALL_OPS: constants.CQN_OPCODE_ALL_OPS,\n  CQN_OPCODE_ALL_ROWS: constants.CQN_OPCODE_ALL_ROWS,\n  CQN_OPCODE_ALTER: constants.CQN_OPCODE_ALTER,\n  CQN_OPCODE_DELETE: constants.CQN_OPCODE_DELETE,\n  CQN_OPCODE_DROP: constants.CQN_OPCODE_DROP,\n  CQN_OPCODE_INSERT: constants.CQN_OPCODE_INSERT,\n  CQN_OPCODE_UPDATE: constants.CQN_OPCODE_UPDATE,\n\n  // database types\n  DB_TYPE_BFILE: types.DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE: types.DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT: types.DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER: types.DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB: types.DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN: types.DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR: types.DB_TYPE_CHAR,\n  DB_TYPE_CLOB: types.DB_TYPE_CLOB,\n  DB_TYPE_CURSOR: types.DB_TYPE_CURSOR,\n  DB_TYPE_DATE: types.DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS: types.DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM: types.DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON: types.DB_TYPE_JSON,\n  DB_TYPE_LONG: types.DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR: types.DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW: types.DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR: types.DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB: types.DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER: types.DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR: types.DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT: types.DB_TYPE_OBJECT,\n  DB_TYPE_RAW: types.DB_TYPE_RAW,\n  DB_TYPE_ROWID: types.DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP: types.DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ: types.DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ: types.DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_VARCHAR: types.DB_TYPE_VARCHAR,\n  DB_TYPE_XMLTYPE: types.DB_TYPE_XMLTYPE,\n  DB_TYPE_VECTOR: types.DB_TYPE_VECTOR,\n\n  // fetchInfo type defaulting\n  DEFAULT: constants.DEFAULT,\n\n  // statement types\n  STMT_TYPE_UNKNOWN: constants.STMT_TYPE_UNKNOWN,\n  STMT_TYPE_SELECT: constants.STMT_TYPE_SELECT,\n  STMT_TYPE_UPDATE: constants.STMT_TYPE_UPDATE,\n  STMT_TYPE_DELETE: constants.STMT_TYPE_DELETE,\n  STMT_TYPE_INSERT: constants.STMT_TYPE_INSERT,\n  STMT_TYPE_CREATE: constants.STMT_TYPE_CREATE,\n  STMT_TYPE_DROP: constants.STMT_TYPE_DROP,\n  STMT_TYPE_ALTER: constants.STMT_TYPE_ALTER,\n  STMT_TYPE_BEGIN: constants.STMT_TYPE_BEGIN,\n  STMT_TYPE_DECLARE: constants.STMT_TYPE_DECLARE,\n  STMT_TYPE_CALL: constants.STMT_TYPE_CALL,\n  STMT_TYPE_EXPLAIN_PLAN: constants.STMT_TYPE_EXPLAIN_PLAN,\n  STMT_TYPE_MERGE: constants.STMT_TYPE_MERGE,\n  STMT_TYPE_ROLLBACK: constants.STMT_TYPE_ROLLBACK,\n  STMT_TYPE_COMMIT: constants.STMT_TYPE_COMMIT,\n\n  // shutdown modes\n  SHUTDOWN_MODE_DEFAULT: constants.SHUTDOWN_MODE_DEFAULT,\n  SHUTDOWN_MODE_TRANSACTIONAL: constants.SHUTDOWN_MODE_TRANSACTIONAL,\n  SHUTDOWN_MODE_TRANSACTIONAL_LOCAL:\n      constants.SHUTDOWN_MODE_TRANSACTIONAL_LOCAL,\n  SHUTDOWN_MODE_IMMEDIATE: constants.SHUTDOWN_MODE_IMMEDIATE,\n  SHUTDOWN_MODE_ABORT: constants.SHUTDOWN_MODE_ABORT,\n  SHUTDOWN_MODE_FINAL: constants.SHUTDOWN_MODE_FINAL,\n\n  // startup modes\n  STARTUP_MODE_DEFAULT: constants.STARTUP_MODE_DEFAULT,\n  STARTUP_MODE_FORCE: constants.STARTUP_MODE_FORCE,\n  STARTUP_MODE_RESTRICT: constants.STARTUP_MODE_RESTRICT,\n\n  // subscription event types\n  SUBSCR_EVENT_TYPE_SHUTDOWN: constants.SUBSCR_EVENT_TYPE_SHUTDOWN,\n  SUBSCR_EVENT_TYPE_SHUTDOWN_ANY: constants.SUBSCR_EVENT_TYPE_SHUTDOWN_ANY,\n  SUBSCR_EVENT_TYPE_STARTUP: constants.SUBSCR_EVENT_TYPE_STARTUP,\n  SUBSCR_EVENT_TYPE_DEREG: constants.SUBSCR_EVENT_TYPE_DEREG,\n  SUBSCR_EVENT_TYPE_OBJ_CHANGE: constants.SUBSCR_EVENT_TYPE_OBJ_CHANGE,\n  SUBSCR_EVENT_TYPE_QUERY_CHANGE: constants.SUBSCR_EVENT_TYPE_QUERY_CHANGE,\n  SUBSCR_EVENT_TYPE_AQ: constants.SUBSCR_EVENT_TYPE_AQ,\n\n  // subscription grouping classes\n  SUBSCR_GROUPING_CLASS_TIME: constants.SUBSCR_GROUPING_CLASS_TIME,\n\n  // subscription grouping types\n  SUBSCR_GROUPING_TYPE_SUMMARY: constants.SUBSCR_GROUPING_TYPE_SUMMARY,\n  SUBSCR_GROUPING_TYPE_LAST: constants.SUBSCR_GROUPING_TYPE_LAST,\n\n  // subscription namespaces\n  SUBSCR_NAMESPACE_AQ: constants.SUBSCR_NAMESPACE_AQ,\n  SUBSCR_NAMESPACE_DBCHANGE: constants.SUBSCR_NAMESPACE_DBCHANGE,\n\n  // subscription quality of service flags\n  SUBSCR_QOS_BEST_EFFORT: constants.SUBSCR_QOS_BEST_EFFORT,\n  SUBSCR_QOS_DEREG_NFY: constants.SUBSCR_QOS_DEREG_NFY,\n  SUBSCR_QOS_QUERY: constants.SUBSCR_QOS_QUERY,\n  SUBSCR_QOS_RELIABLE: constants.SUBSCR_QOS_RELIABLE,\n  SUBSCR_QOS_ROWIDS: constants.SUBSCR_QOS_ROWIDS,\n\n  // privileges\n  SYSASM: constants.SYSASM,\n  SYSBACKUP: constants.SYSBACKUP,\n  SYSDBA: constants.SYSDBA,\n  SYSDG: constants.SYSDG,\n  SYSKM: constants.SYSKM,\n  SYSOPER: constants.SYSOPER,\n  SYSPRELIM: constants.SYSPRELIM,\n  SYSRAC: constants.SYSRAC,\n\n  // bind directions\n  BIND_IN: constants.BIND_IN,\n  BIND_INOUT: constants.BIND_INOUT,\n  BIND_OUT: constants.BIND_OUT,\n\n  // outFormat values\n  OUT_FORMAT_ARRAY: constants.OUT_FORMAT_ARRAY,\n  OUT_FORMAT_OBJECT: constants.OUT_FORMAT_OBJECT,\n\n  // SODA collection creation modes\n  SODA_COLL_MAP_MODE: constants.SODA_COLL_MAP_MODE,\n\n  // pool statuses\n  POOL_STATUS_OPEN: constants.POOL_STATUS_OPEN,\n  POOL_STATUS_DRAINING: constants.POOL_STATUS_DRAINING,\n  POOL_STATUS_CLOSED: constants.POOL_STATUS_CLOSED,\n  POOL_STATUS_RECONFIGURING: constants.POOL_STATUS_RECONFIGURING,\n\n  // AQ dequeue wait options\n  AQ_DEQ_NO_WAIT: constants.AQ_DEQ_NO_WAIT,\n  AQ_DEQ_WAIT_FOREVER: constants.AQ_DEQ_WAIT_FOREVER,\n\n  // AQ dequeue modes\n  AQ_DEQ_MODE_BROWSE: constants.AQ_DEQ_MODE_BROWSE,\n  AQ_DEQ_MODE_LOCKED: constants.AQ_DEQ_MODE_LOCKED,\n  AQ_DEQ_MODE_REMOVE: constants.AQ_DEQ_MODE_REMOVE,\n  AQ_DEQ_MODE_REMOVE_NO_DATA: constants.AQ_DEQ_MODE_REMOVE_NO_DATA,\n\n  // AQ dequeue navigation flags\n  AQ_DEQ_NAV_FIRST_MSG: constants.AQ_DEQ_NAV_FIRST_MSG,\n  AQ_DEQ_NAV_NEXT_TRANSACTION: constants.AQ_DEQ_NAV_NEXT_TRANSACTION,\n  AQ_DEQ_NAV_NEXT_MSG: constants.AQ_DEQ_NAV_NEXT_MSG,\n\n  // AQ message delivery modes\n  AQ_MSG_DELIV_MODE_PERSISTENT: constants.AQ_MSG_DELIV_MODE_PERSISTENT,\n  AQ_MSG_DELIV_MODE_BUFFERED: constants.AQ_MSG_DELIV_MODE_BUFFERED,\n  AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED:\n      constants.AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED,\n\n  // AQ message states\n  AQ_MSG_STATE_READY: constants.AQ_MSG_STATE_READY,\n  AQ_MSG_STATE_WAITING: constants.AQ_MSG_STATE_WAITING,\n  AQ_MSG_STATE_PROCESSED: constants.AQ_MSG_STATE_PROCESSED,\n  AQ_MSG_STATE_EXPIRED: constants.AQ_MSG_STATE_EXPIRED,\n\n  // AQ visibility flags\n  AQ_VISIBILITY_IMMEDIATE: constants.AQ_VISIBILITY_IMMEDIATE,\n  AQ_VISIBILITY_ON_COMMIT: constants.AQ_VISIBILITY_ON_COMMIT,\n\n  // TPC/XA begin flags Constants\n  TPC_BEGIN_JOIN: constants.TPC_BEGIN_JOIN,\n  TPC_BEGIN_NEW: constants.TPC_BEGIN_NEW,\n  TPC_BEGIN_PROMOTE: constants.TPC_BEGIN_PROMOTE,\n  TPC_BEGIN_RESUME: constants.TPC_BEGIN_RESUME,\n\n  // TPC/XA two-phase commit flags\n  TPC_END_NORMAL: constants.TPC_END_NORMAL,\n  TPC_END_SUSPEND: constants.TPC_END_SUSPEND,\n\n  // vector types\n  VECTOR_FORMAT_FLOAT32: constants.VECTOR_FORMAT_FLOAT32,\n  VECTOR_FORMAT_FLOAT64: constants.VECTOR_FORMAT_FLOAT64,\n  VECTOR_FORMAT_INT8: constants.VECTOR_FORMAT_INT8,\n  VECTOR_FORMAT_BINARY: constants.VECTOR_FORMAT_BINARY,\n\n  // database type aliases\n  BLOB: types.DB_TYPE_BLOB,\n  BUFFER: types.DB_TYPE_RAW,\n  CLOB: types.DB_TYPE_CLOB,\n  CURSOR: types.DB_TYPE_CURSOR,\n  DATE: types.DB_TYPE_TIMESTAMP,\n  NCLOB: types.DB_TYPE_NCLOB,\n  NUMBER: types.DB_TYPE_NUMBER,\n  STRING: types.DB_TYPE_VARCHAR,\n\n  // outFormat aliases\n  ARRAY: constants.OUT_FORMAT_ARRAY,\n  OBJECT: constants.OUT_FORMAT_OBJECT,\n\n  // Instances\n  future,\n\n  // property getters\n  get autoCommit() {\n    return settings.autoCommit;\n  },\n\n  get connectionClass() {\n    return settings.connectionClass;\n  },\n\n  get dbObjectAsPojo() {\n    return settings.dbObjectAsPojo;\n  },\n\n  get edition() {\n    return settings.edition;\n  },\n\n  get errorOnConcurrentExecute() {\n    return settings.errorOnConcurrentExecute;\n  },\n\n  get events() {\n    return settings.events;\n  },\n\n  get externalAuth() {\n    return settings.externalAuth;\n  },\n\n  get fetchArraySize() {\n    return settings.fetchArraySize;\n  },\n\n  get fetchAsBuffer() {\n    return settings.fetchAsBuffer;\n  },\n\n  get fetchAsString() {\n    return settings.fetchAsString;\n  },\n\n  get fetchTypeHandler() {\n    return settings.fetchTypeHandler;\n  },\n\n  get lobPrefetchSize() {\n    return settings.lobPrefetchSize;\n  },\n\n  get maxRows() {\n    return settings.maxRows;\n  },\n\n  get oracleClientVersion() {\n    return settings.oracleClientVersion;\n  },\n\n  get oracleClientVersionString() {\n    return settings.oracleClientVersionString;\n  },\n\n  get outFormat() {\n    return settings.outFormat;\n  },\n\n  get poolIncrement() {\n    return settings.poolIncrement;\n  },\n\n  get poolMax() {\n    return settings.poolMax;\n  },\n\n  get poolMaxPerShard() {\n    return settings.poolMaxPerShard;\n  },\n\n  get poolMin() {\n    return settings.poolMin;\n  },\n\n  get poolPingInterval() {\n    return settings.poolPingInterval;\n  },\n\n  get poolPingTimeout() {\n    return settings.poolPingTimeout;\n  },\n\n  get poolTimeout() {\n    return settings.poolTimeout;\n  },\n\n  get prefetchRows() {\n    return settings.prefetchRows;\n  },\n\n  get stmtCacheSize() {\n    return settings.stmtCacheSize;\n  },\n\n  get thin() {\n    return settings.thin;\n  },\n\n  get version() {\n    return constants.VERSION_MAJOR * 10000 + constants.VERSION_MINOR * 100 +\n        constants.VERSION_PATCH;\n  },\n\n  get versionString() {\n    return constants.VERSION_STRING;\n  },\n\n  get versionSuffix() {\n    return constants.VERSION_SUFFIX;\n  },\n\n  // property setters\n  set autoCommit(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"autoCommit\");\n    settings.autoCommit = value;\n  },\n\n  set connectionClass(value) {\n    errors.assertPropValue(typeof value === 'string', \"connectionClass\");\n    settings.connectionClass = value;\n  },\n\n  set dbObjectAsPojo(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"dbObjectAsPojo\");\n    settings.dbObjectAsPojo = value;\n  },\n\n  set edition(value) {\n    errors.assertPropValue(typeof value === 'string', \"edition\");\n    settings.edition = value;\n  },\n\n  set errorOnConcurrentExecute(value) {\n    errors.assertPropValue(typeof value === 'boolean',\n      \"errorOnConcurrentExecute\");\n    settings.errorOnConcurrentExecute = value;\n  },\n\n  set events(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"events\");\n    settings.events = value;\n  },\n\n  set externalAuth(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"externalAuth\");\n    settings.externalAuth = value;\n  },\n\n  set fetchArraySize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value > 0,\n      \"fetchArraySize\");\n    settings.fetchArraySize = value;\n  },\n\n  set fetchAsBuffer(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsBuffer\");\n    settings.createFetchTypeMap(settings.fetchAsString, value);\n    settings.fetchAsBuffer = value;\n  },\n\n  set fetchAsString(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsString\");\n    settings.createFetchTypeMap(value, settings.fetchAsBuffer);\n    settings.fetchAsString = value;\n  },\n\n  set fetchTypeHandler(value) {\n    if (value !== undefined) {\n      errors.assertPropValue(typeof value === 'function', \"fetchTypeHandler\");\n    }\n    settings.fetchTypeHandler = value;\n  },\n\n  set lobPrefetchSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"lobPrefetchSize\");\n    settings.lobPrefetchSize = value;\n  },\n\n  set maxRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"maxRows\");\n    settings.maxRows = value;\n  },\n\n  set outFormat(value) {\n    if (value !== constants.OUT_FORMAT_ARRAY &&\n        value !== constants.OUT_FORMAT_OBJECT) {\n      errors.throwErr(errors.ERR_INVALID_PROPERTY_VALUE, \"outFormat\");\n    }\n    settings.outFormat = value;\n  },\n\n  set poolIncrement(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolIncrement\");\n    settings.poolIncrement = value;\n  },\n\n  set poolMax(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMax\");\n    settings.poolMax = value;\n  },\n\n  set poolMaxPerShard(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolMaxPerShard\");\n    settings.poolMaxPerShard = value;\n  },\n\n  set poolMin(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMin\");\n    settings.poolMin = value;\n  },\n\n  set poolPingInterval(value) {\n    errors.assertPropValue(Number.isInteger(value) && value < 2 ** 31 &&\n        value >= (-2) ** 31, \"poolPingInterval\");\n    settings.poolPingInterval = value;\n  },\n\n  set poolPingTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolPingTimeout\");\n    settings.poolPingTimeout = value;\n  },\n\n  set poolTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolTimeout\");\n    settings.poolTimeout = value;\n  },\n\n  set prefetchRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"prefetchRows\");\n    settings.prefetchRows = value;\n  },\n\n  set stmtCacheSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"stmtCacheSize\");\n    settings.stmtCacheSize = value;\n  },\n\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}