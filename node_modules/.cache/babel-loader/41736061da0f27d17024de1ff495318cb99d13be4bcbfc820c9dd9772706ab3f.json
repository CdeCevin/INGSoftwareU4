{"ast":null,"code":"// Copyright (c) 2019, 2024, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Lob = require('./lob.js');\nconst impl = require('./impl');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst util = require('util');\n\n//---------------------------------------------------------------------------\n// validatePropertyValue\n//\n// Validate the value based on metadata.\n// For object type, metaData corresponds to the attribute which is set.\n// For collection type, metaData corresponds to element in the collection.\n//---------------------------------------------------------------------------\nfunction validatePropertyValue(objType, metaData, value, index) {\n  let valueLen,\n    lengthErr = false;\n  if (value) {\n    switch (metaData.type) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_CHAR:\n        valueLen = Buffer.byteLength(value);\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      case types.DB_TYPE_RAW:\n        valueLen = value.length;\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      default:\n        break;\n    }\n    if (lengthErr) {\n      if (index !== undefined) {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM, index, objType.fqn, valueLen, metaData.maxSize);\n      } else {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR, metaData.name, objType.fqn, valueLen, metaData.maxSize);\n      }\n    }\n  }\n}\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass BaseDbObject {\n  //---------------------------------------------------------------------------\n  // _getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  _getAttrValue(attr) {\n    const value = this._impl.getAttrValue(attr);\n    return this._transformValueOut(value, attr.typeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // _setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  _setAttrValue(attr, value) {\n    const info = {\n      fqn: this._objType.fqn,\n      attrName: attr.name,\n      type: attr.type,\n      typeClass: attr.typeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, attr, value);\n    this._impl.setAttrValue(attr, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _toPojo()\n  //\n  // Returns the database object as a plain Javascript object.\n  //---------------------------------------------------------------------------\n  _toPojo() {\n    if (this.isCollection) {\n      const result = this.getValues();\n      if (this.elementType === types.DB_TYPE_OBJECT) {\n        for (let i = 0; i < result.length; i++) {\n          result[i] = result[i]._toPojo();\n        }\n      }\n      return result;\n    }\n    const result = {};\n    for (const name in this.attributes) {\n      let value = this[name];\n      if (value instanceof BaseDbObject) {\n        value = value._toPojo();\n      }\n      result[name] = value;\n    }\n    return result;\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformValueOut()\n  //\n  // Transforms a value going out to the caller from the implementation.\n  //---------------------------------------------------------------------------\n  _transformValueOut(value, cls) {\n    let outValue = value;\n    if (value instanceof impl.LobImpl) {\n      outValue = new Lob();\n      outValue._setup(value, true);\n    } else if (value instanceof impl.DbObjectImpl) {\n      outValue = Object.create(cls.prototype);\n      outValue._impl = value;\n      if (outValue.isCollection) {\n        outValue = new Proxy(outValue, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    errors.assertArgCount(arguments, 1, 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    let index = this._impl.getLastIndex();\n    if (index) {\n      index = index + 1; // element will be appended at index + 1.\n    } else {\n      index = 0; // undefined for initial append, so set it to 0\n    }\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.append(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // attributes\n  //\n  // Property for the attributes stored on the object type.\n  //---------------------------------------------------------------------------\n  get attributes() {\n    if (!this._attributes) {\n      const implAttrs = this._objType.attributes || [];\n      const attrs = {};\n      for (let i = 0; i < implAttrs.length; i++) {\n        const implAttr = implAttrs[i];\n        const attr = {\n          type: implAttr.type,\n          typeName: implAttr.typeName\n        };\n        if (implAttr.typeClass) {\n          attr.typeClass = implAttr.typeClass;\n        }\n        attrs[implAttr.name] = attr;\n      }\n      this._attributes = attrs;\n    }\n    return this._attributes;\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.deleteElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // elementType\n  //\n  // Property for the element type, if the database object type is a\n  // collection. It will be one of the DB_TYPE_ constants.\n  //---------------------------------------------------------------------------\n  get elementType() {\n    return this._objType.elementType;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeClass\n  //\n  // Property for the element type class, if the database object type is a\n  // collection and the elements in the collection refer to database objects.\n  //---------------------------------------------------------------------------\n  get elementTypeClass() {\n    return this._objType.elementTypeClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeName\n  //\n  // Property for the element type name, if the database object type is a\n  // collection.\n  //---------------------------------------------------------------------------\n  get elementTypeName() {\n    return this._objType.elementTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // fqn\n  //\n  // Property for the fully qualified name of the database object type in the\n  // form: <schema>.<name>.\n  //---------------------------------------------------------------------------\n  get fqn() {\n    return this._objType.fqn;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const value = this._impl.getElement(index);\n    return this._transformValueOut(value, this.elementTypeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns an array of the keys of the collection.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getKeys();\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in the collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getFirstIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in the collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getLastIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in the collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getNextIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in the collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getPrevIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the elements in a collection.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.assertArgCount(arguments, 0, 0);\n    const values = this._impl.getValues();\n    for (let i = 0; i < values.length; i++) {\n      values[i] = this._transformValueOut(values[i], this.elementTypeClass);\n    }\n    return values;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns a boolean indicating if an element exists at the specified index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.hasElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // isCollection\n  //\n  // Property indicating if the object is a collection or not.\n  //---------------------------------------------------------------------------\n  get isCollection() {\n    return this._objType.isCollection;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the database object type.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._objType.name;\n  }\n\n  //---------------------------------------------------------------------------\n  // schema\n  //\n  // Property for the schema of the database object type.\n  //---------------------------------------------------------------------------\n  get schema() {\n    return this._objType.schema;\n  }\n\n  //---------------------------------------------------------------------------\n  // packageName\n  //\n  // Property for the packageName of the database object type.\n  //---------------------------------------------------------------------------\n  get packageName() {\n    return this._objType.packageName;\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element in the collection at the specified index to the given\n  // value.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.setElement(index, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trims the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(numToTrim) && numToTrim >= 0, 1);\n    this._impl.trim(numToTrim);\n  }\n\n  // custom inspection routine\n  [util.inspect.custom](depth, options) {\n    return '[' + this.fqn + '] ' + util.inspect(this._toPojo(), options);\n  }\n  [Symbol.iterator]() {\n    if (this.isCollection) {\n      const values = this.getValues();\n      return values[Symbol.iterator]();\n    }\n    throw TypeError(\"obj is not iterable\");\n  }\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return NaN;\n      default:\n        return '[' + this.fqn + '] ' + util.inspect(this._toPojo(), {});\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return this.fqn;\n  }\n  toJSON() {\n    return this._toPojo();\n  }\n\n  //---------------------------------------------------------------------------\n  // toMap()\n  //\n  // Returns the Map object where the collection’s indexes are the keys and\n  // the elements are its values.\n  //---------------------------------------------------------------------------\n  toMap() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (!this.isCollection) {\n      errors.throwErr(errors.ERR_OBJECT_IS_NOT_A_COLLECTION, this.name);\n    }\n    const result = new Map();\n    this.getKeys().forEach(element => {\n      result.set(element, this.getElement(element));\n    });\n    return result;\n  }\n}\n\n// method for transforming the error\nfunction transformErr(func) {\n  return function () {\n    try {\n      return func.apply(this, arguments);\n    } catch (err) {\n      throw errors.transformErr(err, errors.transformErr);\n    }\n  };\n}\n\n// method for wrapping the functions so that any errors thrown are transformed\nfunction wrapFns(proto) {\n  for (let i = 1; i < arguments.length; i++) {\n    const name = arguments[i];\n    proto[name] = transformErr(proto[name]);\n  }\n}\nwrapFns(BaseDbObject.prototype, \"_getAttrValue\", \"_setAttrValue\", \"append\", \"deleteElement\", \"getElement\", \"getKeys\", \"getFirstIndex\", \"getLastIndex\", \"getNextIndex\", \"getPrevIndex\", \"getValues\", \"toMap\", \"hasElement\", \"setElement\", \"trim\");\n\n// define proxy handler used for collections\nBaseDbObject._collectionProxyHandler = {\n  deleteProperty(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return target.deleteElement(index);\n      }\n    }\n    return delete target[prop];\n  },\n  get(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return target.getElement(index);\n      }\n    }\n    const value = target[prop];\n    if (typeof value === 'function') {\n      return value.bind(target);\n    }\n    return value;\n  },\n  set(target, prop, value) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        target.setElement(index, value);\n        return true;\n      }\n    }\n    target[prop] = value;\n    return true;\n  }\n};\nmodule.exports = BaseDbObject;\n\n// load this after the module exports are set so that it is available\nconst transformer = require('./transformer.js');","map":{"version":3,"names":["Lob","require","impl","errors","types","util","validatePropertyValue","objType","metaData","value","index","valueLen","lengthErr","type","DB_TYPE_VARCHAR","DB_TYPE_NVARCHAR","DB_TYPE_NCHAR","DB_TYPE_CHAR","Buffer","byteLength","maxSize","DB_TYPE_RAW","length","undefined","throwErr","ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM","fqn","ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR","name","BaseDbObject","_getAttrValue","attr","_impl","getAttrValue","_transformValueOut","typeClass","_setAttrValue","info","_objType","attrName","options","allowArray","transformer","transformValueIn","setAttrValue","_toPojo","isCollection","result","getValues","elementType","DB_TYPE_OBJECT","i","attributes","cls","outValue","LobImpl","_setup","DbObjectImpl","Object","create","prototype","Proxy","_collectionProxyHandler","append","assertArgCount","arguments","elementTypeClass","getLastIndex","elementTypeInfo","_attributes","implAttrs","attrs","implAttr","typeName","deleteElement","assertParamValue","Number","isInteger","elementTypeName","getElement","getKeys","getFirstIndex","getNextIndex","getPrevIndex","values","hasElement","schema","packageName","setElement","trim","numToTrim","inspect","custom","depth","Symbol","iterator","TypeError","toPrimitive","hint","NaN","toStringTag","toJSON","toMap","ERR_OBJECT_IS_NOT_A_COLLECTION","Map","forEach","element","set","transformErr","func","apply","err","wrapFns","proto","deleteProperty","target","prop","isNaN","get","bind","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/dbObject.js"],"sourcesContent":["// Copyright (c) 2019, 2024, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Lob = require('./lob.js');\nconst impl = require('./impl');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst util = require('util');\n\n//---------------------------------------------------------------------------\n// validatePropertyValue\n//\n// Validate the value based on metadata.\n// For object type, metaData corresponds to the attribute which is set.\n// For collection type, metaData corresponds to element in the collection.\n//---------------------------------------------------------------------------\nfunction validatePropertyValue(objType, metaData, value, index) {\n  let valueLen, lengthErr = false;\n\n  if (value) {\n    switch (metaData.type) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_CHAR:\n        valueLen = Buffer.byteLength(value);\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      case types.DB_TYPE_RAW:\n        valueLen = value.length;\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      default:\n        break;\n    }\n    if (lengthErr) {\n      if (index !== undefined) {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM,\n          index, objType.fqn, valueLen, metaData.maxSize);\n      } else {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR,\n          metaData.name, objType.fqn, valueLen, metaData.maxSize);\n      }\n    }\n  }\n}\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass BaseDbObject {\n\n  //---------------------------------------------------------------------------\n  // _getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  _getAttrValue(attr) {\n    const value = this._impl.getAttrValue(attr);\n    return this._transformValueOut(value, attr.typeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // _setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  _setAttrValue(attr, value) {\n    const info = {\n      fqn: this._objType.fqn,\n      attrName: attr.name,\n      type: attr.type,\n      typeClass: attr.typeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, attr, value);\n    this._impl.setAttrValue(attr, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _toPojo()\n  //\n  // Returns the database object as a plain Javascript object.\n  //---------------------------------------------------------------------------\n  _toPojo() {\n    if (this.isCollection) {\n      const result = this.getValues();\n      if (this.elementType === types.DB_TYPE_OBJECT) {\n        for (let i = 0; i < result.length; i++) {\n          result[i] = result[i]._toPojo();\n        }\n      }\n      return (result);\n    }\n    const result = {};\n    for (const name in this.attributes) {\n      let value = this[name];\n      if (value instanceof BaseDbObject) {\n        value = value._toPojo();\n      }\n      result[name] = value;\n    }\n    return (result);\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformValueOut()\n  //\n  // Transforms a value going out to the caller from the implementation.\n  //---------------------------------------------------------------------------\n  _transformValueOut(value, cls) {\n    let outValue = value;\n    if (value instanceof impl.LobImpl) {\n      outValue = new Lob();\n      outValue._setup(value, true);\n    } else if (value instanceof impl.DbObjectImpl) {\n      outValue = Object.create(cls.prototype);\n      outValue._impl = value;\n      if (outValue.isCollection) {\n        outValue = new Proxy(outValue, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    errors.assertArgCount(arguments, 1, 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    let index = this._impl.getLastIndex();\n    if (index) {\n      index = index + 1; // element will be appended at index + 1.\n    } else {\n      index = 0; // undefined for initial append, so set it to 0\n    }\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.append(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // attributes\n  //\n  // Property for the attributes stored on the object type.\n  //---------------------------------------------------------------------------\n  get attributes() {\n    if (!this._attributes) {\n      const implAttrs = this._objType.attributes || [];\n      const attrs = {};\n      for (let i = 0; i < implAttrs.length; i++) {\n        const implAttr = implAttrs[i];\n        const attr = {\n          type: implAttr.type,\n          typeName: implAttr.typeName\n        };\n        if (implAttr.typeClass) {\n          attr.typeClass = implAttr.typeClass;\n        }\n        attrs[implAttr.name] = attr;\n      }\n      this._attributes = attrs;\n    }\n    return this._attributes;\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.deleteElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // elementType\n  //\n  // Property for the element type, if the database object type is a\n  // collection. It will be one of the DB_TYPE_ constants.\n  //---------------------------------------------------------------------------\n  get elementType() {\n    return this._objType.elementType;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeClass\n  //\n  // Property for the element type class, if the database object type is a\n  // collection and the elements in the collection refer to database objects.\n  //---------------------------------------------------------------------------\n  get elementTypeClass() {\n    return this._objType.elementTypeClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeName\n  //\n  // Property for the element type name, if the database object type is a\n  // collection.\n  //---------------------------------------------------------------------------\n  get elementTypeName() {\n    return this._objType.elementTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // fqn\n  //\n  // Property for the fully qualified name of the database object type in the\n  // form: <schema>.<name>.\n  //---------------------------------------------------------------------------\n  get fqn() {\n    return this._objType.fqn;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const value = this._impl.getElement(index);\n    return this._transformValueOut(value, this.elementTypeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns an array of the keys of the collection.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getKeys();\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in the collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getFirstIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in the collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getLastIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in the collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getNextIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in the collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getPrevIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the elements in a collection.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.assertArgCount(arguments, 0, 0);\n    const values = this._impl.getValues();\n    for (let i = 0; i < values.length; i++) {\n      values[i] = this._transformValueOut(values[i], this.elementTypeClass);\n    }\n    return values;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns a boolean indicating if an element exists at the specified index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.hasElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // isCollection\n  //\n  // Property indicating if the object is a collection or not.\n  //---------------------------------------------------------------------------\n  get isCollection() {\n    return this._objType.isCollection;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the database object type.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._objType.name;\n  }\n\n  //---------------------------------------------------------------------------\n  // schema\n  //\n  // Property for the schema of the database object type.\n  //---------------------------------------------------------------------------\n  get schema() {\n    return this._objType.schema;\n  }\n\n  //---------------------------------------------------------------------------\n  // packageName\n  //\n  // Property for the packageName of the database object type.\n  //---------------------------------------------------------------------------\n  get packageName() {\n    return this._objType.packageName;\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element in the collection at the specified index to the given\n  // value.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.setElement(index, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trims the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(numToTrim) && numToTrim >= 0, 1);\n    this._impl.trim(numToTrim);\n  }\n\n  // custom inspection routine\n  [util.inspect.custom](depth, options) {\n    return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), options));\n  }\n\n  [Symbol.iterator]() {\n    if (this.isCollection) {\n      const values = this.getValues();\n      return (values[Symbol.iterator]());\n    }\n    throw TypeError(\"obj is not iterable\");\n  }\n\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return (NaN);\n      default:\n        return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), {}));\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return (this.fqn);\n  }\n\n  toJSON() {\n    return (this._toPojo());\n  }\n\n  //---------------------------------------------------------------------------\n  // toMap()\n  //\n  // Returns the Map object where the collection’s indexes are the keys and\n  // the elements are its values.\n  //---------------------------------------------------------------------------\n  toMap() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (!this.isCollection) {\n      errors.throwErr(errors.ERR_OBJECT_IS_NOT_A_COLLECTION,\n        this.name);\n    }\n    const result = new Map();\n    this.getKeys().forEach(element => {\n      result.set(element, this.getElement(element));\n    });\n    return result;\n  }\n\n}\n\n// method for transforming the error\nfunction transformErr(func) {\n  return function() {\n    try {\n      return func.apply(this, arguments);\n    } catch (err) {\n      throw errors.transformErr(err, errors.transformErr);\n    }\n  };\n}\n\n// method for wrapping the functions so that any errors thrown are transformed\nfunction wrapFns(proto) {\n  for (let i = 1; i < arguments.length; i++) {\n    const name = arguments[i];\n    proto[name] = transformErr(proto[name]);\n  }\n}\n\nwrapFns(BaseDbObject.prototype,\n  \"_getAttrValue\",\n  \"_setAttrValue\",\n  \"append\",\n  \"deleteElement\",\n  \"getElement\",\n  \"getKeys\",\n  \"getFirstIndex\",\n  \"getLastIndex\",\n  \"getNextIndex\",\n  \"getPrevIndex\",\n  \"getValues\",\n  \"toMap\",\n  \"hasElement\",\n  \"setElement\",\n  \"trim\"\n);\n\n// define proxy handler used for collections\nBaseDbObject._collectionProxyHandler = {\n\n  deleteProperty(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.deleteElement(index));\n      }\n    }\n    return (delete target[prop]);\n  },\n\n  get(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.getElement(index));\n      }\n    }\n    const value = target[prop];\n    if (typeof value === 'function') {\n      return (value.bind(target));\n    }\n    return (value);\n  },\n\n  set(target, prop, value) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        target.setElement(index, value);\n        return (true);\n      }\n    }\n    target[prop] = value;\n    return (true);\n  }\n\n};\n\nmodule.exports = BaseDbObject;\n\n// load this after the module exports are set so that it is available\nconst transformer = require('./transformer.js');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}