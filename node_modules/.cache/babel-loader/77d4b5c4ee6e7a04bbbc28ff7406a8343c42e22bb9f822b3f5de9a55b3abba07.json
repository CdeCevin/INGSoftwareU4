{"ast":null,"code":"// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nclass base {\n  constructor(url) {\n    const params = new URLSearchParams(url);\n    this.paramMap = new URLSearchParams([...params].map(([key, value]) => [key.toLowerCase(), value])); //parse the extended part and store parameters in Map\n  }\n\n  /**\n  * Sets precedence for different parameters in cloudConfig/userConfig\n  * @param {cloudConfig} object - object retreived from cloud\n  * @param {userConfig} object -  user input Object\n  */\n  modifyOptionsPrecedence(cloudConfig, userConfig) {\n    // create a copy of userConfig object\n    userConfig = {\n      ...userConfig\n    };\n    if (!userConfig.user) userConfig.user = cloudConfig.user;\n    if (!userConfig.password) userConfig.password = cloudConfig.password;\n    if (cloudConfig.connectString) {\n      userConfig.connectString = cloudConfig.connectString;\n      userConfig.connectionString = undefined;\n    }\n    if (cloudConfig.poolMin) userConfig.poolMin = cloudConfig.poolMin;\n    if (cloudConfig.poolMax) userConfig.poolMax = cloudConfig.poolMax;\n    if (cloudConfig.poolIncrement) userConfig.poolIncrement = cloudConfig.poolIncrement;\n    if (cloudConfig.poolTimeout) userConfig.poolTimeout = cloudConfig.poolTimeout;\n    if (cloudConfig.poolPingInterval) userConfig.poolPingInterval = cloudConfig.poolPingInterval;\n    if (cloudConfig.poolPingTimeout) userConfig.poolPingTimeout = cloudConfig.poolPingTimeout;\n    if (cloudConfig.stmtCacheSize) userConfig.stmtCacheSize = cloudConfig.stmtCacheSize;\n    if (cloudConfig.prefetchRows) userConfig.prefetchRows = cloudConfig.prefetchRows;\n    if (cloudConfig.lobPrefetch) userConfig.lobPrefetch = cloudConfig.lobPrefetch;\n    return userConfig;\n  }\n\n  //---------------------------------------------------------------------------\n  // _addParam()\n  // Adds key,value pairs to the Map\n  //---------------------------------------------------------------------------\n  _addParam(key, value) {\n    const aliasKeyName = key.toLowerCase();\n    this.paramMap.set(aliasKeyName, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _parsePwd()\n  // Parse password which is in url format\n  // “uri”:“https://mykeyvault.vault.azure.net/secrets/secretkey”}\n  //---------------------------------------------------------------------------\n  _parsePwd(str) {\n    const vault_uri = new RegExp(\"(?<vault_url>https://[A-Za-z0-9._-]+)/secrets/(?<secretKey>[A-Za-z][A-Za-z0-9-]*)$\", 'g');\n    const vault_detail = [];\n    for (const match of str.matchAll(vault_uri)) {\n      vault_detail[0] = match.groups.vault_url;\n      vault_detail[1] = match.groups.secretKey;\n    }\n    return vault_detail;\n  }\n}\nmodule.exports = {\n  base\n};","map":{"version":3,"names":["base","constructor","url","params","URLSearchParams","paramMap","map","key","value","toLowerCase","modifyOptionsPrecedence","cloudConfig","userConfig","user","password","connectString","connectionString","undefined","poolMin","poolMax","poolIncrement","poolTimeout","poolPingInterval","poolPingTimeout","stmtCacheSize","prefetchRows","lobPrefetch","_addParam","aliasKeyName","set","_parsePwd","str","vault_uri","RegExp","vault_detail","match","matchAll","groups","vault_url","secretKey","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/configProviders/base.js"],"sourcesContent":["// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nclass base {\n  constructor(url) {\n    const params = new URLSearchParams(url);\n    this.paramMap = new URLSearchParams([...params].map(([key, value]) => [key.toLowerCase(), value])); //parse the extended part and store parameters in Map\n  }\n\n  /**\n  * Sets precedence for different parameters in cloudConfig/userConfig\n  * @param {cloudConfig} object - object retreived from cloud\n  * @param {userConfig} object -  user input Object\n  */\n  modifyOptionsPrecedence(cloudConfig, userConfig) {\n    // create a copy of userConfig object\n    userConfig = { ...userConfig };\n    if (!userConfig.user)\n      userConfig.user = cloudConfig.user;\n    if (!userConfig.password)\n      userConfig.password = cloudConfig.password;\n    if (cloudConfig.connectString) {\n      userConfig.connectString = cloudConfig.connectString;\n      userConfig.connectionString = undefined;\n    }\n    if (cloudConfig.poolMin)\n      userConfig.poolMin = cloudConfig.poolMin;\n    if (cloudConfig.poolMax)\n      userConfig.poolMax = cloudConfig.poolMax;\n    if (cloudConfig.poolIncrement)\n      userConfig.poolIncrement = cloudConfig.poolIncrement;\n    if (cloudConfig.poolTimeout)\n      userConfig.poolTimeout = cloudConfig.poolTimeout;\n    if (cloudConfig.poolPingInterval)\n      userConfig.poolPingInterval = cloudConfig.poolPingInterval;\n    if (cloudConfig.poolPingTimeout)\n      userConfig.poolPingTimeout = cloudConfig.poolPingTimeout;\n    if (cloudConfig.stmtCacheSize)\n      userConfig.stmtCacheSize = cloudConfig.stmtCacheSize;\n    if (cloudConfig.prefetchRows)\n      userConfig.prefetchRows = cloudConfig.prefetchRows;\n    if (cloudConfig.lobPrefetch)\n      userConfig.lobPrefetch = cloudConfig.lobPrefetch;\n\n    return userConfig;\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _addParam()\n  // Adds key,value pairs to the Map\n  //---------------------------------------------------------------------------\n  _addParam(key, value) {\n    const aliasKeyName = key.toLowerCase();\n    this.paramMap.set(aliasKeyName, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _parsePwd()\n  // Parse password which is in url format\n  // “uri”:“https://mykeyvault.vault.azure.net/secrets/secretkey”}\n  //---------------------------------------------------------------------------\n  _parsePwd(str) {\n    const vault_uri = new RegExp(\"(?<vault_url>https://[A-Za-z0-9._-]+)/secrets/(?<secretKey>[A-Za-z][A-Za-z0-9-]*)$\", 'g');\n    const vault_detail = [];\n    for (const match of str.matchAll(vault_uri)) {\n      vault_detail[0] = match.groups.vault_url;\n      vault_detail[1] = match.groups.secretKey;\n    }\n    return vault_detail;\n  }\n\n}\nmodule.exports = {base};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}