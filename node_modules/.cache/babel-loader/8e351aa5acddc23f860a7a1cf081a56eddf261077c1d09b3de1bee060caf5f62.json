{"ast":null,"code":"import React from 'react';\nfunction ReporteGral() {\n  const express = require('express');\n  const oracledb = require('oracledb');\n  const cors = require('cors');\n  const app = express();\n  app.use(cors());\n  app.use(express.json());\n  const dbConfig = {\n    user: 'Cevin',\n    password: '213233963Y',\n    connectString: 'localhost:1521/XE'\n  };\n\n  // Endpoint para obtener ventas mensuales\n  app.get('/api/ventas-mensuales', async (req, res) => {\n    let connection;\n    try {\n      // Intentar conectar a la base de datos\n      connection = await oracledb.getConnection(dbConfig);\n      console.log(\"Connected to the database\");\n\n      // Ejecutar el procedimiento almacenado para obtener ventas mensuales\n      const result = await connection.execute(`BEGIN ObtenerVentasMensuales(:p_Anio, :p_Mes, :total_ventas); END;`, {\n        p_Anio: new Date().getFullYear(),\n        // Año actual\n        p_Mes: new Date().getMonth() + 1,\n        // Mes actual (de 0 a 11, por eso sumamos 1)\n        total_ventas: {\n          dir: oracledb.BIND_OUT,\n          type: oracledb.NUMBER\n        } // Salida para las ventas totales\n      });\n\n      // Verificar si se obtuvo un valor correcto\n      console.log(\"Total ventas:\", result.outBinds.total_ventas); // Imprimir el valor de ventas totales en consola\n      res.json({\n        totalVentas: result.outBinds.total_ventas\n      }); // Enviar respuesta al cliente\n    } catch (err) {\n      console.error(\"Error connecting to the database or retrieving data:\", err);\n      res.status(500).send('Error retrieving data');\n    } finally {\n      if (connection) {\n        await connection.close(); // Cerrar la conexión\n        console.log(\"Connection closed\");\n      }\n    }\n  });\n\n  // Endpoint para obtener los productos más vendidos\n  app.get('/api/top-productos', async (req, res) => {\n    let connection;\n    try {\n      connection = await oracledb.getConnection(dbConfig);\n      console.log(\"Connected to the database\");\n      const result = await connection.execute(`BEGIN ObtenerTopProductos(:cursor_resultado); END;`, {\n        cursor_resultado: {\n          type: oracledb.CURSOR,\n          dir: oracledb.BIND_OUT\n        }\n      });\n      const resultSet = result.outBinds.cursor_resultado;\n      const rows = [];\n      let row;\n      while (row = await resultSet.getRow()) {\n        rows.push(row);\n      }\n      console.log(\"Top productos obtenidos:\", rows); // Imprimir los productos más vendidos\n      res.json(rows);\n    } catch (err) {\n      console.error(\"Error retrieving top products:\", err);\n      res.status(500).send('Error retrieving data');\n    } finally {\n      if (connection) {\n        await connection.close();\n        console.log(\"Connection closed\");\n      }\n    }\n  });\n\n  // Endpoint para obtener los productos menos vendidos\n  app.get('/api/menos-vendidos', async (req, res) => {\n    let connection;\n    try {\n      connection = await oracledb.getConnection(dbConfig);\n      console.log(\"Connected to the database\");\n      const result = await connection.execute(`BEGIN ObtenerProductosMenosVendidos(:cursor_resultado); END;`, {\n        cursor_resultado: {\n          type: oracledb.CURSOR,\n          dir: oracledb.BIND_OUT\n        }\n      });\n      const resultSet = result.outBinds.cursor_resultado;\n      const rows = [];\n      let row;\n      while (row = await resultSet.getRow()) {\n        rows.push(row);\n      }\n      console.log(\"Productos menos vendidos obtenidos:\", rows); // Imprimir los productos menos vendidos\n      res.json(rows);\n    } catch (err) {\n      console.error(\"Error retrieving least sold products:\", err);\n      res.status(500).send('Error retrieving data');\n    } finally {\n      if (connection) {\n        await connection.close();\n        console.log(\"Connection closed\");\n      }\n    }\n  });\n\n  // Iniciar el servidor en el puerto 3001\n  const port = 3001;\n  app.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });\n}\n_c = ReporteGral;\nexport default ReporteGral;\nvar _c;\n$RefreshReg$(_c, \"ReporteGral\");","map":{"version":3,"names":["React","ReporteGral","express","require","oracledb","cors","app","use","json","dbConfig","user","password","connectString","get","req","res","connection","getConnection","console","log","result","execute","p_Anio","Date","getFullYear","p_Mes","getMonth","total_ventas","dir","BIND_OUT","type","NUMBER","outBinds","totalVentas","err","error","status","send","close","cursor_resultado","CURSOR","resultSet","rows","row","getRow","push","port","listen","_c","$RefreshReg$"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/src/Componentes/Reportes/ReporteGral.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction ReporteGral() {\r\n\r\n    \r\nconst express = require('express');\r\nconst oracledb = require('oracledb');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst dbConfig = {\r\n  user: 'Cevin',\r\n  password: '213233963Y',\r\n  connectString: 'localhost:1521/XE',\r\n};\r\n\r\n// Endpoint para obtener ventas mensuales\r\napp.get('/api/ventas-mensuales', async (req, res) => {\r\n  let connection;\r\n  try {\r\n    // Intentar conectar a la base de datos\r\n    connection = await oracledb.getConnection(dbConfig);\r\n    console.log(\"Connected to the database\");\r\n\r\n    // Ejecutar el procedimiento almacenado para obtener ventas mensuales\r\n    const result = await connection.execute(\r\n      `BEGIN ObtenerVentasMensuales(:p_Anio, :p_Mes, :total_ventas); END;`,\r\n      {\r\n        p_Anio: new Date().getFullYear(),  // Año actual\r\n        p_Mes: new Date().getMonth() + 1,  // Mes actual (de 0 a 11, por eso sumamos 1)\r\n        total_ventas: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER }  // Salida para las ventas totales\r\n      }\r\n    );\r\n\r\n    // Verificar si se obtuvo un valor correcto\r\n    console.log(\"Total ventas:\", result.outBinds.total_ventas); // Imprimir el valor de ventas totales en consola\r\n    res.json({ totalVentas: result.outBinds.total_ventas });    // Enviar respuesta al cliente\r\n  } catch (err) {\r\n    console.error(\"Error connecting to the database or retrieving data:\", err);\r\n    res.status(500).send('Error retrieving data');\r\n  } finally {\r\n    if (connection) {\r\n      await connection.close();  // Cerrar la conexión\r\n      console.log(\"Connection closed\");\r\n    }\r\n  }\r\n});\r\n\r\n// Endpoint para obtener los productos más vendidos\r\napp.get('/api/top-productos', async (req, res) => {\r\n  let connection;\r\n  try {\r\n    connection = await oracledb.getConnection(dbConfig);\r\n    console.log(\"Connected to the database\");\r\n\r\n    const result = await connection.execute(\r\n      `BEGIN ObtenerTopProductos(:cursor_resultado); END;`,\r\n      { cursor_resultado: { type: oracledb.CURSOR, dir: oracledb.BIND_OUT } }\r\n    );\r\n    \r\n    const resultSet = result.outBinds.cursor_resultado;\r\n    const rows = [];\r\n    let row;\r\n    while ((row = await resultSet.getRow())) {\r\n      rows.push(row);\r\n    }\r\n\r\n    console.log(\"Top productos obtenidos:\", rows); // Imprimir los productos más vendidos\r\n    res.json(rows);\r\n  } catch (err) {\r\n    console.error(\"Error retrieving top products:\", err);\r\n    res.status(500).send('Error retrieving data');\r\n  } finally {\r\n    if (connection) {\r\n      await connection.close();\r\n      console.log(\"Connection closed\");\r\n    }\r\n  }\r\n});\r\n\r\n// Endpoint para obtener los productos menos vendidos\r\napp.get('/api/menos-vendidos', async (req, res) => {\r\n  let connection;\r\n  try {\r\n    connection = await oracledb.getConnection(dbConfig);\r\n    console.log(\"Connected to the database\");\r\n\r\n    const result = await connection.execute(\r\n      `BEGIN ObtenerProductosMenosVendidos(:cursor_resultado); END;`,\r\n      { cursor_resultado: { type: oracledb.CURSOR, dir: oracledb.BIND_OUT } }\r\n    );\r\n\r\n    const resultSet = result.outBinds.cursor_resultado;\r\n    const rows = [];\r\n    let row;\r\n    while ((row = await resultSet.getRow())) {\r\n      rows.push(row);\r\n    }\r\n\r\n    console.log(\"Productos menos vendidos obtenidos:\", rows); // Imprimir los productos menos vendidos\r\n    res.json(rows);\r\n  } catch (err) {\r\n    console.error(\"Error retrieving least sold products:\", err);\r\n    res.status(500).send('Error retrieving data');\r\n  } finally {\r\n    if (connection) {\r\n      await connection.close();\r\n      console.log(\"Connection closed\");\r\n    }\r\n  }\r\n});\r\n\r\n// Iniciar el servidor en el puerto 3001\r\nconst port = 3001;\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n\r\n\r\n}\r\n\r\nexport default ReporteGral;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}