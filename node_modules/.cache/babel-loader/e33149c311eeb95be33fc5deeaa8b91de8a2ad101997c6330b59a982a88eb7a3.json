{"ast":null,"code":"// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nlet AppConfigurationClient;\nlet ClientSecretCredential, ClientCertificateCredential, ChainedTokenCredential, ManagedIdentityCredential, EnvironmentCredential;\nconst errors = require(\"../errors.js\");\nconst {\n  base\n} = require(\"./base.js\");\nclass AzureProvider extends base {\n  constructor(provider_arg, urlExtendedPart) {\n    super(urlExtendedPart);\n    this._addParam(\"appconfigname\", provider_arg);\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Require/import modules from azure\n  //---------------------------------------------------------------------------\n  init() {\n    ({\n      AppConfigurationClient\n    } = require(\"@azure/app-configuration\"));\n    ({\n      ClientSecretCredential,\n      ClientCertificateCredential,\n      ChainedTokenCredential,\n      ManagedIdentityCredential,\n      EnvironmentCredential\n    } = require(\"@azure/identity\"));\n  }\n\n  //---------------------------------------------------------------------------\n  // _withChainedTokenCredential()\n  //\n  // Use of ChainedTokenCredential class which provides the ability to link\n  // together multiple credential instances to be tried sequentially when authenticating.\n  // Default authentication to try when no authentication parameter is given by the user\n  //---------------------------------------------------------------------------\n  _withChainedTokenCredential() {\n    const tokens = [];\n    if (this.paramMap.get(\"azure_client_secret\")) tokens.push(new ClientSecretCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_secret\")));\n    if (this.paramMap.get(\"azure_client_certificate_path\")) tokens.push(new ClientCertificateCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_certificate_path\")));\n    if (this.paramMap.get('azure_managed_identity_client_id')) tokens.push(this.paramMap.get('azure_managed_identity_client_id'));\n    tokens.push(new EnvironmentCredential());\n    const credential = new ChainedTokenCredential(...tokens);\n    return credential;\n  }\n\n  //---------------------------------------------------------------------------\n  // _returnCredential()\n  //\n  // Returns credential to access Azure Config Store on the basis of\n  // authentication parameters given by the user.\n  //---------------------------------------------------------------------------\n  _returnCredential() {\n    let auth = null;\n    if (this.paramMap.get('authentication')) {\n      auth = this.paramMap.get('authentication').toUpperCase();\n    }\n    if (auth && !(auth == 'AZURE_DEFAULT')) {\n      // do the given authentication\n      if (auth == 'AZURE_SERVICE_PRINCIPAL') {\n        if (this.paramMap.get(\"azure_client_certificate_path\")) return new ClientCertificateCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_certificate_path\"));else if (this.paramMap.get(\"azure_client_secret\")) return new ClientSecretCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_secret\"));else errors.throwErr(errors.ERR_AZURE_SERVICE_PRINCIPAL_AUTH_FAILED);\n      } else if (auth == 'AZURE_MANAGED_IDENTITY') {\n        return new ManagedIdentityCredential(this.paramMap.get('azure_managed_identity_client_id'));\n      } else {\n        errors.throwErr(errors.ERR_AZURE_CONFIG_PROVIDER_AUTH_FAILED, auth);\n      }\n    } else {\n      //return default token credential\n      return this._withChainedTokenCredential();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConfigurationSetting()\n  //\n  // Get configuration setting from the config provider given a key\n  //and an optional label\n  //---------------------------------------------------------------------------\n  async _getConfigurationSetting(client, key, label) {\n    return await client.getConfigurationSetting({\n      key: key,\n      label: label\n    });\n  }\n  async returnConfig() {\n    const configObject = {};\n    const label = this.paramMap.get(\"label\");\n    const credential = this._returnCredential();\n    // azure config store\n    const client = new AppConfigurationClient(\"https://\" + this.paramMap.get(\"appconfigname\"),\n    // ex: <https://<your appconfig resource>.azconfig.io>\n    credential);\n    // retrieve connect_description\n    configObject.connectString = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'connect_descriptor', label)).value;\n\n    // retrieve node-oracledb parameters\n    try {\n      const params = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'node-oracledb', label)).value;\n      const obj = JSON.parse(params);\n      for (const key in obj) {\n        var val = obj[key];\n        configObject[key] = val;\n      }\n    } catch {\n      configObject['node-oracledb'] = null;\n    }\n    try {\n      // retrieve user\n      configObject.user = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'user', label)).value;\n    } catch {\n      configObject.user = null;\n    }\n    //retrieve password\n    let pwdJson = null;\n    try {\n      pwdJson = await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'password', label);\n    } catch {\n      configObject.password = null;\n    }\n    if (pwdJson) {\n      let obj;\n      try {\n        obj = JSON.parse(pwdJson.value);\n      } catch {\n        obj = pwdJson.value;\n      }\n      if (obj.uri) {\n        const {\n          SecretClient\n        } = require(\"@azure/keyvault-secrets\");\n        const vault_detail = await this._parsePwd(obj.uri);\n        const client1 = new SecretClient(vault_detail[0], credential);\n        configObject.password = (await client1.getSecret(vault_detail[1])).value;\n      } else {\n        configObject.password = pwdJson.value;\n      }\n    }\n    return configObject;\n  }\n}\nmodule.exports = AzureProvider;","map":{"version":3,"names":["AppConfigurationClient","ClientSecretCredential","ClientCertificateCredential","ChainedTokenCredential","ManagedIdentityCredential","EnvironmentCredential","errors","require","base","AzureProvider","constructor","provider_arg","urlExtendedPart","_addParam","init","_withChainedTokenCredential","tokens","paramMap","get","push","credential","_returnCredential","auth","toUpperCase","throwErr","ERR_AZURE_SERVICE_PRINCIPAL_AUTH_FAILED","ERR_AZURE_CONFIG_PROVIDER_AUTH_FAILED","_getConfigurationSetting","client","key","label","getConfigurationSetting","returnConfig","configObject","connectString","value","params","obj","JSON","parse","val","user","pwdJson","password","uri","SecretClient","vault_detail","_parsePwd","client1","getSecret","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/configProviders/azure.js"],"sourcesContent":["// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nlet AppConfigurationClient;\nlet ClientSecretCredential, ClientCertificateCredential, ChainedTokenCredential, ManagedIdentityCredential, EnvironmentCredential;\nconst errors = require(\"../errors.js\");\nconst { base } = require(\"./base.js\");\n\nclass AzureProvider extends base {\n  constructor(provider_arg, urlExtendedPart) {\n    super(urlExtendedPart);\n    this._addParam(\"appconfigname\", provider_arg);\n  }\n\n  //---------------------------------------------------------------------------\n  // init()\n  //\n  // Require/import modules from azure\n  //---------------------------------------------------------------------------\n  init() {\n    ({AppConfigurationClient } = require(\"@azure/app-configuration\"));\n    ({ClientSecretCredential, ClientCertificateCredential, ChainedTokenCredential, ManagedIdentityCredential, EnvironmentCredential} = require(\"@azure/identity\"));\n  }\n\n  //---------------------------------------------------------------------------\n  // _withChainedTokenCredential()\n  //\n  // Use of ChainedTokenCredential class which provides the ability to link\n  // together multiple credential instances to be tried sequentially when authenticating.\n  // Default authentication to try when no authentication parameter is given by the user\n  //---------------------------------------------------------------------------\n  _withChainedTokenCredential() {\n    const tokens = [];\n    if ((this.paramMap.get(\"azure_client_secret\")))\n      tokens.push(new ClientSecretCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_secret\")));\n    if ((this.paramMap.get(\"azure_client_certificate_path\")))\n      tokens.push(new ClientCertificateCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_certificate_path\")));\n    if ((this.paramMap.get('azure_managed_identity_client_id')))\n      tokens.push(this.paramMap.get('azure_managed_identity_client_id'));\n    tokens.push(new EnvironmentCredential());\n    const credential = new ChainedTokenCredential(...tokens);\n    return credential;\n  }\n\n  //---------------------------------------------------------------------------\n  // _returnCredential()\n  //\n  // Returns credential to access Azure Config Store on the basis of\n  // authentication parameters given by the user.\n  //---------------------------------------------------------------------------\n  _returnCredential() {\n    let auth = null;\n    if (this.paramMap.get('authentication')) {\n      auth = this.paramMap.get('authentication').toUpperCase();\n    }\n    if (auth && !(auth == 'AZURE_DEFAULT')) {\n      // do the given authentication\n      if (auth == 'AZURE_SERVICE_PRINCIPAL') {\n        if (this.paramMap.get(\"azure_client_certificate_path\"))\n          return new ClientCertificateCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_certificate_path\"));\n        else if (this.paramMap.get(\"azure_client_secret\"))\n          return new ClientSecretCredential(this.paramMap.get(\"azure_tenant_id\"), this.paramMap.get(\"azure_client_id\"), this.paramMap.get(\"azure_client_secret\"));\n        else\n          errors.throwErr(errors.ERR_AZURE_SERVICE_PRINCIPAL_AUTH_FAILED);\n      } else if (auth == 'AZURE_MANAGED_IDENTITY') {\n        return new ManagedIdentityCredential(this.paramMap.get('azure_managed_identity_client_id'));\n      } else {\n        errors.throwErr(errors.ERR_AZURE_CONFIG_PROVIDER_AUTH_FAILED, auth);\n      }\n    } else {\n      //return default token credential\n      return this._withChainedTokenCredential();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConfigurationSetting()\n  //\n  // Get configuration setting from the config provider given a key\n  //and an optional label\n  //---------------------------------------------------------------------------\n  async _getConfigurationSetting(client, key, label) {\n    return await client.getConfigurationSetting({ key: key, label: label });\n\n  }\n\n  async returnConfig() {\n    const configObject = {};\n    const label = this.paramMap.get(\"label\");\n    const credential = this._returnCredential();\n    // azure config store\n    const client = new AppConfigurationClient(\n      \"https://\" + this.paramMap.get(\"appconfigname\"), // ex: <https://<your appconfig resource>.azconfig.io>\n      credential\n    );\n    // retrieve connect_description\n    configObject.connectString = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'connect_descriptor', label)).value;\n\n    // retrieve node-oracledb parameters\n    try {\n      const params = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'node-oracledb', label)).value;\n      const obj = JSON.parse(params);\n      for (const key in obj) {\n        var val = obj[key];\n        configObject[key] = val;\n      }\n    } catch {\n      configObject['node-oracledb'] = null;\n    }\n    try {\n      // retrieve user\n      configObject.user = (await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'user', label)).value;\n    } catch {\n      configObject.user = null;\n    }\n    //retrieve password\n    let pwdJson = null;\n    try {\n      pwdJson = await this._getConfigurationSetting(client, this.paramMap.get(\"key\") + 'password', label);\n    } catch {\n      configObject.password = null;\n    }\n    if (pwdJson) {\n      let obj;\n      try {\n        obj = JSON.parse(pwdJson.value);\n      } catch {\n        obj = pwdJson.value;\n      }\n      if (obj.uri) {\n        const { SecretClient } = require(\"@azure/keyvault-secrets\");\n        const vault_detail = await this._parsePwd(obj.uri);\n        const client1 = new SecretClient(vault_detail[0], credential);\n        configObject.password  = (await client1.getSecret(vault_detail[1])).value;\n      } else {\n        configObject.password = pwdJson.value;\n      }\n    }\n    return configObject;\n  }\n}\nmodule.exports = AzureProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}