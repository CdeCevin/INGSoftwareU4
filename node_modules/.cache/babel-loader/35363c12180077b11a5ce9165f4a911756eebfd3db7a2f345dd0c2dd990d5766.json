{"ast":null,"code":"// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"./constants.js\");\nconst Capabilities = require(\"./capabilities.js\");\nconst {\n  WritePacket,\n  ReadPacket\n} = require(\"./packet.js\");\nconst errors = require(\"../../errors\");\nconst utils = require(\"./utils.js\");\n\n/**\n * Handles protocol details.\n *\n * @class Protocol\n */\nclass Protocol {\n  constructor(conn) {\n    this._breakInProgress = false;\n    this.txnInProgress = false;\n    this.connInProgress = true;\n    this.nsi = conn.nscon;\n    this.sequenceId = 1;\n    /**\n     * Compile and Runtime capabilities negotiated with Server\n     * @type {object}\n     */\n    this.caps = new Capabilities(conn.nscon);\n    this.writeBuf = new WritePacket(conn.nscon, this.caps, this);\n    this.readBuf = new ReadPacket(conn.nscon, this.caps);\n    this.callTimeout = 0;\n  }\n\n  /**\n   * Decodes the message returned by the database. A message may consist of\n   * multiple packets. Not all packets may be available so if insufficient\n   * packets are available, the message decode function is expected to return\n   * the value true if more data is expected to follow.\n   *\n   * If that occurs, waiting occurs until more packets arrive.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _decodeMessage(message) {\n    message.preProcess();\n    await this.readBuf.waitForPackets(true);\n    while (true) {\n      // eslint-disable-line\n      if (this.nsi.isBreak) {\n        await this.resetMessage();\n        delete this.readBuf.savedPackets;\n        await this.readBuf.waitForPackets();\n      }\n      try {\n        message.decode(this.readBuf);\n        break;\n      } catch (err) {\n        if (err instanceof utils.OutOfPacketsError) {\n          if (!this.nsi.isBreak) {\n            await this.readBuf.waitForPackets();\n            this.readBuf.restorePoint();\n          }\n          continue;\n        }\n        throw err;\n      }\n    }\n    await message.postProcess();\n  }\n\n  /**\n   * Encodes the message to be sent to the database. A message may be encoded\n   * in multiple packets. In order to facilitate encoding of very large\n   * messages consisting of a large number of packets, the message encode\n   * function is expected to return the value true if more data is to follow.\n   *\n   * If that occurs, waiting occurs until the stream has drained and is ready\n   * to accept more data.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _encodeMessage(message) {\n    const adapter = this.nsi.ntAdapter;\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    while (message.encode(this.writeBuf)) {\n      await adapter.pauseWrite();\n    }\n    this.writeBuf.endRequest();\n  }\n  async _recoverFromError(caughtErr, message) {\n    /*\n     * We have NJS error(protocol related) detected during packet write/read\n     * operation.  Issue a break and reset to clear channel . We receive the\n     * response as ORA-1013 from the server.\n     */\n    try {\n      this.breakMessage();\n      this._breakInProgress = false;\n      await this.resetMessage();\n      await this.readBuf.waitForPackets();\n      message.decode(this.readBuf);\n    } catch (err) {\n      // Recovery failed\n      this.nsi.disconnect();\n      const newErr = errors.getErr(errors.ERR_CONNECTION_CLOSED);\n      caughtErr.message = newErr.message + \"\\nError recovery failed: \" + err.message + \"\\nOriginal error: \" + caughtErr.message;\n      throw caughtErr;\n    }\n  }\n\n  /**\n   *\n   * @param {object} message The RPC dynamic structure specific to the RPC\n   * @return {Promise}\n   */\n  async _processMessage(message) {\n    let callTimer;\n    let callTimeoutExpired = false;\n    try {\n      if (this.callTimeout > 0) {\n        callTimer = setTimeout(() => {\n          callTimeoutExpired = true;\n          this.breakMessage();\n        }, this.callTimeout);\n      }\n      await this._encodeMessage(message);\n      if (message.messageType !== constants.TNS_MSG_TYPE_ONEWAY_FN) {\n        await this._decodeMessage(message);\n      }\n    } catch (err) {\n      if (!this.connInProgress && err.code !== errors.ERR_CONNECTION_CLOSED_CODE) {\n        await this._recoverFromError(err, message);\n      }\n      throw err;\n    } finally {\n      clearTimeout(callTimer);\n    }\n    if (message.flushOutBinds) {\n      await this.flushOutBindMessage(message);\n    }\n    this.txnInProgress = Boolean(message.callStatus & constants.TNS_EOCS_FLAGS_TXN_IN_PROGRESS);\n    // processes the call status flags returned by the server.\n    if (message.callStatus & constants.TNS_EOCS_FLAGS_SESS_RELEASE) {\n      message.connection.statementCache.clearCursors();\n    }\n    if (message.errorOccurred) {\n      if (callTimeoutExpired) {\n        errors.throwErr(errors.ERR_CALL_TIMEOUT_EXCEEDED, this.callTimeout);\n      }\n      if (message.retry) {\n        message.errorOccurred = false;\n        return await this._processMessage(message);\n      }\n      let err = new Error(message.errorInfo.message);\n      err.offset = message.errorInfo.pos;\n      err.errorNum = message.errorInfo.num;\n      err = errors.transformErr(err);\n      if (err.code === errors.ERR_CONNECTION_CLOSED_CODE) {\n        this.nsi.disconnect();\n      }\n      throw err;\n    }\n  }\n  async flushOutBindMessage(message) {\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    this.writeBuf.writeUInt8(constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS);\n    this.writeBuf.endRequest();\n    await this._decodeMessage(message);\n  }\n\n  /**\n   * Send break packet\n   */\n  breakMessage() {\n    this._breakInProgress = true;\n    this.nsi.sendBreak();\n  }\n\n  /**\n   * Reset the connection\n   */\n  async resetMessage() {\n    await this.nsi.reset();\n  }\n}\nmodule.exports = Protocol;","map":{"version":3,"names":["constants","require","Capabilities","WritePacket","ReadPacket","errors","utils","Protocol","constructor","conn","_breakInProgress","txnInProgress","connInProgress","nsi","nscon","sequenceId","caps","writeBuf","readBuf","callTimeout","_decodeMessage","message","preProcess","waitForPackets","isBreak","resetMessage","savedPackets","decode","err","OutOfPacketsError","restorePoint","postProcess","_encodeMessage","adapter","ntAdapter","startRequest","TNS_PACKET_TYPE_DATA","encode","pauseWrite","endRequest","_recoverFromError","caughtErr","breakMessage","disconnect","newErr","getErr","ERR_CONNECTION_CLOSED","_processMessage","callTimer","callTimeoutExpired","setTimeout","messageType","TNS_MSG_TYPE_ONEWAY_FN","code","ERR_CONNECTION_CLOSED_CODE","clearTimeout","flushOutBinds","flushOutBindMessage","Boolean","callStatus","TNS_EOCS_FLAGS_TXN_IN_PROGRESS","TNS_EOCS_FLAGS_SESS_RELEASE","connection","statementCache","clearCursors","errorOccurred","throwErr","ERR_CALL_TIMEOUT_EXCEEDED","retry","Error","errorInfo","offset","pos","errorNum","num","transformErr","writeUInt8","TNS_MSG_TYPE_FLUSH_OUT_BINDS","sendBreak","reset","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/thin/protocol/protocol.js"],"sourcesContent":["// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"./constants.js\");\nconst Capabilities = require(\"./capabilities.js\");\nconst {WritePacket, ReadPacket} = require(\"./packet.js\");\nconst errors = require(\"../../errors\");\nconst utils = require(\"./utils.js\");\n\n/**\n * Handles protocol details.\n *\n * @class Protocol\n */\nclass Protocol {\n\n  constructor(conn) {\n    this._breakInProgress = false;\n    this.txnInProgress = false;\n    this.connInProgress = true;\n    this.nsi = conn.nscon;\n    this.sequenceId = 1;\n    /**\n     * Compile and Runtime capabilities negotiated with Server\n     * @type {object}\n     */\n    this.caps = new Capabilities(conn.nscon);\n    this.writeBuf = new WritePacket(conn.nscon, this.caps, this);\n    this.readBuf = new ReadPacket(conn.nscon, this.caps);\n    this.callTimeout = 0;\n  }\n\n  /**\n   * Decodes the message returned by the database. A message may consist of\n   * multiple packets. Not all packets may be available so if insufficient\n   * packets are available, the message decode function is expected to return\n   * the value true if more data is expected to follow.\n   *\n   * If that occurs, waiting occurs until more packets arrive.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _decodeMessage(message) {\n    message.preProcess();\n    await this.readBuf.waitForPackets(true);\n    while (true) {     // eslint-disable-line\n      if (this.nsi.isBreak) {\n        await this.resetMessage();\n        delete this.readBuf.savedPackets;\n        await this.readBuf.waitForPackets();\n      }\n      try {\n        message.decode(this.readBuf);\n        break;\n      } catch (err) {\n        if (err instanceof utils.OutOfPacketsError) {\n          if (!this.nsi.isBreak) {\n            await this.readBuf.waitForPackets();\n            this.readBuf.restorePoint();\n          }\n          continue;\n        }\n        throw (err);\n      }\n    }\n    await message.postProcess();\n  }\n\n  /**\n   * Encodes the message to be sent to the database. A message may be encoded\n   * in multiple packets. In order to facilitate encoding of very large\n   * messages consisting of a large number of packets, the message encode\n   * function is expected to return the value true if more data is to follow.\n   *\n   * If that occurs, waiting occurs until the stream has drained and is ready\n   * to accept more data.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _encodeMessage(message) {\n    const adapter = this.nsi.ntAdapter;\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    while (message.encode(this.writeBuf)) {\n      await adapter.pauseWrite();\n    }\n    this.writeBuf.endRequest();\n  }\n\n  async _recoverFromError(caughtErr, message) {\n    /*\n     * We have NJS error(protocol related) detected during packet write/read\n     * operation.  Issue a break and reset to clear channel . We receive the\n     * response as ORA-1013 from the server.\n     */\n    try {\n      this.breakMessage();\n      this._breakInProgress = false;\n      await this.resetMessage();\n      await this.readBuf.waitForPackets();\n      message.decode(this.readBuf);\n    } catch (err) { // Recovery failed\n      this.nsi.disconnect();\n      const newErr = errors.getErr(errors.ERR_CONNECTION_CLOSED);\n      caughtErr.message = newErr.message +\n        \"\\nError recovery failed: \" + err.message +\n        \"\\nOriginal error: \" + caughtErr.message;\n      throw caughtErr;\n    }\n  }\n\n  /**\n   *\n   * @param {object} message The RPC dynamic structure specific to the RPC\n   * @return {Promise}\n   */\n  async _processMessage(message) {\n    let callTimer;\n    let callTimeoutExpired = false;\n    try {\n      if (this.callTimeout > 0) {\n        callTimer = setTimeout(() => {\n          callTimeoutExpired = true;\n          this.breakMessage();\n        }, this.callTimeout);\n      }\n      await this._encodeMessage(message);\n      if (message.messageType !== constants.TNS_MSG_TYPE_ONEWAY_FN) {\n        await this._decodeMessage(message);\n      }\n    } catch (err) {\n      if (!this.connInProgress &&\n          err.code !== errors.ERR_CONNECTION_CLOSED_CODE) {\n        await this._recoverFromError(err, message);\n      }\n      throw err;\n    } finally {\n      clearTimeout(callTimer);\n    }\n    if (message.flushOutBinds) {\n      await this.flushOutBindMessage(message);\n    }\n    this.txnInProgress = Boolean(message.callStatus & constants.TNS_EOCS_FLAGS_TXN_IN_PROGRESS);\n    // processes the call status flags returned by the server.\n    if (message.callStatus & constants.TNS_EOCS_FLAGS_SESS_RELEASE) {\n      message.connection.statementCache.clearCursors();\n    }\n\n    if (message.errorOccurred) {\n      if (callTimeoutExpired) {\n        errors.throwErr(errors.ERR_CALL_TIMEOUT_EXCEEDED, this.callTimeout);\n      }\n      if (message.retry) {\n        message.errorOccurred = false;\n        return await this._processMessage(message);\n      }\n      let err = new Error(message.errorInfo.message);\n      err.offset = message.errorInfo.pos;\n      err.errorNum = message.errorInfo.num;\n      err = errors.transformErr(err);\n      if (err.code === errors.ERR_CONNECTION_CLOSED_CODE) {\n        this.nsi.disconnect();\n      }\n      throw err;\n    }\n  }\n\n  async flushOutBindMessage(message) {\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    this.writeBuf.writeUInt8(constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS);\n    this.writeBuf.endRequest();\n    await this._decodeMessage(message);\n  }\n\n  /**\n   * Send break packet\n   */\n  breakMessage() {\n    this._breakInProgress = true;\n    this.nsi.sendBreak();\n  }\n\n  /**\n   * Reset the connection\n   */\n  async resetMessage() {\n    await this.nsi.reset();\n  }\n\n}\n\nmodule.exports = Protocol;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC3C,MAAMC,YAAY,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACjD,MAAM;EAACE,WAAW;EAAEC;AAAU,CAAC,GAAGH,OAAO,CAAC,aAAa,CAAC;AACxD,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACtC,MAAMK,KAAK,GAAGL,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA,MAAMM,QAAQ,CAAC;EAEbC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,GAAG,GAAGJ,IAAI,CAACK,KAAK;IACrB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAG,IAAId,YAAY,CAACO,IAAI,CAACK,KAAK,CAAC;IACxC,IAAI,CAACG,QAAQ,GAAG,IAAId,WAAW,CAACM,IAAI,CAACK,KAAK,EAAE,IAAI,CAACE,IAAI,EAAE,IAAI,CAAC;IAC5D,IAAI,CAACE,OAAO,GAAG,IAAId,UAAU,CAACK,IAAI,CAACK,KAAK,EAAE,IAAI,CAACE,IAAI,CAAC;IACpD,IAAI,CAACG,WAAW,GAAG,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,cAAcA,CAACC,OAAO,EAAE;IAC5BA,OAAO,CAACC,UAAU,CAAC,CAAC;IACpB,MAAM,IAAI,CAACJ,OAAO,CAACK,cAAc,CAAC,IAAI,CAAC;IACvC,OAAO,IAAI,EAAE;MAAM;MACjB,IAAI,IAAI,CAACV,GAAG,CAACW,OAAO,EAAE;QACpB,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;QACzB,OAAO,IAAI,CAACP,OAAO,CAACQ,YAAY;QAChC,MAAM,IAAI,CAACR,OAAO,CAACK,cAAc,CAAC,CAAC;MACrC;MACA,IAAI;QACFF,OAAO,CAACM,MAAM,CAAC,IAAI,CAACT,OAAO,CAAC;QAC5B;MACF,CAAC,CAAC,OAAOU,GAAG,EAAE;QACZ,IAAIA,GAAG,YAAYtB,KAAK,CAACuB,iBAAiB,EAAE;UAC1C,IAAI,CAAC,IAAI,CAAChB,GAAG,CAACW,OAAO,EAAE;YACrB,MAAM,IAAI,CAACN,OAAO,CAACK,cAAc,CAAC,CAAC;YACnC,IAAI,CAACL,OAAO,CAACY,YAAY,CAAC,CAAC;UAC7B;UACA;QACF;QACA,MAAOF,GAAG;MACZ;IACF;IACA,MAAMP,OAAO,CAACU,WAAW,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,cAAcA,CAACX,OAAO,EAAE;IAC5B,MAAMY,OAAO,GAAG,IAAI,CAACpB,GAAG,CAACqB,SAAS;IAClC,IAAI,CAACjB,QAAQ,CAACkB,YAAY,CAACnC,SAAS,CAACoC,oBAAoB,CAAC;IAC1D,OAAOf,OAAO,CAACgB,MAAM,CAAC,IAAI,CAACpB,QAAQ,CAAC,EAAE;MACpC,MAAMgB,OAAO,CAACK,UAAU,CAAC,CAAC;IAC5B;IACA,IAAI,CAACrB,QAAQ,CAACsB,UAAU,CAAC,CAAC;EAC5B;EAEA,MAAMC,iBAAiBA,CAACC,SAAS,EAAEpB,OAAO,EAAE;IAC1C;AACJ;AACA;AACA;AACA;IACI,IAAI;MACF,IAAI,CAACqB,YAAY,CAAC,CAAC;MACnB,IAAI,CAAChC,gBAAgB,GAAG,KAAK;MAC7B,MAAM,IAAI,CAACe,YAAY,CAAC,CAAC;MACzB,MAAM,IAAI,CAACP,OAAO,CAACK,cAAc,CAAC,CAAC;MACnCF,OAAO,CAACM,MAAM,CAAC,IAAI,CAACT,OAAO,CAAC;IAC9B,CAAC,CAAC,OAAOU,GAAG,EAAE;MAAE;MACd,IAAI,CAACf,GAAG,CAAC8B,UAAU,CAAC,CAAC;MACrB,MAAMC,MAAM,GAAGvC,MAAM,CAACwC,MAAM,CAACxC,MAAM,CAACyC,qBAAqB,CAAC;MAC1DL,SAAS,CAACpB,OAAO,GAAGuB,MAAM,CAACvB,OAAO,GAChC,2BAA2B,GAAGO,GAAG,CAACP,OAAO,GACzC,oBAAoB,GAAGoB,SAAS,CAACpB,OAAO;MAC1C,MAAMoB,SAAS;IACjB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMM,eAAeA,CAAC1B,OAAO,EAAE;IAC7B,IAAI2B,SAAS;IACb,IAAIC,kBAAkB,GAAG,KAAK;IAC9B,IAAI;MACF,IAAI,IAAI,CAAC9B,WAAW,GAAG,CAAC,EAAE;QACxB6B,SAAS,GAAGE,UAAU,CAAC,MAAM;UAC3BD,kBAAkB,GAAG,IAAI;UACzB,IAAI,CAACP,YAAY,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAACvB,WAAW,CAAC;MACtB;MACA,MAAM,IAAI,CAACa,cAAc,CAACX,OAAO,CAAC;MAClC,IAAIA,OAAO,CAAC8B,WAAW,KAAKnD,SAAS,CAACoD,sBAAsB,EAAE;QAC5D,MAAM,IAAI,CAAChC,cAAc,CAACC,OAAO,CAAC;MACpC;IACF,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ,IAAI,CAAC,IAAI,CAAChB,cAAc,IACpBgB,GAAG,CAACyB,IAAI,KAAKhD,MAAM,CAACiD,0BAA0B,EAAE;QAClD,MAAM,IAAI,CAACd,iBAAiB,CAACZ,GAAG,EAAEP,OAAO,CAAC;MAC5C;MACA,MAAMO,GAAG;IACX,CAAC,SAAS;MACR2B,YAAY,CAACP,SAAS,CAAC;IACzB;IACA,IAAI3B,OAAO,CAACmC,aAAa,EAAE;MACzB,MAAM,IAAI,CAACC,mBAAmB,CAACpC,OAAO,CAAC;IACzC;IACA,IAAI,CAACV,aAAa,GAAG+C,OAAO,CAACrC,OAAO,CAACsC,UAAU,GAAG3D,SAAS,CAAC4D,8BAA8B,CAAC;IAC3F;IACA,IAAIvC,OAAO,CAACsC,UAAU,GAAG3D,SAAS,CAAC6D,2BAA2B,EAAE;MAC9DxC,OAAO,CAACyC,UAAU,CAACC,cAAc,CAACC,YAAY,CAAC,CAAC;IAClD;IAEA,IAAI3C,OAAO,CAAC4C,aAAa,EAAE;MACzB,IAAIhB,kBAAkB,EAAE;QACtB5C,MAAM,CAAC6D,QAAQ,CAAC7D,MAAM,CAAC8D,yBAAyB,EAAE,IAAI,CAAChD,WAAW,CAAC;MACrE;MACA,IAAIE,OAAO,CAAC+C,KAAK,EAAE;QACjB/C,OAAO,CAAC4C,aAAa,GAAG,KAAK;QAC7B,OAAO,MAAM,IAAI,CAAClB,eAAe,CAAC1B,OAAO,CAAC;MAC5C;MACA,IAAIO,GAAG,GAAG,IAAIyC,KAAK,CAAChD,OAAO,CAACiD,SAAS,CAACjD,OAAO,CAAC;MAC9CO,GAAG,CAAC2C,MAAM,GAAGlD,OAAO,CAACiD,SAAS,CAACE,GAAG;MAClC5C,GAAG,CAAC6C,QAAQ,GAAGpD,OAAO,CAACiD,SAAS,CAACI,GAAG;MACpC9C,GAAG,GAAGvB,MAAM,CAACsE,YAAY,CAAC/C,GAAG,CAAC;MAC9B,IAAIA,GAAG,CAACyB,IAAI,KAAKhD,MAAM,CAACiD,0BAA0B,EAAE;QAClD,IAAI,CAACzC,GAAG,CAAC8B,UAAU,CAAC,CAAC;MACvB;MACA,MAAMf,GAAG;IACX;EACF;EAEA,MAAM6B,mBAAmBA,CAACpC,OAAO,EAAE;IACjC,IAAI,CAACJ,QAAQ,CAACkB,YAAY,CAACnC,SAAS,CAACoC,oBAAoB,CAAC;IAC1D,IAAI,CAACnB,QAAQ,CAAC2D,UAAU,CAAC5E,SAAS,CAAC6E,4BAA4B,CAAC;IAChE,IAAI,CAAC5D,QAAQ,CAACsB,UAAU,CAAC,CAAC;IAC1B,MAAM,IAAI,CAACnB,cAAc,CAACC,OAAO,CAAC;EACpC;;EAEA;AACF;AACA;EACEqB,YAAYA,CAAA,EAAG;IACb,IAAI,CAAChC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACG,GAAG,CAACiE,SAAS,CAAC,CAAC;EACtB;;EAEA;AACF;AACA;EACE,MAAMrD,YAAYA,CAAA,EAAG;IACnB,MAAM,IAAI,CAACZ,GAAG,CAACkE,KAAK,CAAC,CAAC;EACxB;AAEF;AAEAC,MAAM,CAACC,OAAO,GAAG1E,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}