{"ast":null,"code":"// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Used for two-phase commit (TPC) transaction change state: commit, rollback,\n * forget, etc.\n *\n * @class TransactionChangeStateMessage\n * @extends {Message}\n */\nclass TransactionChangeStateMessage extends Message {\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_TPC_TXN_CHANGE_STATE;\n  }\n  processReturnParameter(buf) {\n    // process the parameters returned by the datatabase\n    this.state = buf.readUB4();\n  }\n  encode(buf) {\n    // writes the message to the database\n    // acquire data to send to the server\n    let xidBytes;\n    if (this.xid) {\n      xidBytes = Buffer.alloc(128);\n      this.xid.globalTransactionId.copy(xidBytes);\n      this.xid.branchQualifier.copy(xidBytes, this.xid.globalTransactionId.length);\n    }\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(this.operation);\n    if (this.context) {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.context.length);\n    } else {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    }\n    if (this.xid) {\n      buf.writeUB4(this.xid.formatId);\n      buf.writeUB4(this.xid.globalTransactionId.length);\n      buf.writeUB4(this.xid.branchQualifier.length);\n      buf.writeUInt8(1);\n      buf.writeUB4(xidBytes.length);\n    } else {\n      buf.writeUB4(0);\n      buf.writeUB4(0);\n      buf.writeUB4(0);\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    }\n    buf.writeUB4(0);\n    buf.writeUB4(this.state);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.flags);\n    if (this.context) {\n      buf.writeBytes(this.context);\n    }\n    if (this.xid) {\n      buf.writeBytes(xidBytes);\n    }\n  }\n}\nmodule.exports = TransactionChangeStateMessage;","map":{"version":3,"names":["Message","require","constants","TransactionChangeStateMessage","constructor","connImpl","functionCode","TNS_FUNC_TPC_TXN_CHANGE_STATE","processReturnParameter","buf","state","readUB4","encode","xidBytes","xid","Buffer","alloc","globalTransactionId","copy","branchQualifier","length","writeFunctionHeader","writeUB4","operation","context","writeUInt8","formatId","flags","writeBytes","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/thin/protocol/messages/transactionChangeState.js"],"sourcesContent":["// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Used for two-phase commit (TPC) transaction change state: commit, rollback,\n * forget, etc.\n *\n * @class TransactionChangeStateMessage\n * @extends {Message}\n */\nclass TransactionChangeStateMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_TPC_TXN_CHANGE_STATE;\n  }\n\n  processReturnParameter(buf) {\n    // process the parameters returned by the datatabase\n    this.state = buf.readUB4();\n  }\n\n  encode(buf) {\n    // writes the message to the database\n    // acquire data to send to the server\n    let xidBytes;\n    if (this.xid) {\n      xidBytes = Buffer.alloc(128);\n      this.xid.globalTransactionId.copy(xidBytes);\n      this.xid.branchQualifier.copy(xidBytes,\n        this.xid.globalTransactionId.length);\n    }\n\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(this.operation);\n    if (this.context) {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.context.length);\n    } else {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    }\n\n    if (this.xid) {\n      buf.writeUB4(this.xid.formatId);\n      buf.writeUB4(this.xid.globalTransactionId.length);\n      buf.writeUB4(this.xid.branchQualifier.length);\n      buf.writeUInt8(1);\n      buf.writeUB4(xidBytes.length);\n    } else {\n      buf.writeUB4(0);\n      buf.writeUB4(0);\n      buf.writeUB4(0);\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    }\n    buf.writeUB4(0);\n    buf.writeUB4(this.state);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.flags);\n\n    if (this.context) {\n      buf.writeBytes(this.context);\n    }\n    if (this.xid) {\n      buf.writeBytes(xidBytes);\n    }\n  }\n}\n\nmodule.exports = TransactionChangeStateMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}