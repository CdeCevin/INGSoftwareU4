{"ast":null,"code":"// Copyright (c) 2016, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst {\n  Duplex\n} = require('stream');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst types = require('./types.js');\nclass Lob extends Duplex {\n  constructor() {\n    super({\n      decodeStrings: false\n    });\n    this.offset = 1;\n    this._isActive = false;\n    this.once('finish', function () {\n      if (this._autoCloseLob) {\n        this.destroy();\n      }\n    });\n  }\n\n  // called by BFILE specific functions to throw errors for other\n  // datatypes.\n  _checkIsBfile() {\n    if (this.type !== types.DB_TYPE_BFILE) {\n      errors.throwErr(errors.ERR_OPERATION_ONLY_SUPPORTED_ON_BFILE);\n    }\n  }\n\n  // called by functions not allowed for BFILE and throw errors if\n  // such operations are performed on BFILE.\n  _checkNotBfile() {\n    if (this.type === types.DB_TYPE_BFILE) {\n      errors.throwErr(errors.ERR_OPERATION_NOT_SUPPORTED_ON_BFILE);\n    }\n  }\n\n  // called by stream.destroy() and ensures that the LOB is closed if it has\n  // not already been closed (never called directly)\n  async _destroy(err, cb) {\n    // if LOB was already closed, nothing to do!\n    if (err && err.message.startsWith(\"NJS-003:\")) delete this._impl;\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n      } catch (closeErr) {\n        cb(closeErr);\n        return;\n      }\n    }\n    cb(err);\n  }\n\n  // implementation of streaming read; if LOB is set to auto-close, the lob is\n  // automatically closed when an error occurs or when there are no more bytes\n  // to transfer; all that needs to be done here is to destroy the streaming\n  // LOB\n  async _read() {\n    try {\n      const data = await this._serializedRead(this.offset);\n      if (data) {\n        this.offset += data.length;\n        this.push(data);\n      } else {\n        this.push(null);\n        if (this._autoCloseLob) {\n          this.destroy();\n        }\n      }\n    } catch (err) {\n      if (this._autoCloseLob) this.destroy(err);\n      throw err;\n    }\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _readData(offset) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      return await this._impl.read(offset);\n    } catch (err) {\n      throw errors.transformErr(err, this._readData);\n    }\n  }\n\n  // called to associate a LOB implementation with this user facing object\n  _setup(lobImpl, autoCloseLob) {\n    this._impl = lobImpl;\n    // chunk size is not defined for BFILE LOBs\n    if (this.type !== types.DB_TYPE_BFILE) {\n      this._chunkSize = lobImpl.getChunkSize();\n    }\n    this._pieceSize = lobImpl.getPieceSize();\n    this._length = lobImpl.getLength();\n    this._type = lobImpl.getType();\n    if (typeof this._type === 'number') {\n      this._type = types.getTypeByNum(this._type);\n    }\n    this._autoCloseLob = autoCloseLob;\n  }\n\n  // implementation of streaming write; if LOB is set to auto-close, the lob is\n  // automatically closed in the \"finish\" event; all that needs to be done here\n  // is to destroy the streaming LOB\n  async _write(data, encoding, cb) {\n    // convert data if needed\n    if (this.type == constants.DB_TYPE_BLOB && !Buffer.isBuffer(data)) {\n      data = Buffer.from(data);\n    } else if (this.type == constants.DB_TYPE_CLOB && Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n    try {\n      await this._serializedWrite(this.offset, data);\n    } catch (err) {\n      if (this._autoCloseLob) this.destroy(err);\n      cb(err);\n      return;\n    }\n    this.offset += data.length;\n    cb(null);\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _writeData(offset, data) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      await this._impl.write(offset, data);\n    } catch (err) {\n      throw errors.transformErr(err, this._writeData);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // chunkSize\n  //\n  // Property for the chunk size of the LOB.\n  //---------------------------------------------------------------------------\n  get chunkSize() {\n    this._checkNotBfile();\n    return this._chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the LOB and make it unusable for further operations. If the LOB is\n  // already closed, nothing is done in order to support multiple close()\n  // calls.\n  //\n  // This method is deprecated and will be removed in a future version of the\n  // node-oracledb driver. Use lob.destroy() instead. NOTE: this method will\n  // emit a duplicate \"close\" event in order to be compatible with previous\n  // versions of node-oracledb.\n  //---------------------------------------------------------------------------\n  async close() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n        this.emit('close');\n      } catch (err) {\n        this.destroy(err);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Return a portion (or all) of the data in the LOB. Note that the amount\n  // and offset are in bytes for BLOB and BFILE type LOBs and in UCS - 2 code\n  // points for CLOB and NCLOB type LOBs.UCS-2 code points are equivalent\n  // to characters for all but supplemental characters.If supplemental\n  // characters are in the LOB, the offset and amount will have to be chosen\n  // carefully to avoid splitting a character.\n  // Returns data in the LOB as a single string or buffer.\n  //---------------------------------------------------------------------------\n  async getData(offset, amount) {\n    errors.assertArgCount(arguments, 0, 2);\n    if (offset === undefined) {\n      offset = 1;\n    } else {\n      errors.assertParamValue(Number.isInteger(offset) && offset > 0, 1);\n    }\n    if (amount === undefined) {\n      amount = 0;\n    } else {\n      errors.assertParamValue(Number.isInteger(amount) && amount > 0, 2);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    return await this._impl.getData(offset, amount);\n  }\n\n  //---------------------------------------------------------------------------\n  // getDirFileName()\n  //  To obtain the BFILE Lob object properties dirName & fileName\n  //---------------------------------------------------------------------------\n  getDirFileName() {\n    this._checkIsBfile();\n    return this._impl.getDirFileName();\n  }\n\n  //--------------------------------------------------------------------------\n  // setDirFileName()\n  //  To set the BFILE Lob object properties dirName & fileName\n  //--------------------------------------------------------------------------\n  setDirFileName(a1) {\n    this._checkIsBfile();\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(a1), 1);\n    this._impl.setDirFileName(a1);\n  }\n\n  //---------------------------------------------------------------------------\n  // fileExists\n  //\n  //   To obtain file existence status of BFILE file\n  //---------------------------------------------------------------------------\n  async fileExists() {\n    this._checkIsBfile();\n    return await this._impl.fileExists();\n  }\n\n  //---------------------------------------------------------------------------\n  // length\n  //\n  // Property for the length of the LOB.\n  //---------------------------------------------------------------------------\n  get length() {\n    return this._length;\n  }\n\n  //---------------------------------------------------------------------------\n  // pieceSize\n  //\n  // Property for the size to use for each piece that is transferred when\n  // reading from the LOB.\n  //---------------------------------------------------------------------------\n  get pieceSize() {\n    return this._pieceSize;\n  }\n  set pieceSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"pieceSize\");\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    this._impl.setPieceSize(value);\n    this._pieceSize = value;\n  }\n\n  //---------------------------------------------------------------------------\n  // type\n  //\n  // Property for the type of the LOB.\n  //---------------------------------------------------------------------------\n  get type() {\n    return this._type;\n  }\n}\nnodbUtil.wrapFns(Lob.prototype, errors.ERR_BUSY_LOB, \"close\", \"fileExists\", \"getData\");\nLob.prototype._serializedRead = nodbUtil.serialize(Lob.prototype._readData);\nLob.prototype._serializedWrite = nodbUtil.serialize(Lob.prototype._writeData);\nmodule.exports = Lob;","map":{"version":3,"names":["Buffer","require","Duplex","constants","errors","nodbUtil","types","Lob","constructor","decodeStrings","offset","_isActive","once","_autoCloseLob","destroy","_checkIsBfile","type","DB_TYPE_BFILE","throwErr","ERR_OPERATION_ONLY_SUPPORTED_ON_BFILE","_checkNotBfile","ERR_OPERATION_NOT_SUPPORTED_ON_BFILE","_destroy","err","cb","message","startsWith","_impl","lobImpl","close","closeErr","_read","data","_serializedRead","length","push","_readData","assert","ERR_INVALID_LOB","read","transformErr","_setup","autoCloseLob","_chunkSize","getChunkSize","_pieceSize","getPieceSize","_length","getLength","_type","getType","getTypeByNum","_write","encoding","DB_TYPE_BLOB","isBuffer","from","DB_TYPE_CLOB","toString","_serializedWrite","_writeData","write","chunkSize","assertArgCount","arguments","emit","getData","amount","undefined","assertParamValue","Number","isInteger","getDirFileName","setDirFileName","a1","isObject","fileExists","pieceSize","value","assertPropValue","setPieceSize","wrapFns","prototype","ERR_BUSY_LOB","serialize","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/lob.js"],"sourcesContent":["// Copyright (c) 2016, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst { Duplex } = require('stream');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst types = require('./types.js');\n\nclass Lob extends Duplex {\n\n  constructor() {\n    super({ decodeStrings: false });\n    this.offset = 1;\n    this._isActive = false;\n    this.once('finish', function() {\n      if (this._autoCloseLob) {\n        this.destroy();\n      }\n    });\n  }\n\n  // called by BFILE specific functions to throw errors for other\n  // datatypes.\n  _checkIsBfile() {\n    if (this.type !== types.DB_TYPE_BFILE) {\n      errors.throwErr(errors.ERR_OPERATION_ONLY_SUPPORTED_ON_BFILE);\n    }\n  }\n\n  // called by functions not allowed for BFILE and throw errors if\n  // such operations are performed on BFILE.\n  _checkNotBfile() {\n    if (this.type === types.DB_TYPE_BFILE) {\n      errors.throwErr(errors.ERR_OPERATION_NOT_SUPPORTED_ON_BFILE);\n    }\n  }\n\n  // called by stream.destroy() and ensures that the LOB is closed if it has\n  // not already been closed (never called directly)\n  async _destroy(err, cb) {\n    // if LOB was already closed, nothing to do!\n    if (err && err.message.startsWith(\"NJS-003:\"))\n      delete this._impl;\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n      } catch (closeErr) {\n        cb(closeErr);\n        return;\n      }\n    }\n    cb(err);\n  }\n\n  // implementation of streaming read; if LOB is set to auto-close, the lob is\n  // automatically closed when an error occurs or when there are no more bytes\n  // to transfer; all that needs to be done here is to destroy the streaming\n  // LOB\n  async _read() {\n    try {\n      const data = await this._serializedRead(this.offset);\n      if (data) {\n        this.offset += data.length;\n        this.push(data);\n      } else {\n        this.push(null);\n        if (this._autoCloseLob) {\n          this.destroy();\n        }\n      }\n    } catch (err) {\n      if (this._autoCloseLob)\n        this.destroy(err);\n      throw err;\n    }\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _readData(offset) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      return await this._impl.read(offset);\n    } catch (err) {\n      throw errors.transformErr(err, this._readData);\n    }\n  }\n\n  // called to associate a LOB implementation with this user facing object\n  _setup(lobImpl, autoCloseLob) {\n    this._impl = lobImpl;\n    // chunk size is not defined for BFILE LOBs\n    if (this.type !== types.DB_TYPE_BFILE) {\n      this._chunkSize = lobImpl.getChunkSize();\n    }\n    this._pieceSize = lobImpl.getPieceSize();\n    this._length = lobImpl.getLength();\n    this._type = lobImpl.getType();\n    if (typeof this._type === 'number') {\n      this._type = types.getTypeByNum(this._type);\n    }\n    this._autoCloseLob = autoCloseLob;\n  }\n\n  // implementation of streaming write; if LOB is set to auto-close, the lob is\n  // automatically closed in the \"finish\" event; all that needs to be done here\n  // is to destroy the streaming LOB\n  async _write(data, encoding, cb) {\n\n    // convert data if needed\n    if (this.type == constants.DB_TYPE_BLOB && !Buffer.isBuffer(data)) {\n      data = Buffer.from(data);\n    } else if (this.type == constants.DB_TYPE_CLOB &&\n        Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    try {\n      await this._serializedWrite(this.offset, data);\n    } catch (err) {\n      if (this._autoCloseLob)\n        this.destroy(err);\n      cb(err);\n      return;\n    }\n    this.offset += data.length;\n    cb(null);\n\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _writeData(offset, data) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      await this._impl.write(offset, data);\n    } catch (err) {\n      throw errors.transformErr(err, this._writeData);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // chunkSize\n  //\n  // Property for the chunk size of the LOB.\n  //---------------------------------------------------------------------------\n  get chunkSize() {\n    this._checkNotBfile();\n    return this._chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the LOB and make it unusable for further operations. If the LOB is\n  // already closed, nothing is done in order to support multiple close()\n  // calls.\n  //\n  // This method is deprecated and will be removed in a future version of the\n  // node-oracledb driver. Use lob.destroy() instead. NOTE: this method will\n  // emit a duplicate \"close\" event in order to be compatible with previous\n  // versions of node-oracledb.\n  //---------------------------------------------------------------------------\n  async close() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n        this.emit('close');\n      } catch (err) {\n        this.destroy(err);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Return a portion (or all) of the data in the LOB. Note that the amount\n  // and offset are in bytes for BLOB and BFILE type LOBs and in UCS - 2 code\n  // points for CLOB and NCLOB type LOBs.UCS-2 code points are equivalent\n  // to characters for all but supplemental characters.If supplemental\n  // characters are in the LOB, the offset and amount will have to be chosen\n  // carefully to avoid splitting a character.\n  // Returns data in the LOB as a single string or buffer.\n  //---------------------------------------------------------------------------\n  async getData(offset, amount) {\n    errors.assertArgCount(arguments, 0, 2);\n    if (offset === undefined) {\n      offset = 1;\n    } else {\n      errors.assertParamValue(Number.isInteger(offset) && offset > 0, 1);\n    }\n    if (amount === undefined) {\n      amount = 0;\n    } else {\n      errors.assertParamValue(Number.isInteger(amount) && amount > 0, 2);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    return await this._impl.getData(offset, amount);\n  }\n\n  //---------------------------------------------------------------------------\n  // getDirFileName()\n  //  To obtain the BFILE Lob object properties dirName & fileName\n  //---------------------------------------------------------------------------\n  getDirFileName() {\n    this._checkIsBfile();\n    return this._impl.getDirFileName();\n  }\n\n  //--------------------------------------------------------------------------\n  // setDirFileName()\n  //  To set the BFILE Lob object properties dirName & fileName\n  //--------------------------------------------------------------------------\n  setDirFileName(a1) {\n    this._checkIsBfile();\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(a1), 1);\n    this._impl.setDirFileName(a1);\n  }\n\n  //---------------------------------------------------------------------------\n  // fileExists\n  //\n  //   To obtain file existence status of BFILE file\n  //---------------------------------------------------------------------------\n  async fileExists() {\n    this._checkIsBfile();\n    return await this._impl.fileExists();\n  }\n\n  //---------------------------------------------------------------------------\n  // length\n  //\n  // Property for the length of the LOB.\n  //---------------------------------------------------------------------------\n  get length() {\n    return this._length;\n  }\n\n  //---------------------------------------------------------------------------\n  // pieceSize\n  //\n  // Property for the size to use for each piece that is transferred when\n  // reading from the LOB.\n  //---------------------------------------------------------------------------\n  get pieceSize() {\n    return this._pieceSize;\n  }\n\n  set pieceSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"pieceSize\");\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    this._impl.setPieceSize(value);\n    this._pieceSize = value;\n  }\n\n  //---------------------------------------------------------------------------\n  // type\n  //\n  // Property for the type of the LOB.\n  //---------------------------------------------------------------------------\n  get type() {\n    return this._type;\n  }\n\n}\n\nnodbUtil.wrapFns(Lob.prototype, errors.ERR_BUSY_LOB,\n  \"close\",\n  \"fileExists\",\n  \"getData\");\nLob.prototype._serializedRead = nodbUtil.serialize(Lob.prototype._readData);\nLob.prototype._serializedWrite = nodbUtil.serialize(Lob.prototype._writeData);\n\nmodule.exports = Lob;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}