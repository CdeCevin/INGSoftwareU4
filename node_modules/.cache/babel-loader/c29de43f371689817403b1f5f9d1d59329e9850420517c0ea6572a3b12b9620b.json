{"ast":null,"code":"// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst utils = require(\"../utils\");\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\nconst {\n  ThinDbObjectImpl,\n  readXML\n} = require(\"../../dbObject.js\");\nconst ThinLobImpl = require(\"../../lob.js\");\nconst errors = require('../../../errors');\nconst types = require('../../../types.js');\n\n/**\n * Handles data like row header, rowdata , ... recevied from an RPC Execute\n *\n * @class MessageWithData\n * @extends {Message}\n */\nclass MessageWithData extends Message {\n  constructor(connection, statement = null, options = null) {\n    super(connection);\n    this.statement = statement;\n    this.options = options;\n    this.offset = 0;\n    this.numExecs = 1;\n    this.arrayDmlRowCounts = false;\n    this.requiresDefine = false;\n    this.rowIndex = statement.bufferRowCount || 0;\n    this.dmlRowCounts = [];\n    this.batchErrors = false;\n    this.outVariables = [];\n    this.inFetch = false;\n    this.parseOnly = false;\n    this.resultSetsToSetup = [];\n    this.deferredErr = null;\n  }\n\n  /**\n    * processMessage() - Process the data type message\n    */\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DESCRIBE_INFO) {\n      buf.skipBytesChunked();\n      const prevQueryVars = this.statement.queryVars;\n      this.statement.queryVars = [];\n      this.statement.numQueryVars = 0;\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n      this.processDescribeInfo(buf, this.resultSet, prevQueryVars);\n      this.outVariables = this.statement.queryVars;\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_HEADER) {\n      this.processRowHeader(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_DATA) {\n      this.processRowData(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IMPLICIT_RESULTSET) {\n      this.processImplicitResultSet(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_BIT_VECTOR) {\n      this.processBitVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IO_VECTOR) {\n      this.processIOVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS) {\n      this.flushOutBinds = true;\n      this.endOfResponse = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n  processErrorInfo(buf) {\n    super.processErrorInfo(buf);\n    if (this.errorInfo.cursorId !== 0) {\n      this.statement.cursorId = this.errorInfo.cursorId;\n    }\n    if (!this.statement.isPlSql) {\n      this.statement.rowCount = this.errorInfo.rowCount;\n    }\n    // we do not set the lastRowid if the rows affected is 0\n    if (this.errorInfo.rowCount > 0) {\n      this.statement.lastRowid = utils.encodeRowID(this.errorInfo.rowID);\n    }\n    this.options.batchErrors = this.errorInfo.batchErrors;\n    if (this.batchErrors && this.options.batchErrors === null) {\n      this.options.batchErrors = [];\n    }\n    if (this.errorInfo.num === constants.TNS_ERR_NO_DATA_FOUND && this.statement.isQuery) {\n      this.errorInfo.num = 0;\n      this.errorOccurred = false;\n      this.statement.moreRowsToFetch = false;\n    } else if (this.retry) {\n      this.retry = false;\n    } else if (this.statement.isQuery && (this.errorInfo.num === constants.TNS_ERR_VAR_NOT_IN_SELECT_LIST || this.errorInfo.num === constants.TNS_ERR_INCONSISTENT_DATA_TYPES)) {\n      this.retry = true;\n      this.connection.statementCache.clearCursor(this.statement);\n    } else if (this.errorInfo.num !== 0 && this.errorInfo.cursorId !== 0) {\n      if (!errors.ERR_INTEGRITY_ERROR_CODES.includes(this.errorInfo.num)) {\n        this.connection.statementCache.clearCursor(this.statement);\n        this.statement.returnToCache = false;\n      }\n    }\n    if (this.errorInfo.batchErrors) {\n      this.errorOccurred = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // If we have fetched this column earlier, we set that\n  // fetch type for the describe info variable received\n  // assuming the returned column order is same as previous.\n  //---------------------------------------------------------------------------\n  _adjustFetchType(pVar, cVar) {\n    if (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_CLOB && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG || cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_JSON && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR || cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_VECTOR && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG) {\n      cVar.type = pVar.fetchInfo.fetchType;\n      cVar.maxSize = pVar.maxSize;\n    }\n  }\n  processDescribeInfo(buf, resultSet, prevQueryVars) {\n    const statement = resultSet.statement;\n    buf.skipUB4(); // max row size\n    statement.numQueryVars = buf.readUB4();\n    if (statement.numQueryVars > 0) {\n      buf.skipUB1();\n    }\n    resultSet.metadata = [];\n    const metadata = [];\n    const queryVars = [];\n    for (let i = 0; i < statement.numQueryVars; i++) {\n      const variable = this.processColumnInfo(buf, i + 1);\n      if (prevQueryVars && i < prevQueryVars.length) {\n        this._adjustFetchType(prevQueryVars[i], variable);\n      }\n      queryVars.push(variable);\n      metadata.push(variable.fetchInfo);\n    }\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked(); // current date\n    }\n    buf.skipUB4(); // dcbflag\n    buf.skipUB4(); // dcbmdbz\n    buf.skipUB4(); // dcbmnpr\n    buf.skipUB4(); // dcbmxpr\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n\n    /*\n     * The message state(resultSet) and statement state(queryVars) is modified\n     * at end of the DescribeInfo function so that an OutOfPacketsError\n     * won't cause partial information state to be stored.\n     */\n    resultSet.metadata = metadata;\n    statement.queryVars = queryVars;\n    this.resultSetsToSetup.push(resultSet);\n  }\n  processColumnInfo(buf, columnNum) {\n    const dataType = buf.readUInt8();\n    buf.skipUB1(); // flags\n    const precision = buf.readInt8();\n    const scale = buf.readInt8();\n    const maxSize = buf.readUB4();\n    buf.skipUB4(); // max number of array elements\n    buf.skipUB8(); // cont flags\n    let oid;\n    let numBytes = buf.readUB4(); // OID\n    if (numBytes > 0) {\n      oid = Buffer.from(buf.readBytesWithLength());\n    }\n    buf.skipUB2(); // version\n    buf.skipUB2(); // character set id\n    const csfrm = buf.readUInt8(); // character set form\n    let size = buf.readUB4();\n    if (dataType === constants.TNS_DATA_TYPE_RAW) {\n      size = maxSize;\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.skipUB4(); // oaccolid\n    }\n    const nullable = Boolean(buf.readUInt8());\n    buf.skipUB1(); // v7 length of name\n    let name;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      name = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    let schema;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      schema = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    numBytes = buf.readUB4();\n    let typeName;\n    if (numBytes > 0) {\n      typeName = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    buf.skipUB2(); // column position\n    const udsFlags = buf.readUB4(); // uds flag\n\n    // build metadata\n    const fetchInfo = {\n      name: name,\n      dbType: types.getTypeByOraTypeNum(dataType, csfrm),\n      nullable: nullable\n    };\n    fetchInfo.isJson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_JSON);\n    fetchInfo.isOson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_OSON);\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainSchema = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainName = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_3) {\n      if (buf.readUB4() > 0) {\n        fetchInfo.annotations = {};\n        buf.skipUB1();\n        const numAnnotations = buf.readUB4();\n        buf.skipUB1();\n        let key, value;\n        for (let i = 0; i < numAnnotations; i++) {\n          buf.skipUB4();\n          value = \"\";\n          key = buf.readStr(constants.CSFRM_IMPLICIT);\n          numBytes = buf.readUB4();\n          if (numBytes > 0) {\n            value = buf.readStr(constants.CSFRM_IMPLICIT);\n          }\n          fetchInfo.annotations[key] = value;\n          buf.skipUB4(); // flags\n        }\n        buf.skipUB4(); // flags\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_4) {\n      const dimensions = buf.readUB4();\n      const vectorFormat = buf.readUInt8();\n      const vectorFlags = buf.readUInt8();\n      if (fetchInfo.dbType === types.DB_TYPE_VECTOR) {\n        if (!(vectorFlags & constants.VECTOR_META_FLAG_FLEXIBLE_DIM)) {\n          fetchInfo.vectorDimensions = dimensions;\n        }\n        if (vectorFormat !== constants.VECTOR_FORMAT_FLEX) {\n          fetchInfo.vectorFormat = vectorFormat;\n        }\n      }\n    }\n    switch (fetchInfo.dbType) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_CHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_RAW:\n        fetchInfo.byteSize = size;\n        break;\n      case types.DB_TYPE_NUMBER:\n        fetchInfo.precision = precision;\n        break;\n      case types.DB_TYPE_TIMESTAMP:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n        fetchInfo.precision = scale;\n        break;\n      case types.DB_TYPE_OBJECT:\n        fetchInfo.dbTypeClass = this.connection._getDbObjectType(schema, typeName, undefined, oid);\n        if (fetchInfo.dbTypeClass.partial) {\n          this.connection._partialDbObjectTypes.push(fetchInfo.dbTypeClass);\n        }\n        if (fetchInfo.dbTypeClass.isXmlType) {\n          fetchInfo.dbType = types.DB_TYPE_XMLTYPE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (fetchInfo.dbType === types.DB_TYPE_NUMBER) {\n      fetchInfo.scale = scale;\n    }\n    return {\n      fetchInfo: fetchInfo,\n      type: fetchInfo.dbType,\n      maxSize: maxSize,\n      columnNum: columnNum,\n      values: new Array(this.options.fetchArraySize)\n    };\n  }\n  processRowHeader(buf) {\n    buf.skipUB1(); // flags\n    buf.skipUB2(); // num requests\n    buf.skipUB4(); // iteration number\n    buf.skipUB4(); // num iters\n    buf.skipUB2(); // buffer length\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      this.bitVector = Buffer.from(buf.readBytesWithLength());\n    }\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked(); // rxhrid\n    }\n  }\n  isDuplicateData(columnName) {\n    if (!this.bitVector) {\n      return false;\n    }\n    const byteNum = Math.floor(columnName / 8);\n    const bitNum = columnName % 8;\n    return (this.bitVector[byteNum] & 1 << bitNum) === 0;\n  }\n  processRowData(buf) {\n    let value;\n    for (const [col, variable] of this.outVariables.entries()) {\n      if (variable.isArray) {\n        variable.numElementsInArray = buf.readUB4();\n        const values = new Array(variable.numElementsInArray).fill(null);\n        for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n          value = this.processColumnData(buf, variable, pos);\n          values[pos] = value;\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.statement.isReturning) {\n        const numRows = buf.readUB4();\n        const values = Array(numRows).fill(null);\n        for (let j = 0; j < numRows; j++) {\n          values[j] = this.processColumnData(buf, variable, j);\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.isDuplicateData(col)) {\n        if (this.rowIndex === 0 && variable.outConverter) {\n          value = variable.lastRawValue;\n        } else {\n          value = variable.values[this.statement.lastRowIndex];\n        }\n        variable.values[this.rowIndex] = value;\n      } else {\n        value = this.processColumnData(buf, variable, this.rowIndex);\n        variable.values[this.rowIndex] = value;\n      }\n    }\n    this.rowIndex++;\n    if (this.inFetch) {\n      this.statement.lastRowIndex = this.rowIndex - 1;\n      this.statement.bufferRowCount++;\n      this.bitVector = null;\n    }\n  }\n  processIOVector(buf) {\n    let numBytes;\n    buf.skipUB1(); // flag\n    const temp16 = buf.readUB2(); // num requests\n    const temp32 = buf.readUB4(); // iter num\n    const numBinds = temp32 * 256 + temp16;\n    buf.skipUB4(); // num iters this time\n    buf.skipUB2(); // uac buffer length\n    numBytes = buf.readUB2(); // bit vector for fast fetch\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numBytes = buf.readUB2(); // rowid\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    this.outVariables = [];\n    for (let i = 0; i < numBinds; i++) {\n      // bind directions\n      const bindInfo = this.statement.bindInfoList[i];\n      bindInfo.bindDir = buf.readUInt8();\n      if (bindInfo.bindDir === constants.TNS_BIND_DIR_INPUT) {\n        continue;\n      }\n      this.outVariables.push(bindInfo.bindVar);\n    }\n  }\n  processColumnData(buf, variable) {\n    const dbType = variable.type;\n    const oraTypeNum = dbType._oraTypeNum;\n    const csfrm = dbType._csfrm;\n    const maxSize = variable.maxSize;\n    let colValue = null;\n    if (maxSize === 0 && oraTypeNum !== constants.TNS_DATA_TYPE_LONG && oraTypeNum !== constants.TNS_DATA_TYPE_LONG_RAW && oraTypeNum !== constants.TNS_DATA_TYPE_UROWID) {\n      colValue = null;\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR || oraTypeNum === constants.TNS_DATA_TYPE_CHAR || oraTypeNum === constants.TNS_DATA_TYPE_LONG) {\n      if (csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n      }\n      colValue = buf.readStr(csfrm);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_RAW || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      colValue = buf.readBytesWithLength();\n      if (colValue !== null) {\n        colValue = Buffer.from(colValue);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER) {\n      colValue = buf.readOracleNumber();\n      if (!this.inFetch && colValue !== null) colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ) {\n      const useLocalTime = oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP;\n      colValue = buf.readOracleDate(useLocalTime);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_ROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        const numBytes = buf.readUInt8();\n        if (isNullLength(numBytes)) {\n          colValue = null;\n        } else {\n          const rowid = buf.readRowID();\n          colValue = utils.encodeRowID(rowid);\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_UROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        colValue = buf.readURowID();\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      colValue = buf.readBinaryDouble();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      colValue = buf.readBinaryFloat();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      colValue = buf.readOracleNumber();\n      if (colValue !== null) colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      const numBytes = buf.readUInt8();\n      if (isNullLength(numBytes)) {\n        colValue = null;\n      } else {\n        colValue = this.createCursorFromDescribe(buf);\n        colValue.statement.cursorId = buf.readUB2();\n        // If the cursor ID is 0 for the returned ref cursor then\n        // it is an invalid cursor\n        if (colValue.statement.cursorId === 0 && variable.dir !== constants.BIND_IN) {\n          if (this.options.nullifyInvalidCursor) {\n            colValue = null;\n          } else {\n            errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n          }\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      colValue = buf.readBool();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB || oraTypeNum === constants.TNS_DATA_TYPE_BFILE) {\n      let length = 0;\n      let chunkSize = 0;\n      const bvalue = buf.readUB4();\n      if (bvalue > 0) {\n        // Non Null data in column\n        colValue = new ThinLobImpl();\n        if (oraTypeNum === constants.TNS_DATA_TYPE_BFILE) {\n          buf.skipUB4();\n        } else {\n          length = buf.readUB8();\n          chunkSize = buf.readUB4();\n        }\n        const locator = Buffer.from(buf.readBytesWithLength());\n        colValue.init(this.connection, locator, dbType, length, chunkSize);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      colValue = buf.readOson();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      colValue = buf.readVector();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      const obj = buf.readDbObject();\n      if (obj.packedData) {\n        const objType = variable.fetchInfo ? variable.fetchInfo.dbTypeClass : variable.typeClass;\n        if (variable.type === types.DB_TYPE_XMLTYPE) {\n          colValue = readXML(this.connection, obj.packedData);\n        } else {\n          colValue = new ThinDbObjectImpl(objType, obj.packedData);\n          colValue.toid = obj.toid;\n          colValue.oid = obj.oid;\n        }\n      }\n    } else {\n      errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE, dbType.num, variable.columnNum);\n    }\n    if (!this.inFetch) {\n      const actualNumBytes = buf.readSB4();\n      if (actualNumBytes < 0 && oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        colValue = null;\n\n        // For objects, maxsize validation is skipped\n      } else if (actualNumBytes !== 0 && colValue !== null && oraTypeNum !== constants.TNS_DATA_TYPE_INT_NAMED) {\n        this.saveDeferredErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || variable.maxSize > buf.caps.maxStringSize) {\n      buf.skipSB4(); // null indicator\n      buf.skipUB4(); // return code\n    }\n    return colValue;\n  }\n  processReturnParameter(buf) {\n    let keywordNum = 0;\n    let keyTextValue;\n    let numParams = buf.readUB2(); // al8o4l (ignored)\n\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n    }\n    let numBytes = buf.readUB2(); // al8txl (ignored)\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numParams = buf.readUB2(); // num key/value pairs\n    for (let i = 0; i < numParams; i++) {\n      numBytes = buf.readUB2(); // key\n      if (numBytes > 0) {\n        keyTextValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB2(); // value\n      if (numBytes > 0) {\n        buf.skipBytesChunked();\n      }\n      keywordNum = buf.readUB2(); // keyword num\n      if (keywordNum === constants.TNS_KEYWORD_NUM_CURRENT_SCHEMA) {\n        this.connection.currentSchema = keyTextValue;\n      } else if (keywordNum === constants.TNS_KEYWORD_NUM_EDITION) {\n        this.connection._edition = keyTextValue;\n      }\n    }\n    numBytes = buf.readUB2(); // registration\n    if (numBytes > 0) {\n      buf.skip(numBytes);\n    }\n    if (this.arrayDmlRowCounts) {\n      const numRows = buf.readUB4();\n      const rowCounts = this.options.dmlRowCounts = [];\n      for (let i = 0; i < numRows; i++) {\n        const rowCount = buf.readUB8();\n        rowCounts.push(rowCount);\n      }\n    }\n  }\n  async postProcess() {\n    if (this.deferredErr) {\n      throw this.deferredErr;\n    }\n    if (this.outVariables) {\n      for (const variable of this.outVariables) {\n        if (variable.isArray) {\n          if (variable.outConverter) {\n            for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n              variable.values[0][pos] = await variable.outConverter(variable.values[0][pos]);\n            }\n          }\n        } else {\n          if (variable.outConverter) {\n            variable.values[0] = await variable.outConverter(variable.values[0]);\n          }\n        }\n      }\n    }\n    await this.connection._populatePartialDbObjectTypes();\n    for (const resultSet of this.resultSetsToSetup) {\n      resultSet._setup(this.options, resultSet.metadata);\n      // LOBs always require define and they change the type that is actually\n      // returned by the server\n      for (const variable of resultSet.statement.queryVars) {\n        if (variable.type === types.DB_TYPE_CLOB || variable.type === types.DB_TYPE_NCLOB || variable.type === types.DB_TYPE_BLOB || variable.type === types.DB_TYPE_BFILE || variable.type === types.DB_TYPE_JSON || variable.type === types.DB_TYPE_VECTOR) {\n          if (variable.type !== variable.fetchInfo.fetchType) {\n            variable.type = variable.fetchInfo.fetchType;\n            variable.maxSize = constants.TNS_MAX_LONG_LENGTH;\n          }\n          if (!resultSet.statement.noPrefetch) {\n            resultSet.statement.requiresDefine = true;\n            resultSet.statement.noPrefetch = true;\n          }\n        }\n      }\n    }\n  }\n  preProcess() {\n    if (this.statement.isReturning && !this.parseOnly) {\n      this.outVariables = [];\n      for (const bindInfo of this.statement.bindInfoList) {\n        if (bindInfo.isReturnBind) {\n          this.outVariables.push(bindInfo.bindVar);\n        }\n      }\n    }\n    if (this.statement.isQuery) {\n      this.inFetch = true;\n      if (this.statement.queryVars) {\n        this.outVariables = [];\n        for (let i = 0; i < this.statement.queryVars.length; i++) {\n          this.outVariables.push(this.statement.queryVars[i]);\n        }\n      }\n    }\n  }\n  processBitVector(buf) {\n    this.numColumnsSent = buf.readUB2();\n    let numBytes = Math.floor(this.statement.numQueryVars / 8);\n    if (this.statement.numQueryVars % 8 > 0) {\n      numBytes += 1;\n    }\n    this.bitVector = Buffer.from(buf.readBytes(numBytes));\n  }\n  processBindParams(buf, params) {\n    const bindVars = [];\n    const nonReturningParams = [];\n    for (const bindInfo of params) {\n      if (!bindInfo.isReturnBind) {\n        nonReturningParams.push(bindInfo);\n      }\n      bindVars.push(bindInfo.bindVar);\n    }\n    this.writeColumnMetadata(buf, bindVars);\n    return nonReturningParams;\n  }\n  writeColumnMetadata(buf, bindVars) {\n    for (const variable of bindVars) {\n      let oraTypeNum = variable.type._oraTypeNum;\n      let maxSize = variable.maxSize || variable.type._bufferSizeFactor;\n      let lobPrefetchLength = 0;\n\n      // NCHAR, NVARCHAR reports ORA-01460: unimplemented or unreasonable\n      // conversion requested if maxSize is not multiplied by the\n      // bufferSizeFactor\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        maxSize *= variable.type._bufferSizeFactor;\n      }\n      if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n        oraTypeNum = constants.TNS_DATA_TYPE_VARCHAR;\n        maxSize = constants.TNS_MAX_UROWID_LENGTH;\n      }\n      let flag = constants.TNS_BIND_USE_INDICATORS;\n      if (variable.isArray) {\n        flag |= constants.TNS_BIND_ARRAY;\n      }\n      let contFlag = 0;\n      if (variable.type === types.DB_TYPE_BLOB || variable.type === types.DB_TYPE_CLOB || variable.type === types.DB_TYPE_NCLOB || variable.type === types.DB_TYPE_BFILE) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n      } else if (variable.type === types.DB_TYPE_JSON) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_JSON_MAX_LENGTH;\n      } else if (variable.type === types.DB_TYPE_VECTOR) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_VECTOR_MAX_LENGTH;\n      }\n      buf.writeUInt8(oraTypeNum);\n      buf.writeUInt8(flag);\n      // precision and scale are always written as zero as the server\n      // expects that and complains if any other value is sent!\n      buf.writeUInt8(0);\n      buf.writeUInt8(0);\n      if (maxSize > buf.caps.maxStringSize) {\n        buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);\n      } else {\n        buf.writeUB4(maxSize);\n      }\n      if (variable.isArray) {\n        buf.writeUB4(variable.maxArraySize);\n      } else {\n        buf.writeUB4(0); // max num elements\n      }\n      buf.writeUB4(contFlag);\n      if (variable.objType) {\n        const objType = variable.objType;\n        buf.writeUB4(objType.oid.length);\n        buf.writeBytesWithLength(objType.oid);\n        buf.writeUB2(objType.version);\n      } else {\n        buf.writeUB4(0); // OID\n        buf.writeUB2(0); // version\n      }\n      if (variable.type._csfrm !== 0) {\n        buf.writeUB2(constants.TNS_CHARSET_UTF8);\n      } else {\n        buf.writeUB2(0);\n      }\n      buf.writeUInt8(variable.type._csfrm);\n      buf.writeUB4(lobPrefetchLength); // max chars (LOB prefetch)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n        buf.writeUB4(0); // oaccolid\n      }\n    }\n  }\n  writeBindParamsRow(buf, params, pos) {\n    const offset = this.offset;\n    let foundLong = false;\n    for (const bindInfo of params) {\n      if (bindInfo.isReturnBind) continue;\n      const variable = bindInfo.bindVar;\n      if (variable.isArray) {\n        const numElements = variable.values.length;\n        buf.writeUB4(numElements);\n        for (let i = 0; i < numElements; i++) {\n          this.writeBindParamsColumn(buf, variable, variable.values[i]);\n        }\n      } else {\n        if (!this.statement.isPlSql && variable.maxSize > buf.caps.maxStringSize) {\n          foundLong = true;\n        } else {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n    if (foundLong) {\n      for (const bindInfo of params) {\n        if (bindInfo.isReturnBind) continue;\n        const variable = bindInfo.bindVar;\n        if (variable.maxSize > buf.caps.maxStringSize) {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n  }\n  writeBindParamsColumn(buf, variable, value) {\n    const oraTypeNum = variable.type._oraTypeNum;\n    let tempVal;\n    if ((value === undefined || value === null) && oraTypeNum !== constants.TNS_DATA_TYPE_CURSOR && oraTypeNum !== constants.TNS_DATA_TYPE_JSON) {\n      if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        buf.writeUInt8(constants.TNS_ESCAPE_CHAR);\n        buf.writeUInt8(1);\n      } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n        buf.writeUB4(0); // TOID\n        buf.writeUB4(0); // OID\n        buf.writeUB4(0); // snapshot\n        buf.writeUB4(0); // version\n        buf.writeUB4(0); // packed data length\n        buf.writeUB4(constants.TNS_OBJ_TOP_LEVEL); // flags\n      } else {\n        buf.writeUInt8(0);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER || oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      if (typeof value === 'boolean') {\n        tempVal = value ? \"1\" : \"0\";\n      } else {\n        tempVal = value.toString();\n      }\n      buf.writeOracleNumber(tempVal);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR || oraTypeNum === constants.TNS_DATA_TYPE_CHAR || oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_RAW || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        value = Buffer.from(value, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        value = Buffer.from(value);\n      }\n      buf.writeBytesWithLength(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ) {\n      buf.writeOracleDate(value, variable.type);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      buf.writeUInt8(8);\n      buf.writeBinaryDouble(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      buf.writeUInt8(4);\n      buf.writeBinaryFloat(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      let cursor = value;\n      if (!value) {\n        cursor = this.connection._createResultSet();\n      }\n      if (cursor.statement.cursorId === 0) {\n        buf.writeUInt8(1);\n        buf.writeUInt8(0);\n      } else {\n        buf.writeUB4(1);\n        buf.writeUB4(cursor.statement.cursorId);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      if (value) {\n        buf.writeUInt8(2);\n        buf.writeUInt16BE(0x0101);\n      } else {\n        buf.writeUInt16BE(0x0100);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB || oraTypeNum === constants.TNS_DATA_TYPE_BFILE) {\n      buf.writeUB4(value._locator.length);\n      buf.writeBytesWithLength(value._locator);\n    } else if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n      buf.writeBytesWithLength(Buffer.from(value));\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      buf.writeOson(value, this.connection._osonMaxFieldNameSize);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      buf.writeVector(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      buf.writeDbObject(value);\n    } else {\n      const message = `Binding data of type ${variable.type}`;\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, message);\n    }\n  }\n  createCursorFromDescribe(buf) {\n    const resultSet = this.connection._createResultSet(this.options);\n    resultSet.options.moreRowsToFetch = true;\n    resultSet.statement.isQuery = true;\n    resultSet.statement.requiresFullExecute = true;\n    this.processDescribeInfo(buf, resultSet);\n    return resultSet;\n  }\n  processImplicitResultSet(buf) {\n    this.options.implicitResultSet = [];\n    const numResults = buf.readUB4();\n    for (let i = 0; i < numResults; i++) {\n      const numBytes = buf.readUInt8();\n      buf.skipBytes(numBytes);\n      const childResultSet = this.createCursorFromDescribe(buf);\n      childResultSet.statement.cursorId = buf.readUB2();\n      this.options.implicitResultSet.push(childResultSet);\n    }\n  }\n}\nconst isNullLength = len => {\n  return len === 0 || len === constants.TNS_NULL_LENGTH_INDICATOR;\n};\nmodule.exports = MessageWithData;","map":{"version":3,"names":["Buffer","require","utils","constants","Message","ThinDbObjectImpl","readXML","ThinLobImpl","errors","types","MessageWithData","constructor","connection","statement","options","offset","numExecs","arrayDmlRowCounts","requiresDefine","rowIndex","bufferRowCount","dmlRowCounts","batchErrors","outVariables","inFetch","parseOnly","resultSetsToSetup","deferredErr","processMessage","buf","messageType","TNS_MSG_TYPE_DESCRIBE_INFO","skipBytesChunked","prevQueryVars","queryVars","numQueryVars","bufferRowIndex","processDescribeInfo","resultSet","TNS_MSG_TYPE_ROW_HEADER","processRowHeader","TNS_MSG_TYPE_ROW_DATA","processRowData","TNS_MSG_TYPE_IMPLICIT_RESULTSET","processImplicitResultSet","TNS_MSG_TYPE_BIT_VECTOR","processBitVector","TNS_MSG_TYPE_IO_VECTOR","processIOVector","TNS_MSG_TYPE_FLUSH_OUT_BINDS","flushOutBinds","endOfResponse","TNS_MSG_TYPE_ERROR","processErrorInfo","errorInfo","cursorId","isPlSql","rowCount","lastRowid","encodeRowID","rowID","num","TNS_ERR_NO_DATA_FOUND","isQuery","errorOccurred","moreRowsToFetch","retry","TNS_ERR_VAR_NOT_IN_SELECT_LIST","TNS_ERR_INCONSISTENT_DATA_TYPES","statementCache","clearCursor","ERR_INTEGRITY_ERROR_CODES","includes","returnToCache","_adjustFetchType","pVar","cVar","fetchInfo","dbType","_oraTypeNum","TNS_DATA_TYPE_CLOB","fetchType","TNS_DATA_TYPE_LONG","TNS_DATA_TYPE_BLOB","TNS_DATA_TYPE_LONG_RAW","TNS_DATA_TYPE_JSON","TNS_DATA_TYPE_VARCHAR","TNS_DATA_TYPE_VECTOR","type","maxSize","skipUB4","readUB4","skipUB1","metadata","i","variable","processColumnInfo","length","push","numBytes","columnNum","dataType","readUInt8","precision","readInt8","scale","skipUB8","oid","from","readBytesWithLength","skipUB2","csfrm","size","TNS_DATA_TYPE_RAW","caps","ttcFieldVersion","TNS_CCAP_FIELD_VERSION_12_2","nullable","Boolean","name","readStr","CSFRM_IMPLICIT","schema","typeName","udsFlags","getTypeByOraTypeNum","isJson","TNS_UDS_FLAGS_IS_JSON","isOson","TNS_UDS_FLAGS_IS_OSON","TNS_CCAP_FIELD_VERSION_23_1","domainSchema","domainName","TNS_CCAP_FIELD_VERSION_23_1_EXT_3","annotations","numAnnotations","key","value","TNS_CCAP_FIELD_VERSION_23_4","dimensions","vectorFormat","vectorFlags","DB_TYPE_VECTOR","VECTOR_META_FLAG_FLEXIBLE_DIM","vectorDimensions","VECTOR_FORMAT_FLEX","DB_TYPE_VARCHAR","DB_TYPE_NVARCHAR","DB_TYPE_CHAR","DB_TYPE_NCHAR","DB_TYPE_RAW","byteSize","DB_TYPE_NUMBER","DB_TYPE_TIMESTAMP","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_OBJECT","dbTypeClass","_getDbObjectType","undefined","partial","_partialDbObjectTypes","isXmlType","DB_TYPE_XMLTYPE","values","Array","fetchArraySize","bitVector","isDuplicateData","columnName","byteNum","Math","floor","bitNum","col","entries","isArray","numElementsInArray","fill","pos","processColumnData","isReturning","numRows","j","outConverter","lastRawValue","lastRowIndex","temp16","readUB2","temp32","numBinds","skipBytes","bindInfo","bindInfoList","bindDir","TNS_BIND_DIR_INPUT","bindVar","oraTypeNum","_csfrm","colValue","TNS_DATA_TYPE_UROWID","TNS_DATA_TYPE_CHAR","CSFRM_NCHAR","checkNCharsetId","TNS_DATA_TYPE_NUMBER","readOracleNumber","parseFloat","TNS_DATA_TYPE_DATE","TNS_DATA_TYPE_TIMESTAMP","TNS_DATA_TYPE_TIMESTAMP_LTZ","TNS_DATA_TYPE_TIMESTAMP_TZ","useLocalTime","readOracleDate","TNS_DATA_TYPE_ROWID","isNullLength","rowid","readRowID","readURowID","TNS_DATA_TYPE_BINARY_DOUBLE","readBinaryDouble","TNS_DATA_TYPE_BINARY_FLOAT","readBinaryFloat","TNS_DATA_TYPE_BINARY_INTEGER","TNS_DATA_TYPE_CURSOR","createCursorFromDescribe","dir","BIND_IN","nullifyInvalidCursor","throwErr","ERR_INVALID_REF_CURSOR","TNS_DATA_TYPE_BOOLEAN","readBool","TNS_DATA_TYPE_BFILE","chunkSize","bvalue","readUB8","locator","init","readOson","readVector","TNS_DATA_TYPE_INT_NAMED","obj","readDbObject","packedData","objType","typeClass","toid","ERR_UNSUPPORTED_DATA_TYPE","actualNumBytes","readSB4","saveDeferredErr","ERR_INSUFFICIENT_BUFFER_FOR_BINDS","maxStringSize","skipSB4","processReturnParameter","keywordNum","keyTextValue","numParams","TNS_KEYWORD_NUM_CURRENT_SCHEMA","currentSchema","TNS_KEYWORD_NUM_EDITION","_edition","skip","rowCounts","postProcess","_populatePartialDbObjectTypes","_setup","DB_TYPE_CLOB","DB_TYPE_NCLOB","DB_TYPE_BLOB","DB_TYPE_BFILE","DB_TYPE_JSON","TNS_MAX_LONG_LENGTH","noPrefetch","preProcess","isReturnBind","numColumnsSent","readBytes","processBindParams","params","bindVars","nonReturningParams","writeColumnMetadata","_bufferSizeFactor","lobPrefetchLength","TNS_MAX_UROWID_LENGTH","flag","TNS_BIND_USE_INDICATORS","TNS_BIND_ARRAY","contFlag","TNS_LOB_PREFETCH_FLAG","TNS_JSON_MAX_LENGTH","TNS_VECTOR_MAX_LENGTH","writeUInt8","writeUB4","maxArraySize","writeBytesWithLength","writeUB2","version","TNS_CHARSET_UTF8","writeBindParamsRow","foundLong","numElements","writeBindParamsColumn","tempVal","TNS_ESCAPE_CHAR","TNS_OBJ_TOP_LEVEL","toString","writeOracleNumber","TNS_ENCODING_UTF16","swap16","writeOracleDate","writeBinaryDouble","writeBinaryFloat","cursor","_createResultSet","writeUInt16BE","_locator","writeOson","_osonMaxFieldNameSize","writeVector","writeDbObject","message","ERR_NOT_IMPLEMENTED","requiresFullExecute","implicitResultSet","numResults","childResultSet","len","TNS_NULL_LENGTH_INDICATOR","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/thin/protocol/messages/withData.js"],"sourcesContent":["// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst utils = require(\"../utils\");\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\nconst { ThinDbObjectImpl, readXML } = require(\"../../dbObject.js\");\nconst ThinLobImpl = require(\"../../lob.js\");\nconst errors = require('../../../errors');\nconst types = require('../../../types.js');\n\n/**\n * Handles data like row header, rowdata , ... recevied from an RPC Execute\n *\n * @class MessageWithData\n * @extends {Message}\n */\nclass MessageWithData extends Message {\n  constructor(connection, statement = null, options = null) {\n    super(connection);\n    this.statement = statement;\n    this.options = options;\n    this.offset = 0;\n    this.numExecs = 1;\n    this.arrayDmlRowCounts = false;\n    this.requiresDefine = false;\n    this.rowIndex = statement.bufferRowCount || 0;\n    this.dmlRowCounts = [];\n    this.batchErrors = false;\n    this.outVariables = [];\n    this.inFetch = false;\n    this.parseOnly = false;\n    this.resultSetsToSetup = [];\n    this.deferredErr = null;\n  }\n\n  /**\n    * processMessage() - Process the data type message\n    */\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DESCRIBE_INFO) {\n      buf.skipBytesChunked();\n      const prevQueryVars = this.statement.queryVars;\n      this.statement.queryVars = [];\n      this.statement.numQueryVars = 0;\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n      this.processDescribeInfo(buf, this.resultSet, prevQueryVars);\n      this.outVariables = this.statement.queryVars;\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_HEADER) {\n      this.processRowHeader(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_DATA) {\n      this.processRowData(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IMPLICIT_RESULTSET) {\n      this.processImplicitResultSet(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_BIT_VECTOR) {\n      this.processBitVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IO_VECTOR) {\n      this.processIOVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS) {\n      this.flushOutBinds = true;\n      this.endOfResponse = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  processErrorInfo(buf) {\n    super.processErrorInfo(buf);\n    if (this.errorInfo.cursorId !== 0) {\n      this.statement.cursorId = this.errorInfo.cursorId;\n    }\n    if (!this.statement.isPlSql) {\n      this.statement.rowCount = this.errorInfo.rowCount;\n    }\n    // we do not set the lastRowid if the rows affected is 0\n    if (this.errorInfo.rowCount > 0) {\n      this.statement.lastRowid = utils.encodeRowID(this.errorInfo.rowID);\n    }\n    this.options.batchErrors = this.errorInfo.batchErrors;\n    if (this.batchErrors && this.options.batchErrors === null) {\n      this.options.batchErrors = [];\n    }\n    if (this.errorInfo.num === constants.TNS_ERR_NO_DATA_FOUND && this.statement.isQuery) {\n      this.errorInfo.num = 0;\n      this.errorOccurred = false;\n      this.statement.moreRowsToFetch = false;\n    } else if (this.retry) {\n      this.retry = false;\n    } else if (this.statement.isQuery &&\n      (this.errorInfo.num === constants.TNS_ERR_VAR_NOT_IN_SELECT_LIST\n        || this.errorInfo.num === constants.TNS_ERR_INCONSISTENT_DATA_TYPES)) {\n      this.retry = true;\n      this.connection.statementCache.clearCursor(this.statement);\n    } else if (this.errorInfo.num !== 0 && this.errorInfo.cursorId !== 0) {\n      if (!errors.ERR_INTEGRITY_ERROR_CODES.includes(this.errorInfo.num)) {\n        this.connection.statementCache.clearCursor(this.statement);\n        this.statement.returnToCache = false;\n      }\n    }\n    if (this.errorInfo.batchErrors) {\n      this.errorOccurred = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // If we have fetched this column earlier, we set that\n  // fetch type for the describe info variable received\n  // assuming the returned column order is same as previous.\n  //---------------------------------------------------------------------------\n  _adjustFetchType(pVar, cVar) {\n    if ((cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_CLOB\n       && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG)\n        || (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB\n          && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW)\n        || (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_JSON\n          && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR)\n        || (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_VECTOR\n          && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG)) {\n      cVar.type = pVar.fetchInfo.fetchType;\n      cVar.maxSize = pVar.maxSize;\n    }\n  }\n\n  processDescribeInfo(buf, resultSet, prevQueryVars) {\n    const statement = resultSet.statement;\n    buf.skipUB4();                              // max row size\n    statement.numQueryVars = buf.readUB4();\n    if (statement.numQueryVars > 0) {\n      buf.skipUB1();\n    }\n    resultSet.metadata = [];\n    const metadata = [];\n    const queryVars = [];\n    for (let i = 0; i < statement.numQueryVars; i++) {\n      const variable = this.processColumnInfo(buf, i + 1);\n      if (prevQueryVars && i < prevQueryVars.length) {\n        this._adjustFetchType(prevQueryVars[i], variable);\n      }\n      queryVars.push(variable);\n      metadata.push(variable.fetchInfo);\n    }\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // current date\n    }\n    buf.skipUB4();                              // dcbflag\n    buf.skipUB4();                              // dcbmdbz\n    buf.skipUB4();                              // dcbmnpr\n    buf.skipUB4();                              // dcbmxpr\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n\n    /*\n     * The message state(resultSet) and statement state(queryVars) is modified\n     * at end of the DescribeInfo function so that an OutOfPacketsError\n     * won't cause partial information state to be stored.\n     */\n    resultSet.metadata = metadata;\n    statement.queryVars = queryVars;\n    this.resultSetsToSetup.push(resultSet);\n  }\n\n  processColumnInfo(buf, columnNum) {\n    const dataType = buf.readUInt8();\n    buf.skipUB1(); // flags\n    const precision = buf.readInt8();\n    const scale = buf.readInt8();\n    const maxSize = buf.readUB4();\n    buf.skipUB4();                              // max number of array elements\n    buf.skipUB8();                              // cont flags\n    let oid;\n    let numBytes = buf.readUB4();               // OID\n    if (numBytes > 0) {\n      oid = Buffer.from(buf.readBytesWithLength());\n    }\n    buf.skipUB2();                              // version\n    buf.skipUB2();                              // character set id\n    const csfrm = buf.readUInt8();              // character set form\n    let size = buf.readUB4();\n    if (dataType === constants.TNS_DATA_TYPE_RAW) {\n      size = maxSize;\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.skipUB4();                            // oaccolid\n    }\n    const nullable = Boolean(buf.readUInt8());\n    buf.skipUB1();                              // v7 length of name\n    let name;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      name = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    let schema;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      schema = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    numBytes = buf.readUB4();\n    let typeName;\n    if (numBytes > 0) {\n      typeName = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    buf.skipUB2();                              // column position\n    const udsFlags = buf.readUB4();             // uds flag\n\n    // build metadata\n    const fetchInfo = {\n      name: name,\n      dbType: types.getTypeByOraTypeNum(dataType, csfrm),\n      nullable: nullable\n    };\n    fetchInfo.isJson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_JSON);\n    fetchInfo.isOson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_OSON);\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainSchema = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainName = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_3) {\n      if (buf.readUB4() > 0) {\n        fetchInfo.annotations = {};\n        buf.skipUB1();\n        const numAnnotations = buf.readUB4();\n        buf.skipUB1();\n        let key, value;\n        for (let i = 0; i < numAnnotations; i++) {\n          buf.skipUB4();\n          value = \"\";\n          key = buf.readStr(constants.CSFRM_IMPLICIT);\n          numBytes = buf.readUB4();\n          if (numBytes > 0) {\n            value = buf.readStr(constants.CSFRM_IMPLICIT);\n          }\n          fetchInfo.annotations[key] = value;\n          buf.skipUB4();                        // flags\n        }\n        buf.skipUB4();                          // flags\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_4) {\n      const dimensions = buf.readUB4();\n      const vectorFormat = buf.readUInt8();\n      const vectorFlags = buf.readUInt8();\n      if (fetchInfo.dbType === types.DB_TYPE_VECTOR) {\n        if (!(vectorFlags & constants.VECTOR_META_FLAG_FLEXIBLE_DIM)) {\n          fetchInfo.vectorDimensions = dimensions;\n        }\n        if (vectorFormat !== constants.VECTOR_FORMAT_FLEX) {\n          fetchInfo.vectorFormat = vectorFormat;\n        }\n      }\n    }\n\n    switch (fetchInfo.dbType) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_CHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_RAW:\n        fetchInfo.byteSize = size;\n        break;\n      case types.DB_TYPE_NUMBER:\n        fetchInfo.precision = precision;\n        break;\n      case types.DB_TYPE_TIMESTAMP:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n        fetchInfo.precision = scale;\n        break;\n      case types.DB_TYPE_OBJECT:\n        fetchInfo.dbTypeClass = this.connection._getDbObjectType(schema,\n          typeName, undefined, oid);\n        if (fetchInfo.dbTypeClass.partial) {\n          this.connection._partialDbObjectTypes.push(fetchInfo.dbTypeClass);\n        }\n        if (fetchInfo.dbTypeClass.isXmlType) {\n          fetchInfo.dbType = types.DB_TYPE_XMLTYPE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (fetchInfo.dbType === types.DB_TYPE_NUMBER) {\n      fetchInfo.scale = scale;\n    }\n    return {\n      fetchInfo: fetchInfo,\n      type: fetchInfo.dbType,\n      maxSize: maxSize,\n      columnNum: columnNum,\n      values: new Array(this.options.fetchArraySize)\n    };\n  }\n\n  processRowHeader(buf) {\n    buf.skipUB1();                              // flags\n    buf.skipUB2();                              // num requests\n    buf.skipUB4();                              // iteration number\n    buf.skipUB4();                              // num iters\n    buf.skipUB2();                              // buffer length\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      this.bitVector = Buffer.from(buf.readBytesWithLength());\n    }\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // rxhrid\n    }\n  }\n\n  isDuplicateData(columnName) {\n    if (!this.bitVector) {\n      return false;\n    }\n    const byteNum = Math.floor(columnName / 8);\n    const bitNum = columnName % 8;\n    return (this.bitVector[byteNum] & (1 << bitNum)) === 0;\n  }\n\n  processRowData(buf) {\n    let value;\n    for (const [col, variable] of this.outVariables.entries()) {\n      if (variable.isArray) {\n        variable.numElementsInArray = buf.readUB4();\n        const values = new Array(variable.numElementsInArray).fill(null);\n        for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n          value = this.processColumnData(buf, variable, pos);\n          values[pos] = value;\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.statement.isReturning) {\n        const numRows = buf.readUB4();\n        const values = Array(numRows).fill(null);\n        for (let j = 0; j < numRows; j++) {\n          values[j] = this.processColumnData(buf, variable, j);\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.isDuplicateData(col)) {\n        if (this.rowIndex === 0 && variable.outConverter) {\n          value = variable.lastRawValue;\n        } else {\n          value = variable.values[this.statement.lastRowIndex];\n        }\n        variable.values[this.rowIndex] = value;\n      } else {\n        value = this.processColumnData(buf, variable, this.rowIndex);\n        variable.values[this.rowIndex] = value;\n      }\n    }\n    this.rowIndex++;\n    if (this.inFetch) {\n      this.statement.lastRowIndex = this.rowIndex - 1;\n      this.statement.bufferRowCount++;\n      this.bitVector = null;\n    }\n  }\n\n  processIOVector(buf) {\n    let numBytes;\n    buf.skipUB1();                              // flag\n    const temp16 = buf.readUB2();              // num requests\n    const temp32 = buf.readUB4();              // iter num\n    const numBinds = temp32 * 256 + temp16;\n    buf.skipUB4();                              // num iters this time\n    buf.skipUB2();                              // uac buffer length\n    numBytes = buf.readUB2();                   // bit vector for fast fetch\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numBytes = buf.readUB2();                   // rowid\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    this.outVariables = [];\n    for (let i = 0; i < numBinds; i++) {              // bind directions\n      const bindInfo = this.statement.bindInfoList[i];\n      bindInfo.bindDir = buf.readUInt8();\n      if (bindInfo.bindDir === constants.TNS_BIND_DIR_INPUT) {\n        continue;\n      }\n      this.outVariables.push(bindInfo.bindVar);\n    }\n  }\n\n  processColumnData(buf, variable) {\n    const dbType = variable.type;\n    const oraTypeNum = dbType._oraTypeNum;\n    const csfrm = dbType._csfrm;\n    const maxSize = variable.maxSize;\n\n    let colValue = null;\n    if (maxSize === 0 && oraTypeNum !== constants.TNS_DATA_TYPE_LONG\n      && oraTypeNum !== constants.TNS_DATA_TYPE_LONG_RAW\n      && oraTypeNum !== constants.TNS_DATA_TYPE_UROWID) {\n      colValue = null;\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG\n    ) {\n      if (csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n      }\n      colValue = buf.readStr(csfrm);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      colValue = buf.readBytesWithLength();\n      if (colValue !== null) {\n        colValue = Buffer.from(colValue);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER) {\n      colValue = buf.readOracleNumber();\n      if (!this.inFetch && colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ\n    ) {\n      const useLocalTime = (oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n        oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP);\n      colValue = buf.readOracleDate(useLocalTime);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_ROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        const numBytes = buf.readUInt8();\n        if (isNullLength(numBytes)) {\n          colValue = null;\n        } else {\n          const rowid = buf.readRowID();\n          colValue = utils.encodeRowID(rowid);\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_UROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        colValue = buf.readURowID();\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      colValue = buf.readBinaryDouble();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      colValue = buf.readBinaryFloat();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      colValue = buf.readOracleNumber();\n      if (colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      const numBytes = buf.readUInt8();\n      if (isNullLength(numBytes)) {\n        colValue = null;\n      } else {\n        colValue = this.createCursorFromDescribe(buf);\n        colValue.statement.cursorId = buf.readUB2();\n        // If the cursor ID is 0 for the returned ref cursor then\n        // it is an invalid cursor\n        if (colValue.statement.cursorId === 0 && variable.dir !== constants.BIND_IN) {\n          if (this.options.nullifyInvalidCursor) {\n            colValue = null;\n          } else {\n            errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n          }\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      colValue = buf.readBool();\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_CLOB ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BLOB ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BFILE\n    ) {\n      let length = 0;\n      let chunkSize = 0;\n      const bvalue = buf.readUB4();\n      if (bvalue > 0) { // Non Null data in column\n        colValue = new ThinLobImpl();\n        if (oraTypeNum === constants.TNS_DATA_TYPE_BFILE) {\n          buf.skipUB4();\n        } else {\n          length = buf.readUB8();\n          chunkSize = buf.readUB4();\n        }\n        const locator = Buffer.from(buf.readBytesWithLength());\n        colValue.init(this.connection, locator, dbType, length, chunkSize);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      colValue = buf.readOson();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      colValue = buf.readVector();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      const obj = buf.readDbObject();\n      if (obj.packedData) {\n        const objType = (variable.fetchInfo) ? variable.fetchInfo.dbTypeClass :\n          variable.typeClass;\n\n        if (variable.type === types.DB_TYPE_XMLTYPE) {\n          colValue = readXML(this.connection, obj.packedData);\n        } else {\n          colValue = new ThinDbObjectImpl(objType, obj.packedData);\n          colValue.toid = obj.toid;\n          colValue.oid = obj.oid;\n        }\n      }\n    } else {\n      errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE, dbType.num,\n        variable.columnNum);\n    }\n\n    if (!this.inFetch) {\n      const actualNumBytes = buf.readSB4();\n      if (actualNumBytes < 0 && oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        colValue = null;\n\n      // For objects, maxsize validation is skipped\n      } else if (actualNumBytes !== 0 && colValue !== null &&\n        oraTypeNum !== constants.TNS_DATA_TYPE_INT_NAMED) {\n        this.saveDeferredErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || variable.maxSize > buf.caps.maxStringSize) {\n      buf.skipSB4();                            // null indicator\n      buf.skipUB4();                            // return code\n    }\n    return colValue;\n  }\n\n  processReturnParameter(buf) {\n    let keywordNum = 0;\n    let keyTextValue;\n    let numParams = buf.readUB2();              // al8o4l (ignored)\n\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n    }\n    let numBytes = buf.readUB2();               // al8txl (ignored)\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numParams = buf.readUB2();                  // num key/value pairs\n    for (let i = 0; i < numParams; i++) {\n      numBytes = buf.readUB2();                 // key\n      if (numBytes > 0) {\n        keyTextValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB2();                 // value\n      if (numBytes > 0) {\n        buf.skipBytesChunked();\n      }\n      keywordNum = buf.readUB2();               // keyword num\n      if (keywordNum === constants.TNS_KEYWORD_NUM_CURRENT_SCHEMA) {\n        this.connection.currentSchema = keyTextValue;\n      } else if (keywordNum === constants.TNS_KEYWORD_NUM_EDITION) {\n        this.connection._edition = keyTextValue;\n      }\n    }\n    numBytes = buf.readUB2();                   // registration\n    if (numBytes > 0) {\n      buf.skip(numBytes);\n    }\n    if (this.arrayDmlRowCounts) {\n      const numRows = buf.readUB4();\n      const rowCounts = this.options.dmlRowCounts = [];\n      for (let i = 0; i < numRows; i++) {\n        const rowCount = buf.readUB8();\n        rowCounts.push(rowCount);\n      }\n    }\n  }\n\n  async postProcess() {\n    if (this.deferredErr) {\n      throw this.deferredErr;\n    }\n\n    if (this.outVariables) {\n      for (const variable of this.outVariables) {\n        if (variable.isArray) {\n          if (variable.outConverter) {\n            for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n              variable.values[0][pos] = await variable.outConverter(variable.values[0][pos]);\n            }\n          }\n        } else {\n          if (variable.outConverter) {\n            variable.values[0] = await variable.outConverter(variable.values[0]);\n          }\n        }\n      }\n    }\n    await this.connection._populatePartialDbObjectTypes();\n    for (const resultSet of this.resultSetsToSetup) {\n      resultSet._setup(this.options, resultSet.metadata);\n      // LOBs always require define and they change the type that is actually\n      // returned by the server\n      for (const variable of resultSet.statement.queryVars) {\n        if (variable.type === types.DB_TYPE_CLOB ||\n            variable.type === types.DB_TYPE_NCLOB ||\n            variable.type === types.DB_TYPE_BLOB ||\n            variable.type === types.DB_TYPE_BFILE ||\n            variable.type === types.DB_TYPE_JSON ||\n            variable.type === types.DB_TYPE_VECTOR) {\n          if (variable.type !== variable.fetchInfo.fetchType) {\n            variable.type = variable.fetchInfo.fetchType;\n            variable.maxSize = constants.TNS_MAX_LONG_LENGTH;\n          }\n          if (!resultSet.statement.noPrefetch) {\n            resultSet.statement.requiresDefine = true;\n            resultSet.statement.noPrefetch = true;\n          }\n        }\n      }\n    }\n  }\n\n  preProcess() {\n    if (this.statement.isReturning && !this.parseOnly) {\n      this.outVariables = [];\n      for (const bindInfo of this.statement.bindInfoList) {\n        if (bindInfo.isReturnBind) {\n          this.outVariables.push(bindInfo.bindVar);\n        }\n      }\n    }\n\n    if (this.statement.isQuery) {\n      this.inFetch = true;\n      if (this.statement.queryVars) {\n        this.outVariables = [];\n        for (let i = 0; i < this.statement.queryVars.length; i++) {\n          this.outVariables.push(this.statement.queryVars[i]);\n        }\n      }\n    }\n  }\n\n  processBitVector(buf) {\n    this.numColumnsSent = buf.readUB2();\n    let numBytes = Math.floor(this.statement.numQueryVars / 8);\n    if (this.statement.numQueryVars % 8 > 0) {\n      numBytes += 1;\n    }\n    this.bitVector = Buffer.from(buf.readBytes(numBytes));\n  }\n\n  processBindParams(buf, params) {\n    const bindVars = [];\n    const nonReturningParams = [];\n    for (const bindInfo of params) {\n      if (!bindInfo.isReturnBind) {\n        nonReturningParams.push(bindInfo);\n      }\n      bindVars.push(bindInfo.bindVar);\n    }\n    this.writeColumnMetadata(buf, bindVars);\n    return nonReturningParams;\n  }\n\n  writeColumnMetadata(buf, bindVars) {\n    for (const variable of bindVars) {\n      let oraTypeNum = variable.type._oraTypeNum;\n      let maxSize = variable.maxSize || variable.type._bufferSizeFactor;\n      let lobPrefetchLength = 0;\n\n      // NCHAR, NVARCHAR reports ORA-01460: unimplemented or unreasonable\n      // conversion requested if maxSize is not multiplied by the\n      // bufferSizeFactor\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        maxSize *= variable.type._bufferSizeFactor;\n      }\n      if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n        oraTypeNum = constants.TNS_DATA_TYPE_VARCHAR;\n        maxSize = constants.TNS_MAX_UROWID_LENGTH;\n      }\n      let flag = constants.TNS_BIND_USE_INDICATORS;\n      if (variable.isArray) {\n        flag |= constants.TNS_BIND_ARRAY;\n      }\n      let contFlag = 0;\n      if (variable.type === types.DB_TYPE_BLOB ||\n          variable.type === types.DB_TYPE_CLOB ||\n          variable.type === types.DB_TYPE_NCLOB ||\n          variable.type === types.DB_TYPE_BFILE) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n      } else if (variable.type === types.DB_TYPE_JSON) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_JSON_MAX_LENGTH;\n      } else if (variable.type === types.DB_TYPE_VECTOR) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_VECTOR_MAX_LENGTH;\n      }\n      buf.writeUInt8(oraTypeNum);\n      buf.writeUInt8(flag);\n      // precision and scale are always written as zero as the server\n      // expects that and complains if any other value is sent!\n      buf.writeUInt8(0);\n      buf.writeUInt8(0);\n      if (maxSize > buf.caps.maxStringSize) {\n        buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);\n      } else {\n        buf.writeUB4(maxSize);\n      }\n\n      if (variable.isArray) {\n        buf.writeUB4(variable.maxArraySize);\n      } else {\n        buf.writeUB4(0);                        // max num elements\n      }\n      buf.writeUB4(contFlag);\n      if (variable.objType) {\n        const objType = variable.objType;\n        buf.writeUB4(objType.oid.length);\n        buf.writeBytesWithLength(objType.oid);\n        buf.writeUB2(objType.version);\n      } else {\n        buf.writeUB4(0);                        // OID\n        buf.writeUB2(0);                        // version\n      }\n      if (variable.type._csfrm !== 0) {\n        buf.writeUB2(constants.TNS_CHARSET_UTF8);\n      } else {\n        buf.writeUB2(0);\n      }\n      buf.writeUInt8(variable.type._csfrm);\n      buf.writeUB4(lobPrefetchLength);          // max chars (LOB prefetch)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n        buf.writeUB4(0);                        // oaccolid\n      }\n    }\n  }\n\n  writeBindParamsRow(buf, params, pos) {\n    const offset = this.offset;\n    let foundLong = false;\n    for (const bindInfo of params) {\n      if (bindInfo.isReturnBind)\n        continue;\n      const variable = bindInfo.bindVar;\n      if (variable.isArray) {\n        const numElements = variable.values.length;\n        buf.writeUB4(numElements);\n        for (let i = 0; i < numElements; i++) {\n          this.writeBindParamsColumn(buf, variable, variable.values[i]);\n        }\n      } else {\n        if ((!this.statement.isPlSql) && variable.maxSize > buf.caps.maxStringSize) {\n          foundLong = true;\n        } else {\n          this.writeBindParamsColumn(buf, variable,\n            variable.values[pos + offset]);\n        }\n      }\n    }\n    if (foundLong) {\n      for (const bindInfo of params) {\n        if (bindInfo.isReturnBind)\n          continue;\n        const variable = bindInfo.bindVar;\n        if (variable.maxSize > buf.caps.maxStringSize) {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n  }\n\n  writeBindParamsColumn(buf, variable, value) {\n    const oraTypeNum = variable.type._oraTypeNum;\n    let tempVal;\n    if ((value === undefined || value === null) && oraTypeNum !== constants.TNS_DATA_TYPE_CURSOR && oraTypeNum !== constants.TNS_DATA_TYPE_JSON) {\n      if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        buf.writeUInt8(constants.TNS_ESCAPE_CHAR);\n        buf.writeUInt8(1);\n      } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n        buf.writeUB4(0);                // TOID\n        buf.writeUB4(0);                // OID\n        buf.writeUB4(0);                // snapshot\n        buf.writeUB4(0);                // version\n        buf.writeUB4(0);                // packed data length\n        buf.writeUB4(constants.TNS_OBJ_TOP_LEVEL);    // flags\n      } else {\n        buf.writeUInt8(0);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      if (typeof value === 'boolean') {\n        tempVal = (value) ? \"1\" : \"0\";\n      } else {\n        tempVal = value.toString();\n      }\n      buf.writeOracleNumber(tempVal);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG ||\n      oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        value = Buffer.from(value, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        value = Buffer.from(value);\n      }\n      buf.writeBytesWithLength(value);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ\n    ) {\n      buf.writeOracleDate(value, variable.type);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      buf.writeUInt8(8);\n      buf.writeBinaryDouble(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      buf.writeUInt8(4);\n      buf.writeBinaryFloat(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      let cursor = value;\n      if (!value) {\n        cursor = this.connection._createResultSet();\n      }\n      if (cursor.statement.cursorId === 0) {\n        buf.writeUInt8(1);\n        buf.writeUInt8(0);\n      } else {\n        buf.writeUB4(1);\n        buf.writeUB4(cursor.statement.cursorId);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      if (value) {\n        buf.writeUInt8(2);\n        buf.writeUInt16BE(0x0101);\n      } else {\n        buf.writeUInt16BE(0x0100);\n      }\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_CLOB ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BLOB ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BFILE\n    ) {\n      buf.writeUB4(value._locator.length);\n      buf.writeBytesWithLength(value._locator);\n    } else if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n      buf.writeBytesWithLength(Buffer.from(value));\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      buf.writeOson(value, this.connection._osonMaxFieldNameSize);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      buf.writeVector(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      buf.writeDbObject(value);\n    } else {\n      const message = `Binding data of type ${variable.type}`;\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, message);\n    }\n  }\n\n  createCursorFromDescribe(buf) {\n    const resultSet = this.connection._createResultSet(this.options);\n    resultSet.options.moreRowsToFetch = true;\n    resultSet.statement.isQuery = true;\n    resultSet.statement.requiresFullExecute = true;\n    this.processDescribeInfo(buf, resultSet);\n    return resultSet;\n  }\n\n  processImplicitResultSet(buf) {\n    this.options.implicitResultSet = [];\n    const numResults = buf.readUB4();\n    for (let i = 0; i < numResults; i++) {\n      const numBytes = buf.readUInt8();\n      buf.skipBytes(numBytes);\n      const childResultSet = this.createCursorFromDescribe(buf);\n      childResultSet.statement.cursorId = buf.readUB2();\n      this.options.implicitResultSet.push(childResultSet);\n    }\n  }\n}\n\nconst isNullLength = (len) => {\n  return len === 0 || len === constants.TNS_NULL_LENGTH_INDICATOR;\n};\n\nmodule.exports = MessageWithData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}