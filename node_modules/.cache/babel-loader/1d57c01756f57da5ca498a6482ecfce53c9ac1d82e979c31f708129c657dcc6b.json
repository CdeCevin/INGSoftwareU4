{"ast":null,"code":"// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Used for two-phase commit (TPC) transaction start, attach and detach.\n *\n * @class TransactionSwitchMessage\n * @extends {Message}\n */\nclass TransactionSwitchMessage extends Message {\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_TPC_TXN_SWITCH;\n    this.applicationValue = 0;\n    this.internalName = connImpl.internalName;\n    if (this.internalName) {\n      this.internalName = Buffer.from(this.internalName);\n    }\n    this.externalName = connImpl.externalName;\n    if (this.externalName) {\n      this.externalName = Buffer.from(this.externalName);\n    }\n  }\n  processReturnParameter(buf) {\n    // process the parameters returned by the datatabase\n    this.applicationValue = buf.readUB4();\n    this.contextLen = buf.readUB2();\n    if (this.contextLen > 0) {\n      this.context = Buffer.from(buf.readBytes(this.contextLen));\n    }\n  }\n  encode(buf) {\n    // writes the message to the database\n    // acquire data to send to the server\n    let xidBytes;\n    if (this.xid) {\n      xidBytes = Buffer.alloc(128);\n      this.xid.globalTransactionId.copy(xidBytes);\n      this.xid.branchQualifier.copy(xidBytes, this.xid.globalTransactionId.length);\n    }\n\n    // write message\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(this.operation);\n    if (this.context) {\n      buf.writeUInt8(1); // pointer (transaction context)\n      buf.writeUB4(this.context.length);\n    } else {\n      buf.writeUInt8(0); // pointer (transaction context)\n      buf.writeUB4(0); // transaction context length\n    }\n    if (this.xid) {\n      buf.writeUB4(this.xid.formatId);\n      buf.writeUB4(this.xid.globalTransactionId.length);\n      buf.writeUB4(this.xid.branchQualifier.length);\n      buf.writeUInt8(1); // pointer (XID)\n      buf.writeUB4(xidBytes.length);\n    } else {\n      buf.writeUB4(0); // format id\n      buf.writeUB4(0); // global transaction id length\n      buf.writeUB4(0); // branch qualifier length\n      buf.writeUInt8(0); // pointer (XID)\n      buf.writeUB4(0); // XID length\n    }\n    buf.writeUB4(this.flags);\n    buf.writeUB4(this.timeout);\n    buf.writeUInt8(1); // pointer (application value)\n    buf.writeUInt8(1); // pointer (return context)\n    buf.writeUInt8(1); // pointer (return context length)\n\n    if (this.internalName) {\n      buf.writeUInt8(1); // pointer (internal name)\n      buf.writeUB4(this.internalName.length);\n    } else {\n      buf.writeUInt8(0); // pointer (internal name)\n      buf.writeUB4(0); // length of internal name\n    }\n    if (this.externalName) {\n      buf.writeUInt8(1); // pointer (external name)\n      buf.writeUB4(this.externalName.length);\n    } else {\n      buf.writeUInt8(0); // pointer (external name)\n      buf.writeUB4(0); // length of external name\n    }\n    if (this.context) {\n      buf.writeBytes(this.context);\n    }\n    if (this.xid) {\n      buf.writeBytes(xidBytes);\n    }\n    buf.writeUB4(this.applicationValue);\n    if (this.internalName) {\n      buf.writeBytes(this.internalName);\n    }\n    if (this.externalName) {\n      buf.writeBytes(this.externalName);\n    }\n  }\n}\nmodule.exports = TransactionSwitchMessage;","map":{"version":3,"names":["Message","require","constants","TransactionSwitchMessage","constructor","connImpl","functionCode","TNS_FUNC_TPC_TXN_SWITCH","applicationValue","internalName","Buffer","from","externalName","processReturnParameter","buf","readUB4","contextLen","readUB2","context","readBytes","encode","xidBytes","xid","alloc","globalTransactionId","copy","branchQualifier","length","writeFunctionHeader","writeUB4","operation","writeUInt8","formatId","flags","timeout","writeBytes","module","exports"],"sources":["C:/Users/Koliv/Desktop/Software/my-react-app/node_modules/oracledb/lib/thin/protocol/messages/transactionSwitch.js"],"sourcesContent":["// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Used for two-phase commit (TPC) transaction start, attach and detach.\n *\n * @class TransactionSwitchMessage\n * @extends {Message}\n */\nclass TransactionSwitchMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_TPC_TXN_SWITCH;\n    this.applicationValue = 0;\n    this.internalName = connImpl.internalName;\n    if (this.internalName) {\n      this.internalName = Buffer.from(this.internalName);\n    }\n    this.externalName = connImpl.externalName;\n    if (this.externalName) {\n      this.externalName = Buffer.from(this.externalName);\n    }\n  }\n\n  processReturnParameter(buf) {\n    // process the parameters returned by the datatabase\n    this.applicationValue = buf.readUB4();\n    this.contextLen = buf.readUB2();\n    if (this.contextLen > 0) {\n      this.context = Buffer.from(buf.readBytes(this.contextLen));\n    }\n  }\n\n  encode(buf) {\n    // writes the message to the database\n    // acquire data to send to the server\n    let xidBytes;\n    if (this.xid) {\n      xidBytes = Buffer.alloc(128);\n      this.xid.globalTransactionId.copy(xidBytes);\n      this.xid.branchQualifier.copy(xidBytes,\n        this.xid.globalTransactionId.length);\n    }\n\n    // write message\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(this.operation);\n    if (this.context) {\n      buf.writeUInt8(1);  // pointer (transaction context)\n      buf.writeUB4(this.context.length);\n    } else {\n      buf.writeUInt8(0);  // pointer (transaction context)\n      buf.writeUB4(0);    // transaction context length\n    }\n\n    if (this.xid) {\n      buf.writeUB4(this.xid.formatId);\n      buf.writeUB4(this.xid.globalTransactionId.length);\n      buf.writeUB4(this.xid.branchQualifier.length);\n      buf.writeUInt8(1);  // pointer (XID)\n      buf.writeUB4(xidBytes.length);\n    } else {\n      buf.writeUB4(0);    // format id\n      buf.writeUB4(0);    // global transaction id length\n      buf.writeUB4(0);    // branch qualifier length\n      buf.writeUInt8(0);  // pointer (XID)\n      buf.writeUB4(0);    // XID length\n    }\n\n    buf.writeUB4(this.flags);\n    buf.writeUB4(this.timeout);\n    buf.writeUInt8(1);   // pointer (application value)\n    buf.writeUInt8(1);   // pointer (return context)\n    buf.writeUInt8(1);   // pointer (return context length)\n\n    if (this.internalName) {\n      buf.writeUInt8(1);   // pointer (internal name)\n      buf.writeUB4(this.internalName.length);\n    } else {\n      buf.writeUInt8(0);   // pointer (internal name)\n      buf.writeUB4(0);     // length of internal name\n    }\n\n    if (this.externalName) {\n      buf.writeUInt8(1);   // pointer (external name)\n      buf.writeUB4(this.externalName.length);\n    } else {\n      buf.writeUInt8(0);   // pointer (external name)\n      buf.writeUB4(0);     // length of external name\n    }\n\n    if (this.context) {\n      buf.writeBytes(this.context);\n    }\n    if (this.xid) {\n      buf.writeBytes(xidBytes);\n    }\n    buf.writeUB4(this.applicationValue);\n\n    if (this.internalName) {\n      buf.writeBytes(this.internalName);\n    }\n\n    if (this.externalName) {\n      buf.writeBytes(this.externalName);\n    }\n  }\n}\n\nmodule.exports = TransactionSwitchMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}